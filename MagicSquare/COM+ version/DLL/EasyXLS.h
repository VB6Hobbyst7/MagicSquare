// C++ source equivalent of Win32 type library EasyXLS.dll
// DO NOT EDIT!


#pragma once
#pragma pack(push, 8)

#include <comdef.h>

#define 	ALIGNMENT_ALIGNMENT_GENERAL   "general"
#define 	ALIGNMENT_ALIGNMENT_CENTER   "center"
#define 	ALIGNMENT_ALIGNMENT_LEFT   "left"
#define 	ALIGNMENT_ALIGNMENT_RIGHT   "right"
#define 	ALIGNMENT_ALIGNMENT_FILL   "fill"
#define 	ALIGNMENT_ALIGNMENT_JUSTIFY   "justify"
#define 	ALIGNMENT_ALIGNMENT_CENTER_ACROSS_SELECTION   "center across selection"
#define     ALIGNMENT_ALIGNMENT_DISTRIBUTED   "distributed"
#define 	ALIGNMENT_ALIGNMENT_TOP   "top"
#define 	ALIGNMENT_ALIGNMENT_MIDDLE   "middle"
#define 	ALIGNMENT_ALIGNMENT_BOTTOM   "bottom"
#define 	ALIGNMENT_TEXT_DIRECTION_CONTEXT   0
#define 	ALIGNMENT_TEXT_DIRECTION_LEFT_TO_RIGHT   1
#define 	ALIGNMENT_TEXT_DIRECTION_RIGHT_TO_LEFT   2


#define 	ALIGNMENTFORMAT_VERTICAL_ALIGNMENT_TOP   "top"
#define 	ALIGNMENTFORMAT_VERTICAL_ALIGNMENT_MIDDLE   "middle"
#define 	ALIGNMENTFORMAT_VERTICAL_ALIGNMENT_BOTTOM   "bottom"
#define 	ALIGNMENTFORMAT_VERTICAL_ALIGNMENT_TOP_CENTER   "topcenter"
#define 	ALIGNMENTFORMAT_VERTICAL_ALIGNMENT_MIDDLE_CENTER   "middlecenter"
#define 	ALIGNMENTFORMAT_VERTICAL_ALIGNMENT_BOTTOM_CENTER   "bottomcenter"
#define 	ALIGNMENTFORMAT_HORIZONTAL_ALIGNMENT_LEFT   "left"
#define 	ALIGNMENTFORMAT_HORIZONTAL_ALIGNMENT_CENTER   "center"
#define 	ALIGNMENTFORMAT_HORIZONTAL_ALIGNMENT_RIGHT   "right"
#define 	ALIGNMENTFORMAT_HORIZONTAL_ALIGNMENT_LEFT_MIDDLE   "leftmiddle"
#define 	ALIGNMENTFORMAT_HORIZONTAL_ALIGNMENT_CENTER_MIDDLE   "centermiddle"
#define 	ALIGNMENTFORMAT_HORIZONTAL_ALIGNMENT_RIGHT_MIDDLE   "rightmiddle"

		
#define 	BORDER_BORDER_NONE   0
#define 	BORDER_BORDER_THIN   1
#define 	BORDER_BORDER_MEDIUM   2
#define 	BORDER_BORDER_DASHED   3
#define 	BORDER_BORDER_DOTTED   4
#define 	BORDER_BORDER_THICK   5
#define 	BORDER_BORDER_DOUBLE   6
#define 	BORDER_BORDER_HAIR   7
#define 	BORDER_BORDER_MEDIUM_DASHED   8
#define 	BORDER_BORDER_DASH_DOT   9
#define 	BORDER_BORDER_MEDIUM_DASH_DOT   10
#define 	BORDER_BORDER_DASH_DOT_DOT   11
#define 	BORDER_BORDER_MEDIUM_DASH_DOT_DOT   12
#define 	BORDER_BORDER_SLANTED_DASH_DOT   13
	
	
#define 	CHART_CHART_TYPE_COLUMN_CLUSTERED   0
#define 	CHART_CHART_TYPE_COLUMN_STACKED   1
#define 	CHART_CHART_TYPE_COLUMN_100_PERCENT_STACKED   2
#define 	CHART_CHART_TYPE_COLUMN_3D_CLUSTERED   3
#define 	CHART_CHART_TYPE_COLUMN_3D_STACKED   4
#define 	CHART_CHART_TYPE_COLUMN_3D_100_PERCENT_STACKED   5
#define 	CHART_CHART_TYPE_COLUMN_3D   6
#define 	CHART_CHART_TYPE_BAR_CLUSTERED   10
#define 	CHART_CHART_TYPE_BAR_STACKED   11
#define 	CHART_CHART_TYPE_BAR_100_PERCENT_STACKED   12
#define 	CHART_CHART_TYPE_BAR_3D_CLUSTERED   13
#define 	CHART_CHART_TYPE_BAR_3D_STACKED   14
#define 	CHART_CHART_TYPE_BAR_3D_100_PERCENT_STACKED   15
#define 	CHART_CHART_TYPE_LINE   20
#define 	CHART_CHART_TYPE_LINE_STACKED   21
#define 	CHART_CHART_TYPE_LINE_100_PERCENT_STACKED   22
#define 	CHART_CHART_TYPE_LINE_MARKERS   23
#define 	CHART_CHART_TYPE_LINE_STACKED_MARKERS   24
#define 	CHART_CHART_TYPE_LINE_100_PERCENT_STACKED_MARKERS   25
#define 	CHART_CHART_TYPE_LINE_3D   26
#define 	CHART_CHART_TYPE_PIE   30
#define 	CHART_CHART_TYPE_PIE_3D   31
#define 	CHART_CHART_TYPE_PIE_OF_PIE   32
#define 	CHART_CHART_TYPE_PIE_EXPLODED   33
#define 	CHART_CHART_TYPE_PIE_3D_EXPLODED   34
#define 	CHART_CHART_TYPE_BAR_OF_PIE   35
#define 	CHART_CHART_TYPE_SCATTER   40
#define 	CHART_CHART_TYPE_SCATTER_SMOOTHED_LINES_MARKERS   41
#define 	CHART_CHART_TYPE_SCATTER_SMOOTHED_LINES   42
#define 	CHART_CHART_TYPE_SCATTER_LINES_MARKERS   43
#define 	CHART_CHART_TYPE_SCATTER_LINES   44
#define 	CHART_CHART_TYPE_AREA   50
#define 	CHART_CHART_TYPE_AREA_STACKED   51
#define 	CHART_CHART_TYPE_AREA_100_PERCENT_STACKED   52
#define 	CHART_CHART_TYPE_AREA_3D   53
#define 	CHART_CHART_TYPE_AREA_3D_STACKED   54
#define 	CHART_CHART_TYPE_AREA_3D_100_PERCENT_STACKED   55
#define 	CHART_CHART_TYPE_DOUGHNUT   60
#define 	CHART_CHART_TYPE_DOUGHNUT_EXPLODED   61
#define 	CHART_CHART_TYPE_RADAR   70
#define 	CHART_CHART_TYPE_RADAR_MARKERS   71
#define 	CHART_CHART_TYPE_RADAR_FILLED   72
#define 	CHART_CHART_TYPE_SURFACE_3D   80
#define 	CHART_CHART_TYPE_SURFACE_3D_WIREFRAME   81
#define 	CHART_CHART_TYPE_SURFACE_CONTOUR   82
#define 	CHART_CHART_TYPE_SURFACE_CONTOUR_WIREFRAME   83
#define 	CHART_CHART_TYPE_BUBBLE   90
#define 	CHART_CHART_TYPE_BUBBLE_3D_EFFECT   91
#define 	CHART_CHART_TYPE_STOCK_HIGH_LOW_CLOSE   100
#define 	CHART_CHART_TYPE_STOCK_OPEN_HIGH_LOW_CLOSE   101
#define 	CHART_CHART_TYPE_STOCK_VOLUME_HIGH_LOW_CLOSE   102
#define 	CHART_CHART_TYPE_STOCK_VOLUME_OPEN_HIGH_LOW_CLOSE   103
#define 	CHART_CHART_TYPE_CYLINDER_COLUMN   110
#define 	CHART_CHART_TYPE_CYLINDER_COLUMN_STACKED   111
#define 	CHART_CHART_TYPE_CYLINDER_COLUMN_100_PERCENT_STACKED   112
#define 	CHART_CHART_TYPE_CYLINDER_BAR   113
#define 	CHART_CHART_TYPE_CYLINDER_BAR_STACKED   114
#define 	CHART_CHART_TYPE_CYLINDER_BAR_100_PERCENT_STACKED   115
#define 	CHART_CHART_TYPE_CYLINDER_COLUMN_3D   116
#define 	CHART_CHART_TYPE_CONE_COLUMN   120
#define 	CHART_CHART_TYPE_CONE_COLUMN_STACKED   121
#define 	CHART_CHART_TYPE_CONE_COLUMN_100_PERCENT_STACKED   122
#define 	CHART_CHART_TYPE_CONE_BAR   123
#define 	CHART_CHART_TYPE_CONE_BAR_STACKED   124
#define 	CHART_CHART_TYPE_CONE_BAR_100_PERCENT_STACKED   125
#define 	CHART_CHART_TYPE_CONE_COLUMN_3D   126
#define 	CHART_CHART_TYPE_PYRAMID_COLUMN   130
#define 	CHART_CHART_TYPE_PYRAMID_COLUMN_STACKED   131
#define 	CHART_CHART_TYPE_PYRAMID_COLUMN_100_PERCENT_STACKED   132
#define 	CHART_CHART_TYPE_PYRAMID_BAR   133
#define 	CHART_CHART_TYPE_PYRAMID_BAR_STACKED   134
#define 	CHART_CHART_TYPE_PYRAMID_BAR_100_PERCENT_STACKED   135
#define 	CHART_CHART_TYPE_PYRAMID_COLUMN_3D   136
#define 	CHART_LEGEND_BOTTOM   0
#define 	CHART_LEGEND_CORNER   1
#define 	CHART_LEGEND_TOP   2
#define 	CHART_LEGEND_RIGHT   3
#define 	CHART_LEGEND_LEFT   4
#define 	CHART_LEGEND_NOT_DOCKED_OR_INSIDE_THE_PLOT_AREA   7
#define 	CHART_KEYS_ARRANGEMENT_DIRECTION_HORIZONTAL   0
#define 	CHART_KEYS_ARRANGEMENT_DIRECTION_VERTICAL   1
#define 	CHART_LINE_STYLE_SOLID   0
#define 	CHART_LINE_STYLE_DASH   1
#define 	CHART_LINE_STYLE_DOT   2
#define 	CHART_LINE_STYLE_DASH_DOT   3
#define 	CHART_LINE_STYLE_DASH_DOT_DOT   4
#define 	CHART_LINE_STYLE_NONE   5
#define 	CHART_LINE_STYLE_DARK_GRAY   6
#define 	CHART_LINE_STYLE_MEDIUM_GRAY   7
#define 	CHART_LINE_STYLE_LIGHT_GRAY   8
#define 	CHART_LINE_WEIGHT_HAIRLINE   -1
#define 	CHART_LINE_WEIGHT_NARROW   0
#define 	CHART_LINE_WEIGHT_MEDIUM   1
#define 	CHART_LINE_WEIGHT_WIDE   2
#define 	CHART_LINE_WEIGHT_ZERO   65535
#define 	CHART_AXIS_TICK_MARK_TYPE_NONE   0
#define 	CHART_AXIS_TICK_MARK_TYPE_INSIDE   1
#define 	CHART_AXIS_TICK_MARK_TYPE_OUTSIDE   2
#define 	CHART_AXIS_TICK_MARK_TYPE_CROSS   3
#define 	CHART_AXIS_TICK_MARK_LABEL_NONE   0
#define 	CHART_AXIS_TICK_MARK_LABEL_LOW   1
#define 	CHART_AXIS_TICK_MARK_LABEL_HIGH   2
#define 	CHART_AXIS_TICK_MARK_LABEL_NEXT_TO_AXIS   3
#define 	CHART_SERIES_DATA_LABELS_NONE   0
#define 	CHART_SERIES_DATA_LABELS_SHOW_VALUE   1
#define 	CHART_SERIES_DATA_LABELS_SHOW_PERCENT   2
#define 	CHART_SERIES_DATA_LABELS_SHOW_LABEL   3
#define 	CHART_SERIES_DATA_LABELS_SHOW_LABEL_AND_PERCENT   4
#define 	CHART_SERIES_DATA_LABELS_SHOW_BUBBLE_SIZE   5
#define 	CHART_SERIES_IN_ROWS   0
#define 	CHART_SERIES_IN_COLUMNS   1
#define 	CHART_SERIES_MARKER_AUTOMATIC   -1
#define 	CHART_SERIES_MARKER_NONE   0
#define 	CHART_SERIES_MARKER_SQUARE   1
#define 	CHART_SERIES_MARKER_DIAMOND   2
#define 	CHART_SERIES_MARKER_TRIANGLE   3
#define 	CHART_SERIES_MARKER_X   4
#define 	CHART_SERIES_MARKER_STAR   5
#define 	CHART_SERIES_MARKER_DAW_JONES   6
#define 	CHART_SERIES_MARKER_STANDARD_DEVIATION   7
#define 	CHART_SERIES_MARKER_CIRCLE   8
#define 	CHART_SERIES_MARKER_PLUS_SIGN   9
#define 	CHART_SPLIT_BY_POSITION   0
#define 	CHART_SPLIT_BY_VALUE   1
#define 	CHART_SPLIT_BY_PERCENTAGE_VALUE   2
#define 	CHART_BUBBLE_SIZE_REPRESENTS_AREA_OF_BUBBLES   1
#define 	CHART_BUBBLE_SIZE_REPRESENTS_WIDTH_OF_BUBBLES   2


#define 	COLOR_ALICEBLUE   0xfffff8f0
#define 	COLOR_ANTIQUEWHITE   0xffd7ebfa
#define 	COLOR_AQUA   0xffffff00
#define 	COLOR_AQUAMARINE   0xffd4ff7f
#define 	COLOR_AZURE   0xfffffff0
#define 	COLOR_BEIGE   0xffdcf5f5
#define 	COLOR_BISQUE   0xffc4e4ff
#define 	COLOR_BLACK   0xff000000
#define 	COLOR_BLANCHEDALMOND   0xffcdebff
#define 	COLOR_BLUE   0xffff0000
#define 	COLOR_BLUEVIOLET   0xffe22b8a
#define 	COLOR_BROWN   0xff2a2aa5
#define 	COLOR_BURLYWOOD   0xff87b8de
#define 	COLOR_CADETBLUE   0xffa09e5f
#define 	COLOR_CHARTREUSE   0xff00ff7f
#define 	COLOR_CHOCOLATE   0xff1e69d2
#define 	COLOR_CORAL   0xff507fff
#define 	COLOR_CORNFLOWERBLUE   0xffed9564
#define 	COLOR_CORNSILK   0xffdcf8ff
#define 	COLOR_CRIMSON   0xff3c14dc
#define 	COLOR_CYAN   0xffffff00
#define 	COLOR_DARKBLUE   0xff8b0000
#define 	COLOR_DARKCYAN   0xff8b8b00
#define 	COLOR_DARKGOLDENROD   0xff0b86b8
#define 	COLOR_DARKGRAY   0xffa9a9a9
#define 	COLOR_DARKGREEN   0xff006400
#define 	COLOR_DARKKHAKI   0xff6bb7bd
#define 	COLOR_DARKMAGENTA   0xff8b008b
#define 	COLOR_DARKOLIVEGREEN   0xff2f6b55
#define 	COLOR_DARKORANGE   0xff008cff
#define 	COLOR_DARKORCHID   0xffcc3299
#define 	COLOR_DARKRED   0xff00008b
#define 	COLOR_DARKSALMON   0xff7a96e9
#define 	COLOR_DARKSEAGREEN   0xff8bbc8f
#define 	COLOR_DARKSLATEBLUE   0xff8b3d48
#define 	COLOR_DARKSLATEGRAY   0xff4f4f2f
#define 	COLOR_DARKTURQUOISE   0xffd1ce00
#define 	COLOR_DARKVIOLET   0xffd30094
#define 	COLOR_DEEPPINK   0xff9314ff
#define 	COLOR_DEEPSKYBLUE   0xffffbf00
#define 	COLOR_DIMGRAY   0xff696969
#define 	COLOR_DODGERBLUE   0xffff901e
#define 	COLOR_FIREBRICK   0xff2222b2
#define 	COLOR_FLORALWHITE   0xfff0faff
#define 	COLOR_FORESTGREEN   0xff228b22
#define 	COLOR_FUCHSIA   0xffff00ff
#define 	COLOR_GAINSBORO   0xffdcdcdc
#define 	COLOR_GHOSTWHITE   0xfffff8f8
#define 	COLOR_GOLD   0xff00d7ff
#define 	COLOR_GOLDENROD   0xff20a5da
#define 	COLOR_GRAY   0xff808080
#define 	COLOR_GREEN   0xff008000
#define 	COLOR_GREENYELLOW   0xff2fffad
#define 	COLOR_HONEYDEW   0xfff0fff0
#define 	COLOR_HOTPINK   0xffb469ff
#define 	COLOR_INDIANRED   0xff5c5ccd
#define 	COLOR_INDIGO   0xff82004b
#define 	COLOR_IVORY   0xfff0ffff
#define 	COLOR_KHAKI   0xff8ce6f0
#define 	COLOR_LAVENDER   0xfffae6e6
#define 	COLOR_LAVENDERBLUSH   0xfff5f0ff
#define 	COLOR_LAWNGREEN   0xff00fc7c
#define 	COLOR_LEMONCHIFFON   0xffcdfaff
#define 	COLOR_LIGHTBLUE   0xffe6d8ad
#define 	COLOR_LIGHTCORAL   0xff8080f0
#define 	COLOR_LIGHTCYAN   0xffffffe0
#define 	COLOR_LIGHTGOLDENRODYELLOW   0xffd2fafa
#define 	COLOR_LIGHTGREEN   0xff90ee90
#define 	COLOR_LIGHTGRAY   0xffd3d3d3
#define 	COLOR_LIGHTPINK   0xffc1b6ff
#define 	COLOR_LIGHTSALMON   0xff7aa0ff
#define 	COLOR_LIGHTSEAGREEN   0xffaab220
#define 	COLOR_LIGHTSKYBLUE   0xffface87
#define 	COLOR_LIGHTSLATEGRAY   0xff998877
#define 	COLOR_LIGHTSTEELBLUE   0xffdec4b0
#define 	COLOR_LIGHTYELLOW   0xffe0ffff
#define 	COLOR_LIME   0xff00ff00
#define 	COLOR_LIMEGREEN   0xff32cd32
#define 	COLOR_LINEN   0xffe6f0fa
#define 	COLOR_MAGENTA   0xffff00ff
#define 	COLOR_MAROON   0xff000080
#define 	COLOR_MEDIUMAQUAMARINE   0xffaacd66
#define 	COLOR_MEDIUMBLUE   0xffcd0000
#define 	COLOR_MEDIUMORCHID   0xffd355ba
#define 	COLOR_MEDIUMPURPLE   0xffdb7093
#define 	COLOR_MEDIUMSEAGREEN   0xff71b33c
#define 	COLOR_MEDIUMSLATEBLUE   0xffee687b
#define 	COLOR_MEDIUMSPRINGGREEN   0xff9afa00
#define 	COLOR_MEDIUMTURQUOISE   0xffccd148
#define 	COLOR_MEDIUMVIOLETRED   0xff8515c7
#define 	COLOR_MIDNIGHTBLUE   0xff701919
#define 	COLOR_MINTCREAM   0xfffafff5
#define 	COLOR_MISTYROSE   0xffe1e4ff
#define 	COLOR_MOCCASIN   0xffb5e4ff
#define 	COLOR_NAVAJOWHITE   0xffaddeff
#define 	COLOR_NAVY   0xff800000
#define 	COLOR_OLDLACE   0xffe6f5fd
#define 	COLOR_OLIVE   0xff008080
#define 	COLOR_OLIVEDRAB   0xff238e6b
#define 	COLOR_ORANGE   0xff00a5ff
#define 	COLOR_ORANGERED   0xff0045ff
#define 	COLOR_ORCHID   0xffd670da
#define 	COLOR_PALEGOLDENROD   0xffaae8ee
#define 	COLOR_PALEGREEN   0xff98fb98
#define 	COLOR_PALETURQUOISE   0xffeeeeaf
#define 	COLOR_PALEVIOLETRED   0xff9370db
#define 	COLOR_PAPAYAWHIP   0xffd5efff
#define 	COLOR_PEACHPUFF   0xffb9daff
#define 	COLOR_PERU   0xff3f85cd
#define 	COLOR_PINK   0xffcbc0ff
#define 	COLOR_PLUM   0xffdda0dd
#define 	COLOR_POWDERBLUE   0xffe6e0b0
#define 	COLOR_PURPLE   0xff800080
#define 	COLOR_RED   0xff0000ff
#define 	COLOR_ROSYBROWN   0xff8f8fbc
#define 	COLOR_ROYALBLUE   0xffe16941
#define 	COLOR_SADDLEBROWN   0xff13458b
#define 	COLOR_SALMON   0xff7280fa
#define 	COLOR_SANDYBROWN   0xff60a4f4
#define 	COLOR_SEAGREEN   0xff578b2e
#define 	COLOR_SEASHELL   0xffeef5ff
#define 	COLOR_SIENNA   0xff2d52a0
#define 	COLOR_SILVER   0xffc0c0c0
#define 	COLOR_SKYBLUE   0xffebce87
#define 	COLOR_SLATEBLUE   0xffcd5a6a
#define 	COLOR_SLATEGRAY   0xff908070
#define 	COLOR_SNOW   0xfffafaff
#define 	COLOR_SPRINGGREEN   0xff7fff00
#define 	COLOR_STEELBLUE   0xffb48246
#define 	COLOR_TAN   0xff8cb4d2
#define 	COLOR_TEAL   0xff808000
#define 	COLOR_THISTLE   0xffd8bfd8
#define 	COLOR_TOMATO   0xff4763ff
#define 	COLOR_TURQUOISE   0xffd0e040
#define 	COLOR_VIOLET   0xffee82ee
#define 	COLOR_WHEAT   0xffb3def5
#define 	COLOR_WHITE   0xffffffff
#define 	COLOR_WHITESMOKE   0xfff5f5f5
#define 	COLOR_YELLOW   0xff00ffff
#define 	COLOR_YELLOWGREEN   0xff32cd9a
	

#define 	CONDITIONALFORMATTING_CONDITIONAL_FORMATTING_TYPE_COMPARE_CELL_VALUE   1
#define 	CONDITIONALFORMATTING_CONDITIONAL_FORMATTING_TYPE_EVALUATE_FORMULA   2
#define 	CONDITIONALFORMATTING_OPERATOR_NO_COMPARATION   0
#define 	CONDITIONALFORMATTING_OPERATOR_BETWEEN   1
#define 	CONDITIONALFORMATTING_OPERATOR_NOT_BETWEEN   2
#define 	CONDITIONALFORMATTING_OPERATOR_EQUAL_TO   3
#define 	CONDITIONALFORMATTING_OPERATOR_NOT_EQUAL_TO   4
#define 	CONDITIONALFORMATTING_OPERATOR_GREATER_THAN   5
#define 	CONDITIONALFORMATTING_OPERATOR_LESS_THAN   6
#define 	CONDITIONALFORMATTING_OPERATOR_GREATER_THAN_OR_EQUAL_TO   7
#define 	CONDITIONALFORMATTING_OPERATOR_LESS_THAN_OR_EQUAL_TO   8


#define 	DATAGROUP_GROUP_BY_ROWS  0 
#define 	DATAGROUP_GROUP_BY_COLUMNS  1 
	
	
#define 	DATATYPE_NUMERIC   "numeric"
#define 	DATATYPE_STRING   "string"
#define 	DATATYPE_DATE   "date"
#define		DATATYPE_AUTOMATIC "automatic"
#define		DATATYPE_ERROR "error"
#define		DATATYPE_BOOLEAN "boolean"
	
	
#define 	DATAVALIDATOR_VALIDATE_ANY_VALUE   0
#define 	DATAVALIDATOR_VALIDATE_WHOLE_NUMBER   1
#define 	DATAVALIDATOR_VALIDATE_DECIMAL   2
#define 	DATAVALIDATOR_VALIDATE_LIST   3
#define 	DATAVALIDATOR_VALIDATE_DATE   4
#define 	DATAVALIDATOR_VALIDATE_TIME   5
#define 	DATAVALIDATOR_VALIDATE_TEXT_LENGTH   6
#define 	DATAVALIDATOR_VALIDATE_CUSTOM   7
#define 	DATAVALIDATOR_OPERATOR_BETWEEN   0
#define 	DATAVALIDATOR_OPERATOR_NOT_BETWEEN   1
#define 	DATAVALIDATOR_OPERATOR_EQUAL_TO   2
#define 	DATAVALIDATOR_OPERATOR_NOT_EQUAL_TO   3
#define 	DATAVALIDATOR_OPERATOR_GREATER_THAN   4
#define 	DATAVALIDATOR_OPERATOR_LESS_THAN   5
#define 	DATAVALIDATOR_OPERATOR_GREATER_THAN_OR_EQUAL_TO   6
#define 	DATAVALIDATOR_OPERATOR_LESS_THAN_OR_EQUAL_TO   7
#define 	DATAVALIDATOR_ERROR_STOP   0
#define 	DATAVALIDATOR_ERROR_WARNING   1
#define 	DATAVALIDATOR_ERROR_INFO   2
	
	
#define 	ERRORTYPE_NULL   0
#define 	ERRORTYPE_DIV0   7
#define 	ERRORTYPE_VALUE   15
#define 	ERRORTYPE_REF   23
#define 	ERRORTYPE_NAME   29
#define 	ERRORTYPE_NUM   36
#define 	ERRORTYPE_NA   42


#define 	FILEPROPERTY_VT_NULL  1
#define 	FILEPROPERTY_VT_I2  2
#define 	FILEPROPERTY_VT_I4  3
#define 	FILEPROPERTY_VT_NUMBER  5
#define 	FILEPROPERTY_VT_BOOL  11
#define 	FILEPROPERTY_VT_VARIANT  12
#define 	FILEPROPERTY_VT_LPSTR  30
#define 	FILEPROPERTY_VT_FILETIME  64
#define 	FILEPROPERTY_VT_BLOB  65
	
	
#define 	FILL_GRADIENT_NONE   0
#define 	FILL_GRADIENT_HORIZONTAL_TOP_TO_BOTTOM  1
#define 	FILL_GRADIENT_HORIZONTAL_BOTTOM_TO_TOP  2
#define 	FILL_GRADIENT_HORIZONTAL_EDGES_TO_CENTER  3
#define 	FILL_GRADIENT_VERTICAL_LEFT_TO_RIGHT  4
#define 	FILL_GRADIENT_VERTICAL_RIGHT_TO_LEFT  5
#define 	FILL_GRADIENT_VERTICAL_EDGES_TO_CENTER  6
#define 	FILL_GRADIENT_DIAGONAL_UP_UPPER_LEFT_TO_BOTTOM_RIGHT  7
#define 	FILL_GRADIENT_DIAGONAL_UP_BOTTOM_RIGHT_TO_UPPER_LEFT  8
#define 	FILL_GRADIENT_DIAGONAL_UP_CORNERS_TO_CENTER  9
#define 	FILL_GRADIENT_DIAGONAL_DOWN_UPPER_RIGHT_TO_BOTTOM_LEFT  10
#define 	FILL_GRADIENT_GRADIENT_DIAGONAL_DOWN_BOTTOM_LEFT_TO_UPPER_RIGHT  11
#define 	FILL_GRADIENT_GRADIENT_DIAGONAL_DOWN_CORNERS_TO_CENTER  12
#define 	FILL_GRADIENT_GRADIENT_FROM_UPPER_LEFT_CORNER  13
#define 	FILL_GRADIENT_GRADIENT_FROM_UPPER_RIGHT_CORNER  14
#define 	FILL_GRADIENT_GRADIENT_FROM_BOTTOM_LEFT_CORNER  15
#define 	FILL_GRADIENT_GRADIENT_FROM_BOTTOM_RIGHT_CORNER   16
#define 	FILL_GRADIENT_GRADIENT_FROM_CENTER   17


#define 	FILLFORMAT_PATTERN_NONE  255
#define 	FILLFORMAT_PATTERN_SOLID  1
#define 	FILLFORMAT_PATTERN_5_PERCENT  196
#define 	FILLFORMAT_PATTERN_50_PERCENT  197
#define 	FILLFORMAT_PATTERN_LIGHT_DOWNWARD_DIAGONAL  198
#define 	FILLFORMAT_PATTERN_LIGHT_VERTICAL  199
#define 	FILLFORMAT_PATTERN_DASHED_DOWNWARD_DIAGONAL  200
#define 	FILLFORMAT_PATTERN_ZIG_ZAG  201
#define 	FILLFORMAT_PATTERN_DIVOT  202
#define 	FILLFORMAT_PATTERN_SMALL_GRID  203
#define 	FILLFORMAT_PATTERN_10_PERCENT  204
#define 	FILLFORMAT_PATTERN_60_PERCENT  205
#define 	FILLFORMAT_PATTERN_LIGHT_UPWARD_DIAGONAL  206
#define 	FILLFORMAT_PATTERN_LIGHT_HORIZONTAL  207
#define 	FILLFORMAT_PATTERN_DASHED_UPWARD_DIAGONAL  208
#define 	FILLFORMAT_PATTERN_WAVE  209
#define 	FILLFORMAT_PATTERN_DOTTED_GRID  210
#define 	FILLFORMAT_PATTERN_LARGE_GRID  211
#define 	FILLFORMAT_PATTERN_20_PERCENT  212
#define 	FILLFORMAT_PATTERN_70_PERCENT  213
#define 	FILLFORMAT_PATTERN_DARK_DOWNWARD_DIAGONAL  214
#define 	FILLFORMAT_PATTERN_NARROW_VERTICAL  215
#define 	FILLFORMAT_PATTERN_DASHED_HORIZONTAL  216
#define 	FILLFORMAT_PATTERN_DIAGONAL_BRICK  217
#define 	FILLFORMAT_PATTERN_DOTTED_DIAMOND  218
#define 	FILLFORMAT_PATTERN_SMALL_CHECKER_BOARD  219
#define 	FILLFORMAT_PATTERN_25_PERCENT  220
#define 	FILLFORMAT_PATTERN_75_PERCENT  221
#define 	FILLFORMAT_PATTERN_DARK_UPWARD_DIAGONAL  222
#define 	FILLFORMAT_PATTERN_NARROW_HORIZONTAL  223
#define 	FILLFORMAT_PATTERN_DASHED_VERTICAL  224
#define 	FILLFORMAT_PATTERN_HORIZONTAL_BRICK  225
#define 	FILLFORMAT_PATTERN_SHINGLE  226
#define 	FILLFORMAT_PATTERN_LARGE_CHECKER_BOARD  227
#define 	FILLFORMAT_PATTERN_30_PERCENT  228
#define 	FILLFORMAT_PATTERN_80_PERCENT  229
#define 	FILLFORMAT_PATTERN_WIDE_DOWNWARD_DIAGONAL  230
#define 	FILLFORMAT_PATTERN_DARK_VERTICAL  231
#define 	FILLFORMAT_PATTERN_SMALL_CONFETTI  232
#define 	FILLFORMAT_PATTERN_WEAVE  233
#define 	FILLFORMAT_PATTERN_TRELLIS  234
#define 	FILLFORMAT_PATTERN_OUTLINED_DIAMOND  235
#define 	FILLFORMAT_PATTERN_40_PERCENT  236
#define 	FILLFORMAT_PATTERN_90_PERCENT  237
#define 	FILLFORMAT_PATTERN_WIDE_UPWARD_DIAGONAL  238
#define 	FILLFORMAT_PATTERN_DARK_HORIZONTAL  239
#define 	FILLFORMAT_PATTERN_LARGE_CONFETTI  240
#define 	FILLFORMAT_PATTERN_PLAID  241
#define 	FILLFORMAT_PATTERN_SPHERE  242
#define 	FILLFORMAT_PATTERN_SOLID_DIAMOND  243
#define 	FILLFORMAT_GRADIENT_FILL_DEFAULT  0
#define 	FILLFORMAT_GRADIENT_FILL_EARLY_SUNSET  1
#define 	FILLFORMAT_GGRADIENT_FILL_LATE_SUNSET  2
#define 	FILLFORMAT_GRADIENT_FILL_NIGHTFALL  3
#define 	FILLFORMAT_GRADIENT_FILL_DAYBREAK  4
#define 	FILLFORMAT_GRADIENT_FILL_HORIZON  5
#define 	FILLFORMAT_GRADIENT_FILL_DESERT  6
#define 	FILLFORMAT_GRADIENT_FILL_OCEAN  7
#define 	FILLFORMAT_GRADIENT_FILL_CALM_WATER  8
#define 	FILLFORMAT_GRADIENT_FILL_FIRE  9
#define 	FILLFORMAT_GRADIENT_FILL_FOG  10
#define 	FILLFORMAT_GRADIENT_FILL_MOSS  11
#define 	FILLFORMAT_GRADIENT_FILL_PEACOCK  12
#define 	FILLFORMAT_GRADIENT_FILL_WHEAT  13
#define 	FILLFORMAT_GRADIENT_FILL_PARCHMENT  14
#define 	FILLFORMAT_GRADIENT_FILL_MAHOGANY  15
#define 	FILLFORMAT_GRADIENT_FILL_RAINBOW  16
#define 	FILLFORMAT_GRADIENT_FILL_RAINBOW_II  17
#define 	FILLFORMAT_GRADIENT_FILL_GOLD  18
#define 	FILLFORMAT_GRADIENT_FILL_GOLD_II  19
#define 	FILLFORMAT_GRADIENT_FILL_BRASS  20
#define 	FILLFORMAT_GRADIENT_FILL_CHROME  21
#define 	FILLFORMAT_GRADIENT_FILL_CHROME_II  22
#define 	FILLFORMAT_GRADIENT_FILL_SILVER  23
#define 	FILLFORMAT_GRADIENT_FILL_SAPPHIRE  24
#define 	FILLFORMAT_GRADIENT_TYPE_LINEAR  0
#define 	FILLFORMAT_GRADIENT_TYPE_RADIAL  1
#define 	FILLFORMAT_GRADIENT_TYPE_RECTANGULAR  2
#define 	FILLFORMAT_GRADIENT_TYPE_PATH  3
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_45_DEGREES  45
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_DOWN_90_DEGREES  90
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_135_DEGREES  135
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_RIGHT_0_DEGREES  0
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_LEFT_180_DEGREES  180
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_315_DEGREES  315
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_UP_270_DEGREES  270
#define 	FILLFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_225_DEGREES  225
#define 	FILLFORMAT_GRADIENT_DIRECTION_FROM_CORNER_UPPER_LEFT_TO_BOTTOM_RIGHT  0
#define 	FILLFORMAT_GRADIENT_DIRECTION_FROM_CORNER_UPPER_RIGHT_TO_BOTTOM_LEFT  1
#define 	FILLFORMAT_GRADIENT_DIRECTION_FROM_CENTER  2
#define 	FILLFORMAT_GRADIENT_DIRECTION_FROM_CORNER_BOTTOM_LEFT_TO_UPPER_RIGHT  3
#define 	FILLFORMAT_GRADIENT_DIRECTION_FROM_CORNER_BOTTOM_RIGHT_TO_UPPER_LEFT  4
#define 	FILLFORMAT_TEXTURE_PAPYRUS  0
#define 	FILLFORMAT_TEXTURE_CANVAS  1
#define 	FILLFORMAT_TEXTURE_DENIM  2
#define 	FILLFORMAT_TEXTURE_WOVEN_MAT  3
#define 	FILLFORMAT_TEXTURE_WATER_DROPLETS  4
#define 	FILLFORMAT_TEXTURE_PAPER_BAG  5
#define 	FILLFORMAT_TEXTURE_FISH_FOSIL  6
#define 	FILLFORMAT_TEXTURE_SAND  7
#define 	FILLFORMAT_TEXTURE_GREEN_MARBLE  8
#define 	FILLFORMAT_TEXTURE_WHITE_MARBLE  9
#define 	FILLFORMAT_TEXTURE_BROWN_MARBLE  10
#define 	FILLFORMAT_TEXTURE_GRANITE  11
#define 	FILLFORMAT_TEXTURE_NEWSPRINT  12
#define 	FILLFORMAT_TEXTURE_RECYCLED_PAPER  13
#define 	FILLFORMAT_TEXTURE_PARCHMENT  14
#define 	FILLFORMAT_TEXTURE_STATIONERY  15
#define 	FILLFORMAT_TEXTURE_BLUE_TISSUE_PAPER  16
#define 	FILLFORMAT_TEXTURE_PINK_TISSUE_PAPER  17
#define 	FILLFORMAT_TEXTURE_PURPLE_MESH  18
#define 	FILLFORMAT_TEXTURE_BOUQUET  19
#define 	FILLFORMAT_TEXTURE_CORK  20
#define 	FILLFORMAT_TEXTURE_WALNUT  21
#define 	FILLFORMAT_TEXTURE_OAK  22
#define 	FILLFORMAT_TEXTURE_MEDIUM_WOOD  23
#define 	FILLFORMAT_TILING_ALIGNMENT_TOP_LEFT   "tl"
#define 	FILLFORMAT_TILING_ALIGNMENT_TOP   "t"
#define 	FILLFORMAT_TILING_ALIGNMENT_TOP_RIGHT   "tr"
#define 	FILLFORMAT_TILING_ALIGNMENT_LEFT   "l"
#define 	FILLFORMAT_TILING_ALIGNMENT_CENTER   "ctr"
#define 	FILLFORMAT_TILING_ALIGNMENT_RIGHT   "r"
#define 	FILLFORMAT_TILING_ALIGNMENT_BOTTOM_LEFT   "bl"
#define 	FILLFORMAT_TILING_ALIGNMENT_BOTTOM   "b"
#define 	FILLFORMAT_TILING_ALIGNMENT_BOTTOM_RIGHT   "br"
#define 	FILLFORMAT_TILING_MIRROR_TYPE_NONE   "none"
#define 	FILLFORMAT_TILING_MIRROR_TYPE_HORIZONTAL   "x"
#define 	FILLFORMAT_TILING_MIRROR_TYPE_VERTICAL   "y"
#define 	FILLFORMAT_TILING_MIRROR_TYPE_BOTH   "xy"


#define 	FONTFORMAT_UNDERLINE_NONE   "none"
#define 	FONTFORMAT_UNDERLINE_SINGLE_LINE   "sng"
#define 	FONTFORMAT_UNDERLINE_DOUBLE_LINE   "dbl"
#define 	FONTFORMAT_UNDERLINE_HEAVY_LINE   "heavy"
#define 	FONTFORMAT_UNDERLINE_DOTTED_LINE   "dotted"
#define 	FONTFORMAT_UNDERLINE_DOTTED_HEAVY_LINE   "dottedHeavy"
#define 	FONTFORMAT_UNDERLINE_DASH_LINE   "dash"
#define 	FONTFORMAT_UNDERLINE_DASH_HEAVY_LINE   "dashHeavy"
#define 	FONTFORMAT_UNDERLINE_DASH_LONG_LINE   "dashLong"
#define 	FONTFORMAT_UNDERLINE_DASH_LONG_HEAVY_LINE   "dashLongHeavy"
#define 	FONTFORMAT_UNDERLINE_DOT_DASH_LINE   "dotDash"
#define 	FONTFORMAT_UNDERLINE_DOT_DASH_HEAVY_LINE   "dotDashHeavy"
#define 	FONTFORMAT_UNDERLINE_DOT_DOT_DASH_LINE   "dotDotDash"
#define 	FONTFORMAT_UNDERLINE_DOT_DOT_DASH_HEAVY_LINE   "dotDotDashHeavy"
#define 	FONTFORMAT_UNDERLINE_WAVY_LINE   "wavy"
#define 	FONTFORMAT_UNDERLINE_WAVY_HEAVY_LINE   "wavyHeavy"
#define 	FONTFORMAT_UNDERLINE_WAVY_DOUBLE_LINE   "wavyDbl"
#define 	FONTFORMAT_SPACING_TYPE_NORMAL   "normal"
#define 	FONTFORMAT_SPACING_TYPE_EXPANDED   "expanded"
#define 	FONTFORMAT_SPACING_TYPE_CONDENSED   "condensed"


#define 	FONTSETTINGS_UNDERLINE_STYLE_NONE   0
#define 	FONTSETTINGS_UNDERLINE_STYLE_SINGLE   1
#define 	FONTSETTINGS_UNDERLINE_STYLE_DOUBLE   2
#define 	FONTSETTINGS_UNDERLINE_STYLE_SINGLE_ACCOUNTING   33
#define 	FONTSETTINGS_UNDERLINE_STYLE_DOUBLE_ACCOUNTING   34
#define 	FONTSETTINGS_HEADINGS_FONT   "HEADINGS"
#define 	FONTSETTINGS_BODY_FONT   "BODY"
	
	
#define 	FOOTER_POSITION_LEFT   "L"
#define 	FOOTER_POSITION_CENTER   "C"
#define 	FOOTER_POSITION_RIGHT   "R"
	
	
#define 	FORMAT3D_BEVEL_NONE   "none"
#define 	FORMAT3D_BEVEL_CIRCLE   "circle"
#define 	FORMAT3D_BEVEL_RELAXED_INSET   "relaxedInset"
#define 	FORMAT3D_BEVEL_CROSS   "cross"
#define 	FORMAT3D_BEVEL_COOL_SLANT   "coolSlant"
#define 	FORMAT3D_BEVEL_ANGLE   "angle"
#define 	FORMAT3D_BEVEL_SOFT_ROUND   "softRound"
#define 	FORMAT3D_BEVEL_CONVEX   "convex"
#define 	FORMAT3D_BEVEL_SLOPE   "slope"
#define 	FORMAT3D_BEVEL_DIVOT   "divot"
#define 	FORMAT3D_BEVEL_RIBLET   "riblet"
#define 	FORMAT3D_BEVEL_HARD_EDGE   "hardEdge"
#define 	FORMAT3D_BEVEL_ART_DECO   "artDeco"
#define 	FORMAT3D_MATERIAL_NONE   "none"
#define 	FORMAT3D_MATERIAL_MATTE   "matte"
#define 	FORMAT3D_MATERIAL_WARM_MATTE   "warmMatte"
#define 	FORMAT3D_MATERIAL_PLASTIC   "plastic"
#define 	FORMAT3D_MATERIAL_METAL   "metal"
#define 	FORMAT3D_MATERIAL_DARK_EDGE   "dkEdge"
#define 	FORMAT3D_MATERIAL_SOFT_EDGE   "softEdge"
#define 	FORMAT3D_MATERIAL_FLAT   "flat"
#define 	FORMAT3D_MATERIAL_WIREFRAME   "legacyWireframe"
#define 	FORMAT3D_MATERIAL_POWDER   "powder"
#define 	FORMAT3D_MATERIAL_TRANSLUCENT_POWDER   "translucentPowder"
#define 	FORMAT3D_MATERIAL_CLEAR   "clear"
#define 	FORMAT3D_LIGHTING_NONE   "none"
#define 	FORMAT3D_LIGHTING_THREE_POINT   "threePt"
#define 	FORMAT3D_LIGHTING_BALANCE   "balanced"
#define 	FORMAT3D_LIGHTING_SOFT   "soft"
#define 	FORMAT3D_LIGHTING_HARSH   "harsh"
#define 	FORMAT3D_LIGHTING_FLOOD   "flood"
#define 	FORMAT3D_LIGHTING_CONTRASTING   "contrasting"
#define 	FORMAT3D_LIGHTING_MORNING   "morning"
#define 	FORMAT3D_LIGHTING_SUNRISE   "sunrise"
#define 	FORMAT3D_LIGHTING_SUNSET   "sunset"
#define 	FORMAT3D_LIGHTING_CHILLY   "chilly"
#define 	FORMAT3D_LIGHTING_FREEZING   "freezing"
#define 	FORMAT3D_LIGHTING_FLAT   "flat"
#define 	FORMAT3D_LIGHTING_TWO_POINT   "twoPt"
#define 	FORMAT3D_LIGHTING_GLOW   "glow"
#define 	FORMAT3D_LIGHTING_BRIGHT_ROOM   "brightRoom"


#define 	FORMAT_FORMAT_GENERAL   "General"
#define 	FORMAT_FORMAT_INTEGER   "0"
#define 	FORMAT_FORMAT_FLOAT_2DECIMALS   "0.00"
#define 	FORMAT_FORMAT_INTEGER_PERCENT   "0%"
#define 	FORMAT_FORMAT_FLOAT_2DECIMALS_PERCENT   "0.00%"
#define 	FORMAT_FORMAT_DATE   "MM/dd/yyyy"
#define 	FORMAT_FORMAT_DATE_TIME   "MM/dd/yyyy HH:mm:ss"
#define 	FORMAT_FORMAT_CURRENCY   "$0.00"
#define 	FORMAT_FORMAT_AS_HALVES   "# ?/2"
#define 	FORMAT_FORMAT_AS_QUARTERS   "# ?/4"
#define 	FORMAT_FORMAT_AS_TENTHS   "# ?/10"
	
	
#define 	HEADER_POSITION_LEFT   "L"
#define 	HEADER_POSITION_CENTER   "C"
#define 	HEADER_POSITION_RIGHT   "R"
	
	
#define 	HYPERLINKTYPE_NOHYPERLINK   "nohyperlink"
#define 	HYPERLINKTYPE_URL   "url"
#define 	HYPERLINKTYPE_FILE   "file"
#define 	HYPERLINKTYPE_UNC   "unc"
#define 	HYPERLINKTYPE_CELL   "cell"
#define 	HYPERLINKTYPE_UNKNOWN   "unknown"
	

#define 	LINECOLORFORMAT_GRADIENT_LINE_DEFAULT  0
#define 	LINECOLORFORMAT_GRADIENT_LINE_EARLY_SUNSET  1
#define 	LINECOLORFORMAT_GRADIENT_LINE_LATE_SUNSET  2
#define 	LINECOLORFORMAT_GRADIENT_LINE_NIGHTFALL  3
#define 	LINECOLORFORMAT_GRADIENT_LINE_DAYBREAK  4
#define 	LINECOLORFORMAT_GRADIENT_LINE_HORIZON  5
#define 	LINECOLORFORMAT_GRADIENT_LINE_DESERT  6
#define 	LINECOLORFORMAT_GRADIENT_LINE_OCEAN  7
#define 	LINECOLORFORMAT_GRADIENT_LINE_CALM_WATER  8
#define 	LINECOLORFORMAT_GRADIENT_LINE_FIRE  9
#define 	LINECOLORFORMAT_GRADIENT_LINE_FOG  10
#define 	LINECOLORFORMAT_GRADIENT_LINE_MOSS  11
#define 	LINECOLORFORMAT_GRADIENT_LINE_PEACOCK  12
#define 	LINECOLORFORMAT_GRADIENT_LINE_WHEAT  13
#define 	LINECOLORFORMAT_GRADIENT_LINE_PARCHMENT  14
#define 	LINECOLORFORMAT_GRADIENT_LINE_MAHOGANY  15
#define 	LINECOLORFORMAT_GRADIENT_LINE_RAINBOW  16
#define 	LINECOLORFORMAT_GRADIENT_LINE_RAINBOW_II  17
#define 	LINECOLORFORMAT_GRADIENT_LINE_GOLD  18
#define 	LINECOLORFORMAT_GRADIENT_LINE_GOLD_II  19
#define 	LINECOLORFORMAT_GRADIENT_LINE_BRASS  20
#define 	LINECOLORFORMAT_GRADIENT_LINE_CHROME  21
#define 	LINECOLORFORMAT_GRADIENT_LINE_CHROME_II  22
#define 	LINECOLORFORMAT_GRADIENT_LINE_SILVER  23
#define 	LINECOLORFORMAT_GRADIENT_LINE_SAPPHIRE  24
#define 	LINECOLORFORMAT_GRADIENT_TYPE_LINEAR  0
#define 	LINECOLORFORMAT_GRADIENT_TYPE_RADIAL  1
#define 	LINECOLORFORMAT_GRADIENT_TYPE_RECTANGULAR  2
#define 	LINECOLORFORMAT_GRADIENT_TYPE_PATH  3
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_45_DEGREES  45
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_DOWN_90_DEGREES  90
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_135_DEGREES  135
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_RIGHT_0_DEGREES  0
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_LEFT_180_DEGREES  180
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_315_DEGREES  315
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_UP_270_DEGREES  270
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_LINEAR_DIAGONAL_225_DEGREES  225
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_FROM_CORNER_UPPER_LEFT_TO_BOTTOM_RIGHT  1
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_FROM_CORNER_UPPER_RIGHT_TO_BOTTOM_LEFT  2
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_FROM_CENTER  2
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_FROM_CORNER_BOTTOM_LEFT_TO_UPPER_RIGHT  3
#define 	LINECOLORFORMAT_GRADIENT_DIRECTION_FROM_CORNER_BOTTOM_RIGHT_TO_UPPER_LEFT  4


#define 	LINESTYLEFORMAT_COMPOUND_TYPE_NONE   "none"
#define 	LINESTYLEFORMAT_COMPOUND_TYPE_SIMPLE   "sng"
#define 	LINESTYLEFORMAT_COMPOUND_TYPE_DOUBLE   "dbl"
#define 	LINESTYLEFORMAT_COMPOUND_TYPE_THICK_THIN   "thickThin"
#define 	LINESTYLEFORMAT_COMPOUND_TYPE_THIN_THICK   "thinThick"
#define 	LINESTYLEFORMAT_COMPOUND_TYPE_TRIPLE   "tri"
#define 	LINESTYLEFORMAT_DASH_TYPE_SOLID   "solid"
#define 	LINESTYLEFORMAT_DASH_TYPE_ROUND_DOT   "sysDot"
#define 	LINESTYLEFORMAT_DASH_TYPE_SQUARE_DOT   "sysDash"
#define 	LINESTYLEFORMAT_DASH_TYPE_DASH   "dash"
#define 	LINESTYLEFORMAT_DASH_TYPE_DASH_DOT   "dashDot"
#define 	LINESTYLEFORMAT_DASH_TYPE_LONG_DASH   "lgDash"
#define 	LINESTYLEFORMAT_DASH_TYPE_LONG_DASH_DOT   "lgDashDot"
#define 	LINESTYLEFORMAT_DASH_TYPE_LONG_DASH_DOT_DOT   "lgDashDotDot"
#define 	LINESTYLEFORMAT_CAP_TYPE_SQUARE   "sq"
#define 	LINESTYLEFORMAT_CAP_TYPE_ROUND   "rnd"
#define 	LINESTYLEFORMAT_CAP_TYPE_FLAT   "flat"
#define 	LINESTYLEFORMAT_JOIN_TYPE_ROUND   "round"
#define 	LINESTYLEFORMAT_JOIN_TYPE_BEVEL   "bevel"
#define 	LINESTYLEFORMAT_JOIN_TYPE_MITER   "miter"
#define 	LINESTYLEFORMAT_ARROW_TYPE_NONE   "none"
#define 	LINESTYLEFORMAT_ARROW_TYPE_TRIANGLE   "triangle"
#define 	LINESTYLEFORMAT_ARROW_TYPE_OPEN   "arrow"
#define 	LINESTYLEFORMAT_ARROW_TYPE_STEALTH   "stealth"
#define 	LINESTYLEFORMAT_ARROW_TYPE_DIAMOND   "diamond"
#define 	LINESTYLEFORMAT_ARROW_TYPE_OVAL   "oval"

	
#define 	PAGESETUP_ORIENTATION_PORTRAIT   "Portrait"
#define 	PAGESETUP_ORIENTATION_LANDSCAPE   "Landscape"
#define 	PAGESETUP_PAPER_SIZE_CUSTOM   0
#define 	PAGESETUP_PAPER_SIZE_LETTER   1
#define 	PAGESETUP_PAPER_SIZE_LETTER_SMALL   2
#define 	PAGESETUP_PAPER_SIZE_TABLOID   3
#define 	PAGESETUP_PAPER_SIZE_LEDGER   4
#define		PAGESETUP_PAPER_SIZE_LEGAL 5
#define		PAGESETUP_PAPER_SIZE_STATEMENT 6
#define 	PAGESETUP_PAPER_SIZE_EXECUTIVE   7
#define 	PAGESETUP_PAPER_SIZE_A3   8
#define 	PAGESETUP_PAPER_SIZE_A4   9
#define 	PAGESETUP_PAPER_SIZE_A4_SMALL   10
#define 	PAGESETUP_PAPER_SIZE_A5   11
#define 	PAGESETUP_PAPER_SIZE_B4   12
#define 	PAGESETUP_PAPER_SIZE_B5_JIS   13
#define 	PAGESETUP_PAPER_SIZE_FOLIO_PAPER   14
#define 	PAGESETUP_PAPER_SIZE_QUARTO_PAPER   15
#define 	PAGESETUP_PAPER_SIZE_STANDARD_PAPER_10_BY_14   16
#define 	PAGESETUP_PAPER_SIZE_STANDARD_PAPER_11_BY_17   17
#define 	PAGESETUP_PAPER_SIZE_NOTE_PAPER   18
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_9   19
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_10   20
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_11   21
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_12   22
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_14   23
#define 	PAGESETUP_PAPER_SIZE_C_PAPER   24
#define 	PAGESETUP_PAPER_SIZE_D_PAPER   25
#define 	PAGESETUP_PAPER_SIZE_E_PAPER   26
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_DL   27
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_C5   28
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_C3   29
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_C4   30
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_C6   31
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_C65   32
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_B4   33
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_B5   34
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_B6   35
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_ITALY   36
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_MONARCH   37
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_6_3PER4   38
#define 	PAGESETUP_PAPER_SIZE_US_STANDARD_FANFOLD   39
#define 	PAGESETUP_PAPER_SIZE_GERMAN_STANDARD_FANFOLD   40
#define 	PAGESETUP_PAPER_SIZE_GERMAN_LEGAL_FANFOLD   41
#define 	PAGESETUP_PAPER_SIZE_B4_ISO   42
#define 	PAGESETUP_PAPER_SIZE_JAPANESE_DOUBLE_POSTCARD   43
#define 	PAGESETUP_PAPER_SIZE_STANDARD_PAPER_9_BY_11   44
#define 	PAGESETUP_PAPER_SIZE_STANDARD_PAPER_10_BY_11   45
#define 	PAGESETUP_PAPER_SIZE_STANDARD_PAPER_15_BY_11   46
#define 	PAGESETUP_PAPER_SIZE_ENVELOPE_INVITE   47
#define 	PAGESETUP_PAPER_SIZE_LETTER_EXTRA_PAPER   50
#define 	PAGESETUP_PAPER_SIZE_LEGAL_EXTRA_PAPER   51
#define 	PAGESETUP_PAPER_SIZE_TABLOID_EXTRA_PAPER   52
#define 	PAGESETUP_PAPER_SIZE_A4_EXTRA_PAPER   53
#define 	PAGESETUP_PAPER_SIZE_LETTER_TRANSVERSE_PAPER   54
#define 	PAGESETUP_PAPER_SIZE_A4_TRANSVERSE_PAPER   55
#define 	PAGESETUP_PAPER_SIZE_LETTER_EXTRA_TRANSVERSE_PAPER   56
#define 	PAGESETUP_PAPER_SIZE_SUPER_A_PER_SUPER_A_PER_A4   57
#define 	PAGESETUP_PAPER_SIZE_SUPER_B_PER_SUPER_B_PER_A3   58
#define 	PAGESETUP_PAPER_SIZE_LETTER_PLUS_PAPER   59
#define 	PAGESETUP_PAPER_SIZE_A4_PLUS_PAPER   60
#define 	PAGESETUP_PAPER_SIZE_A5_TRANSVERSE_PAPER   61
#define 	PAGESETUP_PAPER_SIZE_B5_JIS_TRANSVERSE_PAPER   62
#define 	PAGESETUP_PAPER_SIZE_A3_EXTRA_PAPER   63
#define 	PAGESETUP_PAPER_SIZE_A5_EXTRA_PAPER   64
#define 	PAGESETUP_PAPER_SIZE_B5_EXTRA_PAPER_ISO   65
#define 	PAGESETUP_PAPER_SIZE_A2_PAPER   66
#define 	PAGESETUP_PAPER_SIZE_A3_TRANSVERSE_PAPER   67
#define 	PAGESETUP_PAPER_SIZE_A3_EXTRA_TRANSVERSE_PAPER   68
#define 	PAGESETUP_PAPER_SIZE_A6   70
#define 	PAGESETUP_PAPER_SIZE_B5_ISO   119
#define 	PAGESETUP_PAPER_SIZE_DOUBLE_POST_CARD   120
#define 	PAGESETUP_PAPER_SIZE_POST_CARD   121
#define 	PAGESETUP_PAPER_SIZE_16K   123
#define 	PAGESETUP_COMMENTS_NONE   0
#define 	PAGESETUP_COMMENTS_AT_END_OF_SHEET   1
#define 	PAGESETUP_COMMENTS_AS_DISPLAYED_ON_SHEET   2
#define 	PAGESETUP_PAGE_ORDER_DOWN_THEN_OVER   0
#define 	PAGESETUP_PAGE_ORDER_OVER_THEN_DOWN   1


#define 	PATTERN_PATTERN_NONE  0 
#define 	PATTERN_PATTERN_SOLID  1 
#define 	PATTERN_PATTERN_50PERCENT_GRAY  2 
#define 	PATTERN_PATTERN_75PERCENT_GRAY  3 
#define 	PATTERN_PATTERN_25PERCENT_GRAY  4 
#define 	PATTERN_PATTERN_HORIZONTAL_STRIPE  5 
#define 	PATTERN_PATTERN_VERTICAL_STRIPE  6 
#define 	PATTERN_PATTERN_REVERSE_DIAGONAL_STRIPE  7 
#define 	PATTERN_PATTERN_DIAGONAL_STRIPE  8 
#define 	PATTERN_PATTERN_DIAGONAL_CROSSHATCH  9 
#define 	PATTERN_PATTERN_THICK_DIAGONAL_CROSSHATCH  10 
#define 	PATTERN_PATTERN_THIN_HORIZONTAL_STRIPE  11 
#define 	PATTERN_PATTERN_THIN_VERTICAL_STRIPE  12 
#define 	PATTERN_PATTERN_THIN_REVERSE_DIAGONAL_STRIPE  13 
#define 	PATTERN_PATTERN_THIN_DIAGONAL_STRIPE  14 
#define 	PATTERN_PATTERN_THIN_HORIZONTAL_CROSSHATCH  15 
#define 	PATTERN_PATTERN_THIN_DIAGONAL_CROSSHATCH  16 
#define 	PATTERN_PATTERN_12PERCENT_GRAY  17 
#define 	PATTERN_PATTERN_6PERCENT_GRAY  18

#define		PIVOTTABLE_AREA_NONE 0
#define		PIVOTTABLE_AREA_ROW_LABELS 1
#define		PIVOTTABLE_AREA_COLUMN_LABELS 2
#define		PIVOTTABLE_AREA_REPORT_FILTER 4
#define		PIVOTTABLE_SORT_A_TO_Z 0
#define		PIVOTTABLE_SORT_IN_DATA_SOURCE_ORDER 1
#define		PIVOTTABLE_SORT_Z_TO_A 2
#define		PIVOTTABLE_PIVOT_STYLE_NONE "None"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_1 "PivotStyleLight1"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_2 "PivotStyleLight2"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_3 "PivotStyleLight3"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_4 "PivotStyleLight4"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_5 "PivotStyleLight5"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_6 "PivotStyleLight6"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_7 "PivotStyleLight7"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_8 "PivotStyleLight8"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_9 "PivotStyleLight9"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_10 "PivotStyleLight10"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_11 "PivotStyleLight11"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_12 "PivotStyleLight12"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_13 "PivotStyleLight13"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_14 "PivotStyleLight14"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_15 "PivotStyleLight15"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_16 "PivotStyleLight16"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_17 "PivotStyleLight17"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_18 "PivotStyleLight18"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_19 "PivotStyleLight19"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_20 "PivotStyleLight20"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_21 "PivotStyleLight21"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_22 "PivotStyleLight22"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_23 "PivotStyleLight23"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_24 "PivotStyleLight24"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_25 "PivotStyleLight25"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_26 "PivotStyleLight26"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_27 "PivotStyleLight27"
#define		PIVOTTABLE_PIVOT_STYLE_LIGHT_28 "PivotStyleLight28"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_1 "PivotStyleMedium1"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_2 "PivotStyleMedium2"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_3 "PivotStyleMedium3"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_4 "PivotStyleMedium4"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_5 "PivotStyleMedium5"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_6 "PivotStyleMedium6"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_7 "PivotStyleMedium7"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_8 "PivotStyleMedium8"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_9 "PivotStyleMedium9"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_10 "PivotStyleMedium10"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_11 "PivotStyleMedium11"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_12 "PivotStyleMedium12"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_13 "PivotStyleMedium13"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_14 "PivotStyleMedium14"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_15 "PivotStyleMedium15"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_16 "PivotStyleMedium16"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_17 "PivotStyleMedium17"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_18 "PivotStyleMedium18"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_19 "PivotStyleMedium19"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_20 "PivotStyleMedium20"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_21 "PivotStyleMedium21"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_22 "PivotStyleMedium22"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_23 "PivotStyleMedium23"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_24 "PivotStyleMedium24"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_25 "PivotStyleMedium25"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_26 "PivotStyleMedium26"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_27 "PivotStyleMedium27"
#define		PIVOTTABLE_PIVOT_STYLE_MEDIUM_28 "PivotStyleMedium28"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_1 "PivotStyleDark1"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_2 "PivotStyleDark2"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_3 "PivotStyleDark3"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_4 "PivotStyleDark4"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_5 "PivotStyleDark5"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_6 "PivotStyleDark6"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_7 "PivotStyleDark7"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_8 "PivotStyleDark8"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_9 "PivotStyleDark9"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_10 "PivotStyleDark10"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_11 "PivotStyleDark11"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_12 "PivotStyleDark12"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_13 "PivotStyleDark13"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_14 "PivotStyleDark14"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_15 "PivotStyleDark15"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_16 "PivotStyleDark16"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_17 "PivotStyleDark17"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_18 "PivotStyleDark18"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_19 "PivotStyleDark19"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_20 "PivotStyleDark20"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_21 "PivotStyleDark21"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_22 "PivotStyleDark22"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_23 "PivotStyleDark23"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_24 "PivotStyleDark24"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_25 "PivotStyleDark25"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_26 "PivotStyleDark26"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_27 "PivotStyleDark27"
#define		PIVOTTABLE_PIVOT_STYLE_DARK_28 "PivotStyleDark28"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_1 "Report1"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_2 "Report2"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_3 "Report3"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_4 "Report4"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_5 "Report5"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_6 "Report6"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_7 "Report7"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_8 "Report8"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_9 "Report9"
#define		PIVOTTABLE_AUTOFORMAT_REPORT_10 "Report10"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_1 "Table1"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_2 "Table2"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_3 "Table3"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_4 "Table4"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_5 "Table5"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_6 "Table6"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_7 "Table7"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_8 "Table8"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_9 "Table9"
#define		PIVOTTABLE_AUTOFORMAT_TABLE_10 "Table10"
#define		PIVOTTABLE_AUTOFORMAT_PIVOTTABLE_CLASIC "PivotTableClasic"
#define		PIVOTTABLE_AUTOFORMAT_NONE "None"
#define		PIVOTTABLE_SUM_VALUES_FIELD "#SUM_VALUES#"
#define		PIVOTTABLE_SUBTOTAL_NONE 0
#define		PIVOTTABLE_SUBTOTAL_AUTOMATIC 1
#define		PIVOTTABLE_SUBTOTAL_SUM 2
#define		PIVOTTABLE_SUBTOTAL_COUNTA 3
#define		PIVOTTABLE_SUBTOTAL_AVERAGE 4
#define		PIVOTTABLE_SUBTOTAL_MAX 5
#define		PIVOTTABLE_SUBTOTAL_MIN 6
#define		PIVOTTABLE_SUBTOTAL_PRODUCT 7
#define		PIVOTTABLE_SUBTOTAL_COUNT 8
#define		PIVOTTABLE_SUBTOTAL_STDEV 9
#define		PIVOTTABLE_SUBTOTAL_STDEVP 10
#define		PIVOTTABLE_SUBTOTAL_VAR 11
#define		PIVOTTABLE_SUBTOTAL_VARP 12


#define 	SHADOWFORMAT_TYPE_NO_SHADOW  0
#define 	SHADOWFORMAT_TYPE_OUTER  1
#define 	SHADOWFORMAT_TYPE_INNER  2
#define 	SHADOWFORMAT_TYPE_PERSPECTIVE  3
#define 	SHADOWFORMAT_NO_SHADOW  0
#define 	SHADOWFORMAT_OFFSET_DIAGONAL_BOTTOM_RIGHT  1
#define 	SHADOWFORMAT_OFFSET_BOTTOM  2
#define 	SHADOWFORMAT_OFFSET_DIAGONAL_BOTTOM_LEFT  3
#define 	SHADOWFORMAT_OFFSET_RIGHT  4
#define 	SHADOWFORMAT_OFFSET_CENTER  5
#define 	SHADOWFORMAT_OFFSET_LEFT  6
#define 	SHADOWFORMAT_OFFSET_DIAGONAL_TOP_RIGHT  7
#define 	SHADOWFORMAT_OFFSET_TOP  8
#define 	SHADOWFORMAT_OFFSET_DIAGONAL_TOP_LEFT  9
#define 	SHADOWFORMAT_INSIDE_DIAGONAL_TOP_LEFT  10
#define 	SHADOWFORMAT_INSIDE_TOP = 11
#define 	SHADOWFORMAT_INSIDE_DIAGONAL_TOP_RIGHT  12
#define 	SHADOWFORMAT_INSIDE_LEFT  13
#define 	SHADOWFORMAT_INSIDE_CENTER  14
#define 	SHADOWFORMAT_INSIDE_RIGHT  15
#define 	SHADOWFORMAT_INSIDE_DIAGONAL_BOTTOM_LEFT  16
#define 	SHADOWFORMAT_INSIDE_BOTTOM  17
#define 	SHADOWFORMAT_INSIDE_DIAGONAL_BOTTOM_RIGHT  18
#define 	SHADOWFORMAT_PERSPECTIVE_DIAGONAL_UPPER_LEFT  19
#define 	SHADOWFORMAT_PERSPECTIVE_DIAGONAL_UPPER_RIGHT = 20
#define 	SHADOWFORMAT_PERSPECTIVE_BELOW  21
#define 	SHADOWFORMAT_PERSPECTIVE_DIAGONAL_LOWER_LEFT  22
#define 	SHADOWFORMAT_PERSPECTIVE_DIAGONAL_LOWER_RIGHT  23
#define 	SHADOWFORMAT_ALIGNMENT_TOP_LEFT   "tl"
#define 	SHADOWFORMAT_ALIGNMENT_TOP   "t"
#define 	SHADOWFORMAT_ALIGNMENT_TOP_RIGHT   "tr"
#define 	SHADOWFORMAT_ALIGNMENT_LEFT   "l"
#define 	SHADOWFORMAT_ALIGNMENT_CENTER   "ctr"
#define 	SHADOWFORMAT_ALIGNMENT_RIGHT   "r"
#define 	SHADOWFORMAT_ALIGNMENT_BOTTOM_LEFT   "bl"
#define 	SHADOWFORMAT_ALIGNMENT_BOTTOM   "b"
#define 	SHADOWFORMAT_ALIGNMENT_BOTTOM_RIGHT   "br"


#define 	AUTOFORMAT_NONE  0
#define 	AUTOFORMAT_SIMPLE  1 
#define 	AUTOFORMAT_SIMPLE_SUBTOTAL  2 
#define 	AUTOFORMAT_CLASSIC1  3
#define 	AUTOFORMAT_CLASSIC1_SUBTOTAL  4
#define 	AUTOFORMAT_CLASSIC1_RIGHT_TOTAL  5 
#define 	AUTOFORMAT_CLASSIC1_TOTALS  6 
#define 	AUTOFORMAT_CLASSIC2  7 
#define 	AUTOFORMAT_CLASSIC2_SUBTOTAL  8 
#define 	AUTOFORMAT_CLASSIC3  9 
#define 	AUTOFORMAT_CLASSIC3_SUBTOTAL  10
#define 	AUTOFORMAT_ACCOUNTING1  11 
#define 	AUTOFORMAT_ACCOUNTING1_SUBTOTAL  12 
#define 	AUTOFORMAT_ACCOUNTING1_RIGHT_TOTAL  13 
#define 	AUTOFORMAT_ACCOUNTING1_TOTALS  14 
#define 	AUTOFORMAT_ACCOUNTING2  15 
#define 	AUTOFORMAT_ACCOUNTING2_SUBTOTAL  16 
#define 	AUTOFORMAT_ACCOUNTING3  17 
#define 	AUTOFORMAT_ACCOUNTING3_SUBTOTAL  18
#define 	AUTOFORMAT_ACCOUNTING4  19
#define 	AUTOFORMAT_ACCOUNTING4_SUBTOTAL  20 
#define 	AUTOFORMAT_COLORFUL1  21 
#define 	AUTOFORMAT_COLORFUL1_SUBTOTAL  22 
#define 	AUTOFORMAT_COLORFUL2  23 
#define 	AUTOFORMAT_COLORFUL2_SUBTOTAL  24 
#define 	AUTOFORMAT_COLORFUL2_RIGHT_TOTAL  25 
#define 	AUTOFORMAT_COLORFUL2_TOTALS  26 
#define 	AUTOFORMAT_COLORFUL3  27
#define 	AUTOFORMAT_COLORFUL3_SUBTOTAL  28 
#define 	AUTOFORMAT_COLORFUL3_RIGHT_TOTAL  29 
#define 	AUTOFORMAT_COLORFUL3_TOTALS  30 
#define 	AUTOFORMAT_LIST1  31 
#define 	AUTOFORMAT_LIST1_SUBTOTAL  32 
#define 	AUTOFORMAT_LIST2  33 
#define 	AUTOFORMAT_LIST2_SUBTOTAL  34
#define 	AUTOFORMAT_LIST3  35 
#define 	AUTOFORMAT_LIST3_SUBTOTAL  36 
#define 	AUTOFORMAT_3D_EFFECTS1  37 
#define 	AUTOFORMAT_3D_EFFECTS1_SUBTOTAL  38 
#define 	AUTOFORMAT_3D_EFFECTS1_RIGHT_TOTAL  39 
#define 	AUTOFORMAT_3D_EFFECTS1_TOTALS  40 
#define 	AUTOFORMAT_3D_EFFECTS2  41
#define 	AUTOFORMAT_3D_EFFECTS2_SUBTOTAL  42 
#define 	AUTOFORMAT_EASYXLS1  43 
#define 	AUTOFORMAT_EASYXLS1_SUBTOTAL  44 
#define 	AUTOFORMAT_EASYXLS2  45 
#define 	AUTOFORMAT_EASYXLS2_SUBTOTAL  46 
#define 	AUTOFORMAT_EASYXLS3  47 
#define 	AUTOFORMAT_EASYXLS3_SUBTOTAL  48 


#define 	TABLE_MAX_ROWS_OFFICE_97_2003  0x10000 
#define 	TABLE_MAX_COLUMNS_OFFICE_97_2003  0x100 
#define 	TABLE_MAX_ROWS  0x100000 
#define 	TABLE_MAX_COLUMNS  0x4000
#define 	TABLE_LOOK_IN_FORMULAS  0
#define 	TABLE_LOOK_IN_VALUES  1
#define 	TABLE_LOOK_IN_COMMENTS  2


#define		ENCRYPT_ENCRYPTION_NONE 0
#define		ENCRYPT_ENCRYPTION_WEAK_XOR 1
#define		ENCRYPT_ENCRYPTION_OFFICE_97_2000_COMPATIBLE 2


#define		THEME_THEME_OFFICE   "Office Theme"
#define		THEME_THEME_APEX   "Apex"
#define		THEME_THEME_ASPECT   "Aspect"
#define		THEME_THEME_CIVIC   "Civic"
#define		THEME_THEME_CONCOURSE   "Concourse"
#define		THEME_THEME_EQUITY   "Equity"
#define		THEME_THEME_FLOW   "Flow"
#define		THEME_THEME_FOUNDRY   "Foundry"
#define		THEME_THEME_MEDIAN   "Median"
#define		THEME_THEME_METRO   "Metro"
#define		THEME_THEME_MODULE   "Module"
#define		THEME_THEME_OPULENT   "Opulent"
#define		THEME_THEME_ORIEL   "Oriel"
#define		THEME_THEME_ORIGIN   "Origin"
#define		THEME_THEME_PAPER   "Paper"
#define		THEME_THEME_SOLSTICE   "Solstice"
#define		THEME_THEME_TECHNIC   "Technic"
#define		THEME_THEME_TREK   "Trek"
#define		THEME_THEME_URBAN   "Urban"
#define		THEME_THEME_VERVE   "Verve"
#define		THEME_THEME_COLORS_OFFICE   "Office"
#define		THEME_THEME_COLORS_GRAYSCALE   "Grayscale"
#define		THEME_THEME_COLORS_APEX   "Apex"
#define		THEME_THEME_COLORS_ASPECT   "Aspect"
#define		THEME_THEME_COLORS_CIVIC   "Civic"
#define		THEME_THEME_COLORS_CONCOURSE   "Concourse"
#define		THEME_THEME_COLORS_EQUITY   "Equity"
#define		THEME_THEME_COLORS_FLOW   "Flow"
#define		THEME_THEME_COLORS_FOUNDRY   "Foundry"
#define		THEME_THEME_COLORS_MEDIAN   "Median"
#define		THEME_THEME_COLORS_METRO   "Metro"
#define		THEME_THEME_COLORS_MODULE   "Module"
#define		THEME_THEME_COLORS_OPULENT   "Opulent"
#define		THEME_THEME_COLORS_ORIEL   "Oriel"
#define		THEME_THEME_COLORS_ORIGIN   "Origin"
#define		THEME_THEME_COLORS_PAPER   "Paper"
#define		THEME_THEME_COLORS_SOLSTICE   "Solstice"
#define		THEME_THEME_COLORS_TECHNIC   "Technic"
#define		THEME_THEME_COLORS_TREK   "Trek"
#define		THEME_THEME_COLORS_URBAN   "Urban"
#define		THEME_THEME_COLORS_VERVE   "Verve"
#define		THEME_THEME_FONTS_OFFICE   "Office"
#define		THEME_THEME_FONTS_OFFICE2   "Office 2"
#define		THEME_THEME_FONTS_OFFICE_CLASSIC   "Office Classic"
#define		THEME_THEME_FONTS_OFFICE_CLASSIC2   "Office Classic 2"
#define		THEME_THEME_FONTS_APEX   "Apex"
#define		THEME_THEME_FONTS_ASPECT   "Aspect"
#define		THEME_THEME_FONTS_CIVIC   "Civic"
#define		THEME_THEME_FONTS_CONCOURSE   "Concourse"
#define		THEME_THEME_FONTS_EQUITY   "Equity"
#define		THEME_THEME_FONTS_FLOW   "Flow"
#define		THEME_THEME_FONTS_FOUNDRY   "Foundry"
#define		THEME_THEME_FONTS_MEDIAN   "Median"
#define		THEME_THEME_FONTS_METRO   "Metro"
#define		THEME_THEME_FONTS_MODULE   "Module"
#define		THEME_THEME_FONTS_OPULENT   "Opulent"
#define		THEME_THEME_FONTS_ORIEL   "Oriel"
#define		THEME_THEME_FONTS_ORIGIN   "Origin"
#define		THEME_THEME_FONTS_PAPER   "Paper"
#define		THEME_THEME_FONTS_SOLSTICE   "Solstice"
#define		THEME_THEME_FONTS_TECHNIC   "Technic"
#define		THEME_THEME_FONTS_TREK   "Trek"
#define		THEME_THEME_FONTS_URBAN   "Urban"
#define		THEME_THEME_FONTS_VERVE   "Verve"
#define		THEME_THEME_EFFECTS_OFFICE   "Office"
#define		THEME_THEME_EFFECTS_APEX   "Apex"
#define		THEME_THEME_EFFECTS_ASPECT   "Aspect"
#define		THEME_THEME_EFFECTS_CIVIC   "Civic"
#define		THEME_THEME_EFFECTS_CONCOURSE   "Concourse"
#define		THEME_THEME_EFFECTS_EQUITY   "Equity"
#define		THEME_THEME_EFFECTS_FLOW   "Flow"
#define		THEME_THEME_EFFECTS_FOUNDRY   "Foundry"
#define		THEME_THEME_EFFECTS_MEDIAN   "Median"
#define		THEME_THEME_EFFECTS_METRO   "Metro"
#define		THEME_THEME_EFFECTS_MODULE   "Module"
#define		THEME_THEME_EFFECTS_OPULENT   "Opulent"
#define		THEME_THEME_EFFECTS_ORIEL   "Oriel"
#define		THEME_THEME_EFFECTS_ORIGIN   "Origin"
#define		THEME_THEME_EFFECTS_PAPER   "Paper"
#define		THEME_THEME_EFFECTS_SOLSTICE   "Solstice"
#define		THEME_THEME_EFFECTS_TECHNIC   "Technic"
#define		THEME_THEME_EFFECTS_TREK   "Trek"
#define		THEME_THEME_EFFECTS_URBAN   "Urban"
#define		THEME_THEME_EFFECTS_VERVE   "Verve"


namespace EasyXLS {

//
// Forward references and typedefs
//

struct __declspec(uuid("8a79d5c6-76a5-3ac0-a38e-50d351b1ae87"))
/* LIBID */ __EasyXLS;
struct __declspec(uuid("ad1047c6-0073-4196-94c8-9699e9e0794e"))
/* dual interface */ IExcelValueField;
struct /* coclass */ ExcelValueField;
struct __declspec(uuid("18345295-43b3-47bb-877d-eebaa4cca101"))
/* dual interface */ IExcelPivotTable;
struct /* coclass */ ExcelPivotTable;
struct __declspec(uuid("398a8898-d975-442f-a291-a801fb2259f0"))
/* dual interface */ IExcelField;
struct /* coclass */ ExcelField;
struct __declspec(uuid("84b24933-7f43-4c32-a790-4b8b47ce79ef"))
/* dual interface */ IExcelPivotChart;
struct /* coclass */ ExcelPivotChart;
struct /* coclass */ ExcelChart;
struct /* coclass */ List;
struct __declspec(uuid("41b916ab-96a8-3342-9cfc-a1b721ba2e44"))
/* dual interface */ IList;
struct /* coclass */ ExcelColumn;
struct __declspec(uuid("1b67a21a-0713-48b2-97de-c4be987c3519"))
/* dual interface */ IFormulaResult;
struct /* coclass */ FormulaResult;
struct __declspec(uuid("daa814a0-b8de-4c89-a61c-ebe9c9630e50"))
/* dual interface */ ICell;
struct /* coclass */ Cell;
struct __declspec(uuid("08f7b5b8-685b-453a-9116-3b85c72bd252"))
/* dual interface */ IExcelEffectScheme;
struct /* coclass */ ExcelEffectScheme;
struct __declspec(uuid("df1be00a-b6aa-4eb6-be01-be5038946744"))
/* dual interface */ IThemeColor;
struct /* coclass */ ThemeColor;
struct __declspec(uuid("7e31de7e-557a-4e6b-8773-ad928f893fdd"))
/* dual interface */ IExcelTheme;
struct /* coclass */ ExcelTheme;
struct __declspec(uuid("692ae230-599b-4c18-abe7-ab85c6d7b11c"))
/* dual interface */ IExcelFontScheme;
struct __declspec(uuid("2c0c8a44-5cca-4802-b473-7f707796462b"))
/* dual interface */ IExcelColorScheme;
struct /* coclass */ ExcelColorScheme;
struct /* coclass */ ExcelFontScheme;
struct __declspec(uuid("c9552104-64f0-4356-8355-f3bb74c5a141"))
/* dual interface */ IDocumentSummaryInformation;
struct /* coclass */ DocumentSummaryInformation;
struct __declspec(uuid("5884c7ad-134a-4053-8a5c-fe3e1cb48d20"))
/* dual interface */ ISummaryInformation;
struct /* coclass */ SummaryInformation;
struct __declspec(uuid("f1953b65-6c99-3021-8eec-b6a2593ddc86"))
/* dual interface */ IExcelName;
struct __declspec(uuid("fefa4675-b292-364a-b3e1-20cc8c52d55a"))
/* dual interface */ IExcelConditionalFormatting;
struct __declspec(uuid("8af14c2c-4905-44ff-b91e-24e5544d4a16"))
/* dual interface */ IExcelAutoFormat;
struct /* coclass */ ExcelAutoFormat;
struct __declspec(uuid("f03e47f0-b98a-3785-a754-bf8f75e60b68"))
/* dual interface */ IExcelColumn;
struct __declspec(uuid("d81631d8-6dc3-3c71-998a-ab7bc7a93d84"))
/* dual interface */ IExcelRow;
struct __declspec(uuid("fbd626e2-ff12-380c-b752-4459e21583ca"))
/* dual interface */ IExcelTable;
struct /* coclass */ ExcelTable;
struct /* coclass */ ExcelName;
struct __declspec(uuid("499356d9-c10c-4e51-8945-bc1b35afcf4b"))
/* dual interface */ IExcelWorksheet;
struct __declspec(uuid("a2aeae95-99c9-405f-8609-4f121b191d00"))
/* dual interface */ IExcelOptions;
struct __declspec(uuid("a1840315-0e85-3433-a1a7-094abcb182e8"))
/* dual interface */ IExcelChartSheet;
struct __declspec(uuid("de89e0c2-59df-3e2d-9315-9d03a1d6750c"))
/* dual interface */ IExcelStyle;
struct /* coclass */ ExcelStyle;
struct __declspec(uuid("88be717f-ed7c-3d27-92bb-ccf8cee02d74"))
/* dual interface */ IExcelFooter;
struct /* coclass */ ExcelFooter;
struct __declspec(uuid("c1a88436-bf12-3fed-9333-9bdf4bd8410c"))
/* dual interface */ IExcelDocument;
struct /* coclass */ ExcelDocument;
struct __declspec(uuid("2f6b4b03-3a0e-38ae-bc63-c2f84303868c"))
/* dual interface */ IExcelCondition;
struct /* coclass */ ExcelCondition;
struct __declspec(uuid("81fd1c59-fc05-40e5-abc8-6309e8785837"))
/* dual interface */ IExcelArrayFormula;
struct /* coclass */ ExcelArrayFormula;
struct __declspec(uuid("98c1308c-62a1-3f93-8add-a54c1da6c409"))
/* dual interface */ IUnknownSheet;
struct __declspec(uuid("6e7c7ff4-fb96-3c96-abbf-0deaff4f22dc"))
/* dual interface */ IFormula;
struct /* coclass */ Formula;
struct /* coclass */ ExcelConditionalFormatting;
struct __declspec(uuid("b8981ef8-3d8e-3ca9-8ba3-0ac2a985b21e"))
/* dual interface */ IExcelSheet;
struct __declspec(uuid("7e535428-0376-3633-a302-7b574f8f6330"))
/* dual interface */ IExcelHeader;
struct __declspec(uuid("068a8ca0-60c1-48b2-9294-3d3e426d8887"))
/* dual interface */ IExternalLinks;
struct /* coclass */ ExternalLinks;
struct __declspec(uuid("50e99b26-77fa-4e22-95d5-64f11f1d8e57"))
/* dual interface */ IExcelDataGroup;
struct /* coclass */ ExcelDataGroup;
struct /* coclass */ ExcelRow;
struct /* coclass */ ExcelHeader;
struct /* coclass */ ExcelSheet;
struct __declspec(uuid("7083da59-ec51-3966-8b76-026adfc73aee"))
/* dual interface */ IExcelDataValidator;
struct /* coclass */ ExcelDataValidator;
struct __declspec(uuid("1b1c448d-6ee6-33ce-8f74-4c19d2ec9c75"))
/* dual interface */ IExcelPageSetup;
struct /* coclass */ ExcelPageSetup;
struct __declspec(uuid("94630ead-0167-4230-bc5e-9edeff8a8e62"))
/* dual interface */ IExcelFilter;
struct __declspec(uuid("5253ae6d-0cfc-3df7-ae24-0852a52c1817"))
/* dual interface */ IExcelHyperlink;
struct /* coclass */ ExcelHyperlink;
struct __declspec(uuid("6a882a73-420f-3aa8-ab02-dd9b47269125"))
/* dual interface */ IExcelCell;
struct /* coclass */ ExcelFilter;
struct /* coclass */ ExcelCell;
struct /* coclass */ UnknownSheet;
struct /* coclass */ ExcelWorksheet;
struct /* coclass */ ExcelOptions;
struct /* coclass */ ExcelChartSheet;
struct __declspec(uuid("b6972636-0b4a-437b-98d4-0d99754fb552"))
/* dual interface */ IExcelChart;
struct /* coclass */ DrawingObject2D;
struct __declspec(uuid("19690ea0-b0ca-4fd8-b781-eb8fb15d1146"))
/* dual interface */ IExcelDataLabels;
struct __declspec(uuid("0aa20e06-ae78-39b9-8547-5f5597ebe931"))
/* dual interface */ IExcelPlotArea;
struct __declspec(uuid("28167d30-0a76-4d20-b3e3-2a5124e6aaff"))
/* dual interface */ IExcelTitle;
struct __declspec(uuid("5ba017d4-9b3a-3d39-b3a1-843dbd18dba7"))
/* dual interface */ IExcelDataTable;
struct __declspec(uuid("718fb25f-dfac-3494-ae9c-e047e1988a57"))
/* dual interface */ IExcelChartLegend;
struct /* coclass */ ExcelChartLegend;
struct /* coclass */ FontDrawingObject;
struct /* coclass */ ExcelDataLabels;
struct /* coclass */ AlignDrawingObject;
struct __declspec(uuid("f57b6fac-637d-36a1-8513-a492d17a14fd"))
/* dual interface */ IExcelSeries;
struct __declspec(uuid("e916225b-a410-361e-bcf9-09eca6e6eb5b"))
/* dual interface */ IExcelChartArea;
struct __declspec(uuid("db83c9f8-e455-3505-bf80-4079f30f97ab"))
/* dual interface */ IExcelAxis;
struct /* coclass */ ExcelTitle;
struct /* coclass */ ExcelAxis;
struct /* coclass */ ExcelDataTable;
struct /* coclass */ ExcelSeries;
struct /* coclass */ EffectDrawingObject;
struct /* coclass */ ExcelPlotArea;
struct __declspec(uuid("9dc24cbd-599a-3cf1-999d-59a9fbfdefac"))
/* dual interface */ IExcelChartGridlines;
struct /* coclass */ ExcelChartGridlines;
struct /* coclass */ LineDrawingObject;
struct /* coclass */ ExcelChartArea;
struct __declspec(uuid("60e73b4b-2ddd-4dbc-a56a-ac818cf7c28d"))
/* dual interface */ IFormat3D;
struct __declspec(uuid("ee2fc913-bcf1-431a-b19b-ffb509a0bf48"))
/* dual interface */ IAlignmentFormat;
struct __declspec(uuid("ecfd0a43-712e-4a23-ae64-fd7bd42dc9da"))
/* dual interface */ IFontFormat;
struct /* coclass */ FontFormat;
struct __declspec(uuid("6fc734c1-fca2-4059-ab4b-d98472a2879d"))
/* dual interface */ IShadowFormat;
struct /* coclass */ ShadowFormat;
struct __declspec(uuid("57795188-f711-40d1-aa69-f33f775eb653"))
/* dual interface */ IGradientStop;
struct /* coclass */ GradientStop;
struct __declspec(uuid("fbee48c6-a6b3-4f26-a4bd-7d635707ad37"))
/* dual interface */ ILineStyleFormat;
struct /* coclass */ LineStyleFormat;
struct __declspec(uuid("ed2dc7c7-f6cf-435d-9871-ac7c151c2a26"))
/* dual interface */ ILineColorFormat;
struct /* coclass */ AlignmentFormat;
struct __declspec(uuid("41e2e077-0a18-4edc-963d-67b4b830f001"))
/* dual interface */ IFillFormat;
struct /* coclass */ FillFormat;
struct /* coclass */ Format3D;
struct /* coclass */ LineColorFormat;
struct __declspec(uuid("2e7a7199-04a8-424a-8b23-82e2232c8046"))
/* dual interface */ IDrawingObject;
struct /* coclass */ DrawingObject;
struct __declspec(uuid("9ec6019a-c8a0-42e0-a5c9-949cd5830f12"))
/* dual interface */ ILineDrawingObject;
struct __declspec(uuid("9047a116-4871-45bd-92f2-2afa73287d1c"))
/* dual interface */ IFillDrawingObject;
struct /* coclass */ FillDrawingObject;
struct __declspec(uuid("3b6d9144-adbe-4165-9022-f931021ea9db"))
/* dual interface */ IDrawingObject2D;
struct __declspec(uuid("21d090e8-eab8-4495-bc59-dd374eb90125"))
/* dual interface */ IEffectDrawingObject;
struct __declspec(uuid("8db79e9f-443c-4531-85d3-c2408f70ef3b"))
/* dual interface */ IFontDrawingObject;
struct __declspec(uuid("84d11710-33da-35d4-a8de-5dc2d2169215"))
/* dual interface */ IExcelComment;
struct __declspec(uuid("d60e39d8-a136-4728-b1f4-567a79b6379b"))
/* dual interface */ IAlignDrawingObject;
struct __declspec(uuid("405e8d77-61fd-3a01-86e3-f6bf0ca79816"))
/* dual interface */ IExcelImage;
struct /* coclass */ ExcelImage;
struct /* coclass */ ExcelComment;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IExcelValueField, __uuidof(IExcelValueField));
_COM_SMARTPTR_TYPEDEF(IExcelField, __uuidof(IExcelField));
_COM_SMARTPTR_TYPEDEF(IList, __uuidof(IList));
_COM_SMARTPTR_TYPEDEF(IFormulaResult, __uuidof(IFormulaResult));
_COM_SMARTPTR_TYPEDEF(ICell, __uuidof(ICell));
_COM_SMARTPTR_TYPEDEF(IExcelEffectScheme, __uuidof(IExcelEffectScheme));
_COM_SMARTPTR_TYPEDEF(IExcelFontScheme, __uuidof(IExcelFontScheme));
_COM_SMARTPTR_TYPEDEF(IExcelColorScheme, __uuidof(IExcelColorScheme));
_COM_SMARTPTR_TYPEDEF(IExcelTheme, __uuidof(IExcelTheme));
_COM_SMARTPTR_TYPEDEF(IThemeColor, __uuidof(IThemeColor));
_COM_SMARTPTR_TYPEDEF(IDocumentSummaryInformation, __uuidof(IDocumentSummaryInformation));
_COM_SMARTPTR_TYPEDEF(ISummaryInformation, __uuidof(ISummaryInformation));
_COM_SMARTPTR_TYPEDEF(IExcelName, __uuidof(IExcelName));
_COM_SMARTPTR_TYPEDEF(IExcelOptions, __uuidof(IExcelOptions));
_COM_SMARTPTR_TYPEDEF(IExcelStyle, __uuidof(IExcelStyle));
_COM_SMARTPTR_TYPEDEF(IExcelAutoFormat, __uuidof(IExcelAutoFormat));
_COM_SMARTPTR_TYPEDEF(IExcelColumn, __uuidof(IExcelColumn));
_COM_SMARTPTR_TYPEDEF(IExcelFooter, __uuidof(IExcelFooter));
_COM_SMARTPTR_TYPEDEF(IExcelCondition, __uuidof(IExcelCondition));
_COM_SMARTPTR_TYPEDEF(IExcelConditionalFormatting, __uuidof(IExcelConditionalFormatting));
_COM_SMARTPTR_TYPEDEF(IExcelArrayFormula, __uuidof(IExcelArrayFormula));
_COM_SMARTPTR_TYPEDEF(IFormula, __uuidof(IFormula));
_COM_SMARTPTR_TYPEDEF(IExcelHeader, __uuidof(IExcelHeader));
_COM_SMARTPTR_TYPEDEF(IExcelDataGroup, __uuidof(IExcelDataGroup));
_COM_SMARTPTR_TYPEDEF(IExcelDataValidator, __uuidof(IExcelDataValidator));
_COM_SMARTPTR_TYPEDEF(IExcelPageSetup, __uuidof(IExcelPageSetup));
_COM_SMARTPTR_TYPEDEF(IExcelFilter, __uuidof(IExcelFilter));
_COM_SMARTPTR_TYPEDEF(IExcelHyperlink, __uuidof(IExcelHyperlink));
_COM_SMARTPTR_TYPEDEF(IFormat3D, __uuidof(IFormat3D));
_COM_SMARTPTR_TYPEDEF(IAlignmentFormat, __uuidof(IAlignmentFormat));
_COM_SMARTPTR_TYPEDEF(IFontFormat, __uuidof(IFontFormat));
_COM_SMARTPTR_TYPEDEF(IShadowFormat, __uuidof(IShadowFormat));
_COM_SMARTPTR_TYPEDEF(IGradientStop, __uuidof(IGradientStop));
_COM_SMARTPTR_TYPEDEF(ILineStyleFormat, __uuidof(ILineStyleFormat));
_COM_SMARTPTR_TYPEDEF(ILineColorFormat, __uuidof(ILineColorFormat));
_COM_SMARTPTR_TYPEDEF(IExcelChartGridlines, __uuidof(IExcelChartGridlines));
_COM_SMARTPTR_TYPEDEF(IDrawingObject, __uuidof(IDrawingObject));
_COM_SMARTPTR_TYPEDEF(ILineDrawingObject, __uuidof(ILineDrawingObject));
_COM_SMARTPTR_TYPEDEF(IDrawingObject2D, __uuidof(IDrawingObject2D));
_COM_SMARTPTR_TYPEDEF(IEffectDrawingObject, __uuidof(IEffectDrawingObject));
_COM_SMARTPTR_TYPEDEF(IFontDrawingObject, __uuidof(IFontDrawingObject));
_COM_SMARTPTR_TYPEDEF(IExcelComment, __uuidof(IExcelComment));
_COM_SMARTPTR_TYPEDEF(IExcelCell, __uuidof(IExcelCell));
_COM_SMARTPTR_TYPEDEF(IExcelRow, __uuidof(IExcelRow));
_COM_SMARTPTR_TYPEDEF(IExcelTable, __uuidof(IExcelTable));
_COM_SMARTPTR_TYPEDEF(IAlignDrawingObject, __uuidof(IAlignDrawingObject));
_COM_SMARTPTR_TYPEDEF(IExcelImage, __uuidof(IExcelImage));
_COM_SMARTPTR_TYPEDEF(IExcelSheet, __uuidof(IExcelSheet));
_COM_SMARTPTR_TYPEDEF(IUnknownSheet, __uuidof(IUnknownSheet));
_COM_SMARTPTR_TYPEDEF(IFillFormat, __uuidof(IFillFormat));
_COM_SMARTPTR_TYPEDEF(IExcelDataLabels, __uuidof(IExcelDataLabels));
_COM_SMARTPTR_TYPEDEF(IExcelPlotArea, __uuidof(IExcelPlotArea));
_COM_SMARTPTR_TYPEDEF(IExcelTitle, __uuidof(IExcelTitle));
_COM_SMARTPTR_TYPEDEF(IExcelDataTable, __uuidof(IExcelDataTable));
_COM_SMARTPTR_TYPEDEF(IExcelChartLegend, __uuidof(IExcelChartLegend));
_COM_SMARTPTR_TYPEDEF(IExcelSeries, __uuidof(IExcelSeries));
_COM_SMARTPTR_TYPEDEF(IExcelChartArea, __uuidof(IExcelChartArea));
_COM_SMARTPTR_TYPEDEF(IExcelAxis, __uuidof(IExcelAxis));
_COM_SMARTPTR_TYPEDEF(IExcelChart, __uuidof(IExcelChart));
_COM_SMARTPTR_TYPEDEF(IExcelChartSheet, __uuidof(IExcelChartSheet));
_COM_SMARTPTR_TYPEDEF(IFillDrawingObject, __uuidof(IFillDrawingObject));
_COM_SMARTPTR_TYPEDEF(IExcelPivotTable, __uuidof(IExcelPivotTable));
_COM_SMARTPTR_TYPEDEF(IExcelPivotChart, __uuidof(IExcelPivotChart));
_COM_SMARTPTR_TYPEDEF(IExcelWorksheet, __uuidof(IExcelWorksheet));
_COM_SMARTPTR_TYPEDEF(IExcelDocument, __uuidof(IExcelDocument));
_COM_SMARTPTR_TYPEDEF(IExternalLinks, __uuidof(IExternalLinks));

//
// Type library items
//

struct __declspec(uuid("ad1047c6-0073-4196-94c8-9699e9e0794e"))
IExcelValueField : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getCustomName ( );
    HRESULT setCustomName (
        _bstr_t customName );
    _bstr_t getBasicField ( );
    long getSubtotal ( );
    HRESULT setSubtotal (
        long subtotal );
    _bstr_t getFormat ( );
    HRESULT setFormat (
        _bstr_t format );
    IExcelValueFieldPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getCustomName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCustomName (
        /*[in]*/ BSTR customName ) = 0;
      virtual HRESULT __stdcall raw_getBasicField (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSubtotal (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubtotal (
        /*[in]*/ long subtotal ) = 0;
      virtual HRESULT __stdcall raw_getFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFormat (
        /*[in]*/ BSTR format ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelValueField * * pRetVal ) = 0;
};

struct __declspec(uuid("cecfd9f4-d4b2-4578-9456-6873d5103b06"))
ExcelValueField;
    // interface _Object
    // [ default ] interface IExcelValueField

struct __declspec(uuid("35f1eef3-2076-47d1-b3ea-04d926600893"))
ExcelPivotTable;
    // interface _Object
    // [ default ] interface IExcelPivotTable

struct __declspec(uuid("398a8898-d975-442f-a291-a801fb2259f0"))
IExcelField : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getCustomName ( );
    HRESULT setCustomName (
        _bstr_t customName );
    _bstr_t getOriginalName ( );
    long getArea ( );
    HRESULT addSubtotal (
        long subtotal );
    HRESULT removeSubtotal (
        long index );
    long getSubtotalAt (
        long index );
    long SubtotalCount ( );
    VARIANT_BOOL HasNewItemsInFilter ( );
    HRESULT setNewItemsInFilter (
        VARIANT_BOOL include );
    VARIANT_BOOL ShowItemLabelsInOutlineForm ( );
    VARIANT_BOOL ShowCompactForm ( );
    VARIANT_BOOL ShowSubtotalsOnTop ( );
    HRESULT setShowItemLabelsInOutlineForm (
        VARIANT_BOOL show,
        VARIANT_BOOL compact,
        VARIANT_BOOL subtotalsOnTop );
    VARIANT_BOOL ShowItemLabelsInTabularForm ( );
    HRESULT setShowItemLabelsInTabularForm (
        VARIANT_BOOL show );
    VARIANT_BOOL IsInsertBlankLine ( );
    HRESULT setInsertBlankLine (
        VARIANT_BOOL insertBlankLine );
    VARIANT_BOOL ShowItemsWithNoData ( );
    HRESULT setShowItemsWithNoData (
        VARIANT_BOOL show );
    VARIANT_BOOL IsInsertPageBreak ( );
    HRESULT setInsertPageBreak (
        VARIANT_BOOL insertPageBreak );
    long getSortOrder ( );
    HRESULT setSortOrder (
        long sortOrder );
    IExcelFieldPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getCustomName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCustomName (
        /*[in]*/ BSTR customName ) = 0;
      virtual HRESULT __stdcall raw_getOriginalName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getArea (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_addSubtotal (
        /*[in]*/ long subtotal ) = 0;
      virtual HRESULT __stdcall raw_removeSubtotal (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_getSubtotalAt (
        /*[in]*/ long index,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SubtotalCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasNewItemsInFilter (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNewItemsInFilter (
        /*[in]*/ VARIANT_BOOL include ) = 0;
      virtual HRESULT __stdcall raw_ShowItemLabelsInOutlineForm (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowCompactForm (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowSubtotalsOnTop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowItemLabelsInOutlineForm (
        /*[in]*/ VARIANT_BOOL show,
        /*[in]*/ VARIANT_BOOL compact,
        /*[in]*/ VARIANT_BOOL subtotalsOnTop ) = 0;
      virtual HRESULT __stdcall raw_ShowItemLabelsInTabularForm (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowItemLabelsInTabularForm (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_IsInsertBlankLine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setInsertBlankLine (
        /*[in]*/ VARIANT_BOOL insertBlankLine ) = 0;
      virtual HRESULT __stdcall raw_ShowItemsWithNoData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowItemsWithNoData (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_IsInsertPageBreak (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setInsertPageBreak (
        /*[in]*/ VARIANT_BOOL insertPageBreak ) = 0;
      virtual HRESULT __stdcall raw_getSortOrder (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSortOrder (
        /*[in]*/ long sortOrder ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelField * * pRetVal ) = 0;
};

struct __declspec(uuid("fe6db63e-9c9c-4d93-a5b8-0cd77af495fb"))
ExcelField;
    // interface _Object
    // [ default ] interface IExcelField

struct __declspec(uuid("a452da6a-78f2-49d5-9e43-371900a23850"))
ExcelPivotChart;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IDrawingObject2D
    // interface IExcelChart
    // [ default ] interface IExcelPivotChart

struct __declspec(uuid("5cfb5b64-5a12-4146-80fb-507d80253dcc"))
ExcelChart;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IDrawingObject2D
    // [ default ] interface IExcelChart

struct __declspec(uuid("e9e19639-9f1c-30ba-9d01-8e9c9827d21d"))
List;
    // interface _Object
    // interface IList
    // interface ICollection
    // interface IEnumerable
    // interface ICloneable
    // [ default ] interface IList

struct __declspec(uuid("41b916ab-96a8-3342-9cfc-a1b721ba2e44"))
IList : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t elementAt (
        long index );
    long size ( );
    HRESULT addElement (
        const _variant_t & value );
    HRESULT insertElementAt (
        const _variant_t & value,
        long index );
    HRESULT removeElement (
        const _variant_t & value );
    HRESULT removeElementAt (
        long index );
    HRESULT removeRange (
        long index,
        long count );
    HRESULT setElementAt (
        const _variant_t & value,
        long index );
    HRESULT clear ( );
    HRESULT addAll (
        long index,
        const _variant_t & collection );
    HRESULT addAll_2 (
        struct IList * collection );
    VARIANT_BOOL contains (
        const _variant_t & value );
    long indexOf (
        const _variant_t & value );
    IListPtr Clone ( );
    HRESULT setCapacity (
        long capacity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_elementAt (
        /*[in]*/ long index,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_size (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_addElement (
        /*[in]*/ VARIANT value ) = 0;
      virtual HRESULT __stdcall raw_insertElementAt (
        /*[in]*/ VARIANT value,
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_removeElement (
        /*[in]*/ VARIANT value ) = 0;
      virtual HRESULT __stdcall raw_removeElementAt (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_removeRange (
        /*[in]*/ long index,
        /*[in]*/ long count ) = 0;
      virtual HRESULT __stdcall raw_setElementAt (
        /*[in]*/ VARIANT value,
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_clear ( ) = 0;
      virtual HRESULT __stdcall raw_addAll (
        /*[in]*/ long index,
        /*[in]*/ VARIANT collection ) = 0;
      virtual HRESULT __stdcall raw_addAll_2 (
        /*[in]*/ struct IList * collection ) = 0;
      virtual HRESULT __stdcall raw_contains (
        /*[in]*/ VARIANT value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_indexOf (
        /*[in]*/ VARIANT value,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCapacity (
        /*[in]*/ long capacity ) = 0;
};

struct __declspec(uuid("3424fe23-6b33-338a-a345-db8e0d2a3d01"))
ExcelColumn;
    // interface _Object
    // [ default ] interface IExcelColumn

struct __declspec(uuid("1b67a21a-0713-48b2-97de-c4be987c3519"))
IFormulaResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToString))
    _bstr_t ToString;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetToString ( );
    _bstr_t getNumberFormat ( );
    _bstr_t getDataType ( );
    VARIANT_BOOL isHyperlink ( );
    _bstr_t getLinkLocation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ToString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getNumberFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDataType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_isHyperlink (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLinkLocation (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("9e2f88d2-6140-4803-81b5-e5b9d56e3c60"))
FormulaResult;
    // interface _Object
    // [ default ] interface IFormulaResult

struct __declspec(uuid("daa814a0-b8de-4c89-a61c-ebe9c9630e50"))
ICell : IDispatch
{};

struct __declspec(uuid("3e7815d1-f534-4232-892a-bc62ac897dbb"))
Cell;
    // interface _Object
    // [ default ] interface ICell

struct __declspec(uuid("ded7c671-fc54-4a64-abd3-ed8343aade4a"))
a;
    // [ default ] interface _Object

struct __declspec(uuid("08f7b5b8-685b-453a-9116-3b85c72bd252"))
IExcelEffectScheme : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT InitAs (
        _bstr_t builtInThemeEffects );
    _bstr_t getName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitAs (
        /*[in]*/ BSTR builtInThemeEffects ) = 0;
      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("c2f49217-be91-4e2a-a8a3-d6f8dc3eebe7"))
ExcelEffectScheme;
    // interface _Object
    // [ default ] interface IExcelEffectScheme

struct __declspec(uuid("3e8559b6-e09f-4f69-979a-0aa4c74332a4"))
ThemeColor;
    // interface _Object
    // [ default ] interface IThemeColor

struct __declspec(uuid("c3cf55f9-7144-43e6-a3e4-39924f44350f"))
ExcelTheme;
    // interface _Object
    // [ default ] interface IExcelTheme

struct __declspec(uuid("692ae230-599b-4c18-abe7-ab85c6d7b11c"))
IExcelFontScheme : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT InitAs (
        _bstr_t builtInThemeFonts );
    _bstr_t getName ( );
    HRESULT setName (
        _bstr_t name );
    _bstr_t getHeadingFont ( );
    HRESULT setHeadingFont (
        _bstr_t font );
    _bstr_t getBodyFont ( );
    HRESULT setBodyFont (
        _bstr_t font );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitAs (
        /*[in]*/ BSTR builtInThemeFonts ) = 0;
      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setName (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall raw_getHeadingFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeadingFont (
        /*[in]*/ BSTR font ) = 0;
      virtual HRESULT __stdcall raw_getBodyFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBodyFont (
        /*[in]*/ BSTR font ) = 0;
};

struct __declspec(uuid("2c0c8a44-5cca-4802-b473-7f707796462b"))
IExcelColorScheme : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT InitAs (
        _bstr_t builtInThemeColors );
    _bstr_t getName ( );
    HRESULT setName (
        _bstr_t name );
    long getTextBackgroundDark1 ( );
    HRESULT setTextBackgroundDark1 (
        long textBackgroundDark1 );
    VARIANT_BOOL IsAutomaticTextBackgroundDark1 ( );
    HRESULT setAutomaticTextBackgroundDark1 (
        VARIANT_BOOL isAutomatic );
    long getTextBackgroundLight1 ( );
    HRESULT setTextBackgroundLight1 (
        long textBackgroundLight1 );
    VARIANT_BOOL IsAutomaticTextBackgroundLight1 ( );
    HRESULT setAutomaticTextBackgroundLight1 (
        VARIANT_BOOL isAutomatic );
    long getTextBackgroundDark2 ( );
    HRESULT setTextBackgroundDark2 (
        long textBackgroundDark2 );
    long getTextBackgroundLight2 ( );
    HRESULT setTextBackgroundLight2 (
        long textBackgroundLight2 );
    long getAccent1Color ( );
    HRESULT setAccent1Color (
        long accent1 );
    long getAccent2Color ( );
    HRESULT setAccent2Color (
        long accent2 );
    long getAccent3Color ( );
    HRESULT setAccent3Color (
        long accent3 );
    long getAccent4Color ( );
    HRESULT setAccent4Color (
        long accent4 );
    long getAccent5Color ( );
    HRESULT setAccent5Color (
        long accent5 );
    long getAccent6Color ( );
    HRESULT setAccent6Color (
        long accent6 );
    long getHyperlinkColor ( );
    HRESULT setHyperlinkColor (
        long hyperlink );
    long getFollowedHyperlinkColor ( );
    HRESULT setFollowedHyperlinkColor (
        long followedHyperlink );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitAs (
        /*[in]*/ BSTR builtInThemeColors ) = 0;
      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setName (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall raw_getTextBackgroundDark1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextBackgroundDark1 (
        /*[in]*/ long textBackgroundDark1 ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticTextBackgroundDark1 (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticTextBackgroundDark1 (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getTextBackgroundLight1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextBackgroundLight1 (
        /*[in]*/ long textBackgroundLight1 ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticTextBackgroundLight1 (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticTextBackgroundLight1 (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getTextBackgroundDark2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextBackgroundDark2 (
        /*[in]*/ long textBackgroundDark2 ) = 0;
      virtual HRESULT __stdcall raw_getTextBackgroundLight2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextBackgroundLight2 (
        /*[in]*/ long textBackgroundLight2 ) = 0;
      virtual HRESULT __stdcall raw_getAccent1Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAccent1Color (
        /*[in]*/ long accent1 ) = 0;
      virtual HRESULT __stdcall raw_getAccent2Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAccent2Color (
        /*[in]*/ long accent2 ) = 0;
      virtual HRESULT __stdcall raw_getAccent3Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAccent3Color (
        /*[in]*/ long accent3 ) = 0;
      virtual HRESULT __stdcall raw_getAccent4Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAccent4Color (
        /*[in]*/ long accent4 ) = 0;
      virtual HRESULT __stdcall raw_getAccent5Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAccent5Color (
        /*[in]*/ long accent5 ) = 0;
      virtual HRESULT __stdcall raw_getAccent6Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAccent6Color (
        /*[in]*/ long accent6 ) = 0;
      virtual HRESULT __stdcall raw_getHyperlinkColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHyperlinkColor (
        /*[in]*/ long hyperlink ) = 0;
      virtual HRESULT __stdcall raw_getFollowedHyperlinkColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFollowedHyperlinkColor (
        /*[in]*/ long followedHyperlink ) = 0;
};

struct __declspec(uuid("7e31de7e-557a-4e6b-8773-ad928f893fdd"))
IExcelTheme : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getName ( );
    HRESULT setName (
        _bstr_t name );
    IExcelColorSchemePtr getColorScheme ( );
    HRESULT setColorScheme (
        struct IExcelColorScheme * colorScheme );
    IExcelFontSchemePtr getFontScheme ( );
    HRESULT setFontScheme (
        struct IExcelFontScheme * fontScheme );
    IExcelEffectSchemePtr getEffectScheme ( );
    HRESULT setEffectScheme (
        struct IExcelEffectScheme * effectScheme );
    HRESULT InitAs (
        _bstr_t builtInTheme );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setName (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall raw_getColorScheme (
        /*[out,retval]*/ struct IExcelColorScheme * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColorScheme (
        /*[in]*/ struct IExcelColorScheme * colorScheme ) = 0;
      virtual HRESULT __stdcall raw_getFontScheme (
        /*[out,retval]*/ struct IExcelFontScheme * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontScheme (
        /*[in]*/ struct IExcelFontScheme * fontScheme ) = 0;
      virtual HRESULT __stdcall raw_getEffectScheme (
        /*[out,retval]*/ struct IExcelEffectScheme * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setEffectScheme (
        /*[in]*/ struct IExcelEffectScheme * effectScheme ) = 0;
      virtual HRESULT __stdcall raw_InitAs (
        /*[in]*/ BSTR builtInTheme ) = 0;
};

struct __declspec(uuid("df1be00a-b6aa-4eb6-be01-be5038946744"))
IThemeColor : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setColor (
        long basicColor,
        long alterColorIndex );
    long getBasicColor ( );
    HRESULT setBasicColor (
        long basicColor );
    double getTint ( );
    long getLuminanceModulation ( );
    long getLuminanceOffset ( );
    VARIANT_BOOL IsEqual (
        struct IThemeColor * ThemeColor );
    long getColorForTheme (
        struct IExcelTheme * xlsTheme );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setColor (
        /*[in]*/ long basicColor,
        /*[in]*/ long alterColorIndex ) = 0;
      virtual HRESULT __stdcall raw_getBasicColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBasicColor (
        /*[in]*/ long basicColor ) = 0;
      virtual HRESULT __stdcall raw_getTint (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLuminanceModulation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLuminanceOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IThemeColor * ThemeColor,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getColorForTheme (
        /*[in]*/ struct IExcelTheme * xlsTheme,
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("2d9ca1dd-d680-45d9-88fb-56218b2600c3"))
ExcelColorScheme;
    // interface _Object
    // [ default ] interface IExcelColorScheme

struct __declspec(uuid("707dbe5e-a071-4a30-99c1-acf17fe09adc"))
ExcelFontScheme;
    // interface _Object
    // [ default ] interface IExcelFontScheme

struct __declspec(uuid("c9552104-64f0-4356-8355-f3bb74c5a141"))
IDocumentSummaryInformation : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getCategory ( );
    HRESULT setCategory (
        _bstr_t category );
    _bstr_t getCompanyName ( );
    HRESULT setCompanyName (
        _bstr_t companyName );
    VARIANT_BOOL getScale ( );
    HRESULT setScale (
        VARIANT_BOOL scale );
    VARIANT_BOOL getLinksDirty ( );
    HRESULT setLinksDirty (
        VARIANT_BOOL linksDirty );
    _bstr_t getManager ( );
    HRESULT setManager (
        _bstr_t manager );
    _bstr_t getHyperlinkBase ( );
    HRESULT setHyperlinkBase (
        _bstr_t hyperlinkBase );
    _bstr_t getCustomProperty (
        _bstr_t name );
    HRESULT setCustomProperty (
        _bstr_t name,
        __int64 type,
        _bstr_t value );
    VARIANT_BOOL HasCustomProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getCategory (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCategory (
        /*[in]*/ BSTR category ) = 0;
      virtual HRESULT __stdcall raw_getCompanyName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCompanyName (
        /*[in]*/ BSTR companyName ) = 0;
      virtual HRESULT __stdcall raw_getScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setScale (
        /*[in]*/ VARIANT_BOOL scale ) = 0;
      virtual HRESULT __stdcall raw_getLinksDirty (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLinksDirty (
        /*[in]*/ VARIANT_BOOL linksDirty ) = 0;
      virtual HRESULT __stdcall raw_getManager (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setManager (
        /*[in]*/ BSTR manager ) = 0;
      virtual HRESULT __stdcall raw_getHyperlinkBase (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHyperlinkBase (
        /*[in]*/ BSTR hyperlinkBase ) = 0;
      virtual HRESULT __stdcall raw_getCustomProperty (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCustomProperty (
        /*[in]*/ BSTR name,
        /*[in]*/ __int64 type,
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_HasCustomProperties (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("cbdfc1bb-e0df-4897-9e39-3e8d101b3789"))
DocumentSummaryInformation;
    // interface _Object
    // [ default ] interface IDocumentSummaryInformation

struct __declspec(uuid("5884c7ad-134a-4053-8a5c-fe3e1cb48d20"))
ISummaryInformation : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getTitle ( );
    HRESULT setTitle (
        _bstr_t title );
    _bstr_t getSubject ( );
    HRESULT setSubject (
        _bstr_t subject );
    _bstr_t getKeywords ( );
    HRESULT setKeywords (
        _bstr_t keywords );
    _bstr_t getComments ( );
    HRESULT setComments (
        _bstr_t comments );
    _bstr_t getAuthor ( );
    HRESULT setAuthor (
        _bstr_t author );
    _bstr_t getLastSavedBy ( );
    HRESULT setLastSavedBy (
        _bstr_t author );
    _bstr_t getRevisionNumber ( );
    HRESULT setRevisionNumber (
        _bstr_t revisionNumber );
    _bstr_t getApplicationName ( );
    HRESULT setApplicationName (
        _bstr_t applicationName );
    DATE getLastSavedDate ( );
    HRESULT setLastSavedDate (
        DATE date );
    DATE getCreationDate ( );
    DATE getLastPrinted ( );
    HRESULT setLastPrinted (
        DATE lastPrinted );
    _bstr_t getStatus ( );
    HRESULT setStatus (
        _bstr_t status );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTitle (
        /*[in]*/ BSTR title ) = 0;
      virtual HRESULT __stdcall raw_getSubject (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubject (
        /*[in]*/ BSTR subject ) = 0;
      virtual HRESULT __stdcall raw_getKeywords (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setKeywords (
        /*[in]*/ BSTR keywords ) = 0;
      virtual HRESULT __stdcall raw_getComments (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setComments (
        /*[in]*/ BSTR comments ) = 0;
      virtual HRESULT __stdcall raw_getAuthor (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAuthor (
        /*[in]*/ BSTR author ) = 0;
      virtual HRESULT __stdcall raw_getLastSavedBy (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastSavedBy (
        /*[in]*/ BSTR author ) = 0;
      virtual HRESULT __stdcall raw_getRevisionNumber (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRevisionNumber (
        /*[in]*/ BSTR revisionNumber ) = 0;
      virtual HRESULT __stdcall raw_getApplicationName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setApplicationName (
        /*[in]*/ BSTR applicationName ) = 0;
      virtual HRESULT __stdcall raw_getLastSavedDate (
        /*[out,retval]*/ DATE * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastSavedDate (
        /*[in]*/ DATE date ) = 0;
      virtual HRESULT __stdcall raw_getCreationDate (
        /*[out,retval]*/ DATE * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLastPrinted (
        /*[out,retval]*/ DATE * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastPrinted (
        /*[in]*/ DATE lastPrinted ) = 0;
      virtual HRESULT __stdcall raw_getStatus (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStatus (
        /*[in]*/ BSTR status ) = 0;
};

struct __declspec(uuid("462e4f09-774f-4304-af1a-4996b985c951"))
SummaryInformation;
    // interface _Object
    // [ default ] interface ISummaryInformation

struct __declspec(uuid("f1953b65-6c99-3021-8eec-b6a2593ddc86"))
IExcelName : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getNameText ( );
    HRESULT setNameText (
        _bstr_t text );
    _bstr_t getRefersTo ( );
    HRESULT setRefersTo (
        _bstr_t Formula );
    VARIANT_BOOL IsHidden ( );
    HRESULT setHidden (
        VARIANT_BOOL IsHidden );
    VARIANT_BOOL IsBuildInName ( );
    long getSheetIndex ( );
    IExcelNamePtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getNameText (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNameText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getRefersTo (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRefersTo (
        /*[in]*/ BSTR Formula ) = 0;
      virtual HRESULT __stdcall raw_IsHidden (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHidden (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_IsBuildInName (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSheetIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelName * * pRetVal ) = 0;
};

struct __declspec(uuid("9e5a2379-eca5-4acf-999f-e62ca7d4f43b"))
ExcelAutoFormat;
    // interface _Object
    // [ default ] interface IExcelAutoFormat

struct __declspec(uuid("b5d3591c-67b4-3f43-9cec-be736ef6b8ae"))
ExcelTable;
    // interface _Object
    // [ default ] interface IExcelTable

struct __declspec(uuid("b584187d-49ad-31b0-a55f-bc64ec5905a5"))
ExcelName;
    // interface _Object
    // [ default ] interface IExcelName

struct __declspec(uuid("a2aeae95-99c9-405f-8609-4f121b191d00"))
IExcelOptions : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL CalculateFormulas ( );
    HRESULT setCalculateFormulas (
        VARIANT_BOOL CalculateFormulas );
    HRESULT setIterativeCalculation (
        VARIANT_BOOL enable,
        long maximumIterations,
        double maximumChange );
    VARIANT_BOOL IsIterativeCalculation ( );
    long getMaximumIterations ( );
    double getMaximumChange ( );
    VARIANT_BOOL IsR1C1ReferenceStyle ( );
    HRESULT setR1C1ReferenceStyle (
        VARIANT_BOOL IsR1C1ReferenceStyle );
    HRESULT setEncryptionOptions (
        long encryptionType,
        _bstr_t passwordToOpen );
    long getEncryptionType ( );
    HRESULT setPasswordToOpen (
        _bstr_t passwordToOpen );
    _bstr_t getPasswordToOpen ( );
    HRESULT setPasswordToModify (
        _bstr_t passwordToModify );
    _bstr_t getPasswordToModify ( );
    IExcelOptionsPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CalculateFormulas (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCalculateFormulas (
        /*[in]*/ VARIANT_BOOL CalculateFormulas ) = 0;
      virtual HRESULT __stdcall raw_setIterativeCalculation (
        /*[in]*/ VARIANT_BOOL enable,
        /*[in]*/ long maximumIterations,
        /*[in]*/ double maximumChange ) = 0;
      virtual HRESULT __stdcall raw_IsIterativeCalculation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getMaximumIterations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getMaximumChange (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsR1C1ReferenceStyle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setR1C1ReferenceStyle (
        /*[in]*/ VARIANT_BOOL IsR1C1ReferenceStyle ) = 0;
      virtual HRESULT __stdcall raw_setEncryptionOptions (
        /*[in]*/ long encryptionType,
        /*[in]*/ BSTR passwordToOpen ) = 0;
      virtual HRESULT __stdcall raw_getEncryptionType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPasswordToOpen (
        /*[in]*/ BSTR passwordToOpen ) = 0;
      virtual HRESULT __stdcall raw_getPasswordToOpen (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPasswordToModify (
        /*[in]*/ BSTR passwordToModify ) = 0;
      virtual HRESULT __stdcall raw_getPasswordToModify (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelOptions * * pRetVal ) = 0;
};

struct __declspec(uuid("de89e0c2-59df-3e2d-9315-9d03a1d6750c"))
IExcelStyle : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getFormat ( );
    HRESULT setFormat (
        _bstr_t format );
    _bstr_t getHorizontalAlignment ( );
    HRESULT setHorizontalAlignment (
        _bstr_t horizontalAlignment );
    _bstr_t getVerticalAlignment ( );
    HRESULT setVerticalAlignment (
        _bstr_t verticalAlignment );
    VARIANT_BOOL IsJustifyDistributed ( );
    HRESULT setJustifyDistributed (
        VARIANT_BOOL isWrap );
    long getIndent ( );
    HRESULT setIndent (
        long indent );
    long getTextRotation ( );
    HRESULT setTextRotation (
        long textRotation );
    VARIANT_BOOL isWrap ( );
    HRESULT setWrap (
        VARIANT_BOOL isWrap );
    VARIANT_BOOL IsShrink ( );
    HRESULT setShrink (
        VARIANT_BOOL IsShrink );
    VARIANT_BOOL IsMergeCell ( );
    long getTextDirection ( );
    HRESULT setTextDirection (
        long textDirection );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL IsHeadingsFont ( );
    HRESULT setHeadingsFont ( );
    VARIANT_BOOL IsBodyFont ( );
    HRESULT setBodyFont ( );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getForeground ( );
    IThemeColorPtr getForegroundThemeColor ( );
    HRESULT setForeground (
        long color );
    HRESULT setForeground_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    HRESULT setBorderStyles (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    long getTopStyle_Border ( );
    HRESULT setTopStyle_Border (
        long borderStyle );
    long getBottomStyle_Border ( );
    HRESULT setBottomStyle_Border (
        long borderStyle );
    long getLeftStyle_Border ( );
    HRESULT setLeftStyle_Border (
        long borderStyle );
    long getRightStyle_Border ( );
    HRESULT setRightStyle_Border (
        long borderStyle );
    HRESULT setBorderColors (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    HRESULT setBorderColors_2 (
        const _variant_t & borderTop,
        const _variant_t & borderBottom,
        const _variant_t & borderLeft,
        const _variant_t & borderRight );
    long getTopColor_Border ( );
    IThemeColorPtr getTopThemeColor_Border ( );
    HRESULT setTopColor_Border (
        long color );
    HRESULT setTopColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getBottomColor_Border ( );
    IThemeColorPtr getBottomThemeColor_Border ( );
    HRESULT setBottomColor_Border (
        long color );
    HRESULT setBottomColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getLeftColor_Border ( );
    IThemeColorPtr getLeftThemeColor_Border ( );
    HRESULT setLeftColor_Border (
        long color );
    HRESULT setLeftColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getRightColor_Border ( );
    IThemeColorPtr getRightThemeColor_Border ( );
    HRESULT setRightColor_Border (
        long color );
    HRESULT setRightColor_Border_2 (
        struct IThemeColor * ThemeColor );
    HRESULT setDiagonalBorder (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        long borderColor );
    HRESULT setDiagonalBorder_2 (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        const _variant_t & borderColor );
    long getDiagonalUpStyle_Border ( );
    long getDiagonalDownStyle_Border ( );
    long getDiagonalColor_Border ( );
    IThemeColorPtr getDiagonalThemeColor_Border ( );
    long getBackground ( );
    IThemeColorPtr getBackgroundThemeColor ( );
    HRESULT setBackground (
        long color );
    HRESULT setBackground_2 (
        struct IThemeColor * ThemeColor );
    long getPattern ( );
    HRESULT setPattern (
        long pattern );
    long getPatternColor ( );
    IThemeColorPtr getPatternThemeColor ( );
    HRESULT setPatternColor (
        long patternColor );
    HRESULT setPatternColor_2 (
        struct IThemeColor * ThemeColor );
    long getGradientColor1 ( );
    HRESULT setGradientColor1 (
        long color1 );
    long getGradientColor2 ( );
    HRESULT setGradientColor2 (
        long color2 );
    HRESULT setGradientFill (
        long color1,
        long color2,
        long shadingStyle );
    IThemeColorPtr getGradientThemeColor1 ( );
    HRESULT setGradientColor1_2 (
        struct IThemeColor * themeColor1 );
    IThemeColorPtr getGradientThemeColor2 ( );
    HRESULT setGradientColor2_2 (
        struct IThemeColor * themeColor2 );
    HRESULT setGradientFill_2 (
        const _variant_t & themeColor1,
        const _variant_t & themeColor2,
        long shadingStyle );
    long getGradientShadingStyle ( );
    HRESULT setGradientShadingStyle (
        long shadingStyle );
    VARIANT_BOOL IsLocked ( );
    HRESULT setLocked (
        VARIANT_BOOL IsLocked );
    VARIANT_BOOL IsHiddenFormula ( );
    HRESULT setHiddenFormula (
        VARIANT_BOOL IsHidden );
    _bstr_t getDataType ( );
    HRESULT setDataType (
        _bstr_t dataType );
    IExcelStylePtr Clone ( );
    VARIANT_BOOL IsEqual (
        struct IExcelStyle * xlsCompare );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFormat (
        /*[in]*/ BSTR format ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHorizontalAlignment (
        /*[in]*/ BSTR horizontalAlignment ) = 0;
      virtual HRESULT __stdcall raw_getVerticalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVerticalAlignment (
        /*[in]*/ BSTR verticalAlignment ) = 0;
      virtual HRESULT __stdcall raw_IsJustifyDistributed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setJustifyDistributed (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_getIndent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIndent (
        /*[in]*/ long indent ) = 0;
      virtual HRESULT __stdcall raw_getTextRotation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextRotation (
        /*[in]*/ long textRotation ) = 0;
      virtual HRESULT __stdcall raw_isWrap (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWrap (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_IsShrink (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShrink (
        /*[in]*/ VARIANT_BOOL IsShrink ) = 0;
      virtual HRESULT __stdcall raw_IsMergeCell (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTextDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextDirection (
        /*[in]*/ long textDirection ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_IsHeadingsFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeadingsFont ( ) = 0;
      virtual HRESULT __stdcall raw_IsBodyFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBodyFont ( ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getForegroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setForeground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyles (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getLeftStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getRightStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors_2 (
        /*[in]*/ VARIANT borderTop,
        /*[in]*/ VARIANT borderBottom,
        /*[in]*/ VARIANT borderLeft,
        /*[in]*/ VARIANT borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTopThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getBottomColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBottomThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getLeftColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getRightColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRightThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder_2 (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ VARIANT borderColor ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalUpStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalDownStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackgroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBackground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getPattern (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPattern (
        /*[in]*/ long pattern ) = 0;
      virtual HRESULT __stdcall raw_getPatternColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getPatternThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor (
        /*[in]*/ long patternColor ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientColor1 (
        /*[in]*/ long color1 ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientColor2 (
        /*[in]*/ long color2 ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill (
        /*[in]*/ long color1,
        /*[in]*/ long color2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor1 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientColor1_2 (
        /*[in]*/ struct IThemeColor * themeColor1 ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor2 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientColor2_2 (
        /*[in]*/ struct IThemeColor * themeColor2 ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill_2 (
        /*[in]*/ VARIANT themeColor1,
        /*[in]*/ VARIANT themeColor2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientShadingStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientShadingStyle (
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_IsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLocked (
        /*[in]*/ VARIANT_BOOL IsLocked ) = 0;
      virtual HRESULT __stdcall raw_IsHiddenFormula (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHiddenFormula (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_getDataType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataType (
        /*[in]*/ BSTR dataType ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IExcelStyle * xlsCompare,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("8af14c2c-4905-44ff-b91e-24e5544d4a16"))
IExcelAutoFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setTableStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getTableStyle ( );
    HRESULT setHeaderRowStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getHeaderRowStyle ( );
    HRESULT setFooterRowStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getFooterRowStyle ( );
    HRESULT setLeftColumnStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getLeftColumnStyle ( );
    HRESULT setRightColumnStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getRightColumnStyle ( );
    HRESULT setTopLeftCellStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getTopLeftCellStyle ( );
    HRESULT setTopRightCellStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getTopRightCellStyle ( );
    HRESULT setBottomLeftCellStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getBottomLeftCellStyle ( );
    HRESULT setBottomRightCellStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getBottomRightCellStyle ( );
    HRESULT setEvenRowStripesStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getEvenRowStripesStyle ( );
    HRESULT setEvenColumnStripesStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getEvenColumnStripesStyle ( );
    HRESULT setOddRowStripesStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getOddRowStripesStyle ( );
    HRESULT setOddColumnStripesStyle (
        struct IExcelStyle * xlsStyle );
    IExcelStylePtr getOddColumnStripesStyle ( );
    HRESULT InitAs (
        long autoformat );
    long getAutoFormatType ( );
    IExcelAutoFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setTableStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getTableStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeaderRowStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getHeaderRowStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFooterRowStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getFooterRowStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftColumnStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getLeftColumnStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightColumnStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getRightColumnStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopLeftCellStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getTopLeftCellStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopRightCellStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getTopRightCellStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomLeftCellStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomLeftCellStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomRightCellStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomRightCellStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setEvenRowStripesStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getEvenRowStripesStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setEvenColumnStripesStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getEvenColumnStripesStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setOddRowStripesStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getOddRowStripesStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setOddColumnStripesStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getOddColumnStripesStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitAs (
        /*[in]*/ long autoformat ) = 0;
      virtual HRESULT __stdcall raw_getAutoFormatType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelAutoFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("f03e47f0-b98a-3785-a754-bf8f75e60b68"))
IExcelColumn : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long count ( );
    long getWidth ( );
    HRESULT setWidth (
        long width );
    VARIANT_BOOL IsHiddenColumn ( );
    HRESULT setHiddenColumn (
        VARIANT_BOOL IsHidden );
    _bstr_t getDataType ( );
    HRESULT setDataType (
        _bstr_t dataType );
    IExcelStylePtr getStyle ( );
    HRESULT setStyle (
        struct IExcelStyle * xlsStyle );
    _bstr_t getFormat ( );
    HRESULT setFormat (
        _bstr_t format );
    _bstr_t getHorizontalAlignment ( );
    HRESULT setHorizontalAlignment (
        _bstr_t horizontalAlignment );
    _bstr_t getVerticalAlignment ( );
    HRESULT setVerticalAlignment (
        _bstr_t verticalAlignment );
    VARIANT_BOOL IsJustifyDistributed ( );
    HRESULT setJustifyDistributed (
        VARIANT_BOOL isWrap );
    long getIndent ( );
    HRESULT setIndent (
        long indent );
    long getTextRotation ( );
    HRESULT setTextRotation (
        long textRotation );
    VARIANT_BOOL isWrap ( );
    HRESULT setWrap (
        VARIANT_BOOL isWrap );
    VARIANT_BOOL IsShrink ( );
    HRESULT setShrink (
        VARIANT_BOOL IsShrink );
    long getTextDirection ( );
    HRESULT setTextDirection (
        long textDirection );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL IsHeadingsFont ( );
    HRESULT setHeadingsFont ( );
    VARIANT_BOOL IsBodyFont ( );
    HRESULT setBodyFont ( );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getForeground ( );
    IThemeColorPtr getForegroundThemeColor ( );
    HRESULT setForeground (
        long color );
    HRESULT setForeground_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    HRESULT setBorderStyles (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    long getTopStyle_Border ( );
    HRESULT setTopStyle_Border (
        long borderStyle );
    long getBottomStyle_Border ( );
    HRESULT setBottomStyle_Border (
        long borderStyle );
    long getLeftStyle_Border ( );
    HRESULT setLeftStyle_Border (
        long borderStyle );
    long getRightStyle_Border ( );
    HRESULT setRightStyle_Border (
        long borderStyle );
    HRESULT setBorderColors (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    HRESULT setBorderColors_2 (
        const _variant_t & borderTop,
        const _variant_t & borderBottom,
        const _variant_t & borderLeft,
        const _variant_t & borderRight );
    long getTopColor_Border ( );
    IThemeColorPtr getTopThemeColor_Border ( );
    HRESULT setTopColor_Border (
        long color );
    HRESULT setTopColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getBottomColor_Border ( );
    IThemeColorPtr getBottomThemeColor_Border ( );
    HRESULT setBottomColor_Border (
        long color );
    HRESULT setBottomColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getLeftColor_Border ( );
    IThemeColorPtr getLeftThemeColor_Border ( );
    HRESULT setLeftColor_Border (
        long color );
    HRESULT setLeftColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getRightColor_Border ( );
    IThemeColorPtr getRightThemeColor_Border ( );
    HRESULT setRightColor_Border (
        long color );
    HRESULT setRightColor_Border_2 (
        struct IThemeColor * ThemeColor );
    HRESULT setDiagonalBorder (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        long borderColor );
    HRESULT setDiagonalBorder_2 (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        const _variant_t & borderColor );
    long getDiagonalUpStyle_Border ( );
    long getDiagonalDownStyle_Border ( );
    long getDiagonalColor_Border ( );
    IThemeColorPtr getDiagonalThemeColor_Border ( );
    long getBackground ( );
    IThemeColorPtr getBackgroundThemeColor ( );
    HRESULT setBackground (
        long color );
    HRESULT setBackground_2 (
        struct IThemeColor * ThemeColor );
    long getPattern ( );
    HRESULT setPattern (
        long pattern );
    long getPatternColor ( );
    IThemeColorPtr getPatternThemeColor ( );
    HRESULT setPatternColor (
        long patternColor );
    HRESULT setPatternColor_2 (
        struct IThemeColor * ThemeColor );
    long getGradientColor1 ( );
    long getGradientColor2 ( );
    HRESULT setGradientFill (
        long color1,
        long color2,
        long shadingStyle );
    IThemeColorPtr getGradientThemeColor1 ( );
    IThemeColorPtr getGradientThemeColor2 ( );
    HRESULT setGradientFill_2 (
        const _variant_t & themeColor1,
        const _variant_t & themeColor2,
        long shadingStyle );
    long getGradientShadingStyle ( );
    VARIANT_BOOL IsLocked ( );
    HRESULT setLocked (
        VARIANT_BOOL IsLocked );
    VARIANT_BOOL IsHiddenFormula ( );
    HRESULT setHiddenFormula (
        VARIANT_BOOL IsHidden );
    IExcelColumnPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWidth (
        /*[in]*/ long width ) = 0;
      virtual HRESULT __stdcall raw_IsHiddenColumn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHiddenColumn (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_getDataType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataType (
        /*[in]*/ BSTR dataType ) = 0;
      virtual HRESULT __stdcall raw_getStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFormat (
        /*[in]*/ BSTR format ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHorizontalAlignment (
        /*[in]*/ BSTR horizontalAlignment ) = 0;
      virtual HRESULT __stdcall raw_getVerticalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVerticalAlignment (
        /*[in]*/ BSTR verticalAlignment ) = 0;
      virtual HRESULT __stdcall raw_IsJustifyDistributed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setJustifyDistributed (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_getIndent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIndent (
        /*[in]*/ long indent ) = 0;
      virtual HRESULT __stdcall raw_getTextRotation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextRotation (
        /*[in]*/ long textRotation ) = 0;
      virtual HRESULT __stdcall raw_isWrap (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWrap (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_IsShrink (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShrink (
        /*[in]*/ VARIANT_BOOL IsShrink ) = 0;
      virtual HRESULT __stdcall raw_getTextDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextDirection (
        /*[in]*/ long textDirection ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_IsHeadingsFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeadingsFont ( ) = 0;
      virtual HRESULT __stdcall raw_IsBodyFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBodyFont ( ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getForegroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setForeground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyles (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getLeftStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getRightStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors_2 (
        /*[in]*/ VARIANT borderTop,
        /*[in]*/ VARIANT borderBottom,
        /*[in]*/ VARIANT borderLeft,
        /*[in]*/ VARIANT borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTopThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getBottomColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBottomThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getLeftColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getRightColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRightThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder_2 (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ VARIANT borderColor ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalUpStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalDownStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackgroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBackground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getPattern (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPattern (
        /*[in]*/ long pattern ) = 0;
      virtual HRESULT __stdcall raw_getPatternColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getPatternThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor (
        /*[in]*/ long patternColor ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill (
        /*[in]*/ long color1,
        /*[in]*/ long color2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor1 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor2 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill_2 (
        /*[in]*/ VARIANT themeColor1,
        /*[in]*/ VARIANT themeColor2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientShadingStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLocked (
        /*[in]*/ VARIANT_BOOL IsLocked ) = 0;
      virtual HRESULT __stdcall raw_IsHiddenFormula (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHiddenFormula (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelColumn * * pRetVal ) = 0;
};

struct __declspec(uuid("3a0d797f-63f2-3bd3-831f-5b97d309789a"))
ExcelStyle;
    // interface _Object
    // [ default ] interface IExcelStyle

struct __declspec(uuid("88be717f-ed7c-3d27-92bb-ccf8cee02d74"))
IExcelFooter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getFooterString ( );
    HRESULT setFooterString (
        _bstr_t text );
    _bstr_t getPosition ( );
    HRESULT setPosition (
        _bstr_t position );
    HRESULT InsertValue (
        _bstr_t value );
    HRESULT InsertFont (
        _bstr_t fontType );
    HRESULT InsertFontSize (
        long fontSize );
    HRESULT InsertSingleUnderline ( );
    HRESULT RemoveSingleUnderline ( );
    HRESULT InsertDoubleUnderline ( );
    HRESULT RemoveDoubleUnderline ( );
    HRESULT InsertStrikethrough ( );
    HRESULT RemoveStrikethrough ( );
    HRESULT InsertSuperscript ( );
    HRESULT RemoveSuperscript ( );
    HRESULT InsertSubscript ( );
    HRESULT RemoveSubscript ( );
    HRESULT InsertBold ( );
    HRESULT RemoveBold ( );
    HRESULT InsertItalic ( );
    HRESULT RemoveItalic ( );
    HRESULT InsertPage ( );
    HRESULT InsertPages ( );
    HRESULT InsertDate ( );
    HRESULT InsertTime ( );
    HRESULT InsertFile ( );
    HRESULT InsertTab ( );
    HRESULT InsertEnter ( );
    HRESULT Reset ( );
    IExcelFooterPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFooterString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFooterString (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getPosition (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPosition (
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_InsertValue (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_InsertFont (
        /*[in]*/ BSTR fontType ) = 0;
      virtual HRESULT __stdcall raw_InsertFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_InsertSingleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSingleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_InsertDoubleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveDoubleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_InsertStrikethrough ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveStrikethrough ( ) = 0;
      virtual HRESULT __stdcall raw_InsertSuperscript ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSuperscript ( ) = 0;
      virtual HRESULT __stdcall raw_InsertSubscript ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubscript ( ) = 0;
      virtual HRESULT __stdcall raw_InsertBold ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveBold ( ) = 0;
      virtual HRESULT __stdcall raw_InsertItalic ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItalic ( ) = 0;
      virtual HRESULT __stdcall raw_InsertPage ( ) = 0;
      virtual HRESULT __stdcall raw_InsertPages ( ) = 0;
      virtual HRESULT __stdcall raw_InsertDate ( ) = 0;
      virtual HRESULT __stdcall raw_InsertTime ( ) = 0;
      virtual HRESULT __stdcall raw_InsertFile ( ) = 0;
      virtual HRESULT __stdcall raw_InsertTab ( ) = 0;
      virtual HRESULT __stdcall raw_InsertEnter ( ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelFooter * * pRetVal ) = 0;
};

struct __declspec(uuid("febda32c-5865-3d60-a447-4018054bc21c"))
ExcelFooter;
    // interface _Object
    // [ default ] interface IExcelFooter

struct __declspec(uuid("ed783240-17f3-3709-96de-93dca09db1bf"))
ExcelDocument;
    // interface _Object
    // interface IRemoteDispatch
    // interface IDisposable
    // interface IManagedObject
    // interface IServicedComponentInfo
    // [ default ] interface IExcelDocument

struct __declspec(uuid("2f6b4b03-3a0e-38ae-bc63-c2f84303868c"))
IExcelCondition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsFontUnderlineModified ( );
    VARIANT_BOOL IsFontBoldItalicModified ( );
    VARIANT_BOOL IsFontStrikethroughModified ( );
    VARIANT_BOOL IsFontColorModified ( );
    HRESULT clearFontSettings ( );
    VARIANT_BOOL IsLeftBorderModified ( );
    VARIANT_BOOL IsRightBorderModified ( );
    VARIANT_BOOL IsTopBorderModified ( );
    VARIANT_BOOL IsBottomBorderModified ( );
    HRESULT clearBorderSettings ( );
    VARIANT_BOOL IsBackgroundModified ( );
    HRESULT clearBackgroundSettings ( );
    long getConditionType ( );
    HRESULT setConditionType (
        long type );
    long getOperator ( );
    HRESULT setOperator (
        long nOperator );
    _bstr_t getFirstFormula ( );
    HRESULT setFirstFormula (
        _bstr_t firstFormula );
    _bstr_t getSecondFormula ( );
    HRESULT setSecondFormula (
        _bstr_t secondFormula );
    long getForeground ( );
    IThemeColorPtr getForegroundThemeColor ( );
    HRESULT setForeground (
        long color );
    HRESULT setForeground_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    HRESULT setBorderStyles (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    long getTopStyle_Border ( );
    HRESULT setTopStyle_Border (
        long borderStyle );
    long getBottomStyle_Border ( );
    HRESULT setBottomStyle_Border (
        long borderStyle );
    long getLeftStyle_Border ( );
    HRESULT setLeftStyle_Border (
        long borderStyle );
    long getRightStyle_Border ( );
    HRESULT setRightStyle_Border (
        long borderStyle );
    HRESULT setBorderColors (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    HRESULT setBorderColors_2 (
        const _variant_t & borderTop,
        const _variant_t & borderBottom,
        const _variant_t & borderLeft,
        const _variant_t & borderRight );
    long getTopColor_Border ( );
    IThemeColorPtr getTopThemeColor_Border ( );
    HRESULT setTopColor_Border (
        long color );
    HRESULT setTopColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getBottomColor_Border ( );
    IThemeColorPtr getBottomThemeColor_Border ( );
    HRESULT setBottomColor_Border (
        long color );
    HRESULT setBottomColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getLeftColor_Border ( );
    IThemeColorPtr getLeftThemeColor_Border ( );
    HRESULT setLeftColor_Border (
        long color );
    HRESULT setLeftColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getRightColor_Border ( );
    IThemeColorPtr getRightThemeColor_Border ( );
    HRESULT setRightColor_Border (
        long color );
    HRESULT setRightColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getBackground ( );
    IThemeColorPtr getBackgroundThemeColor ( );
    HRESULT setBackground (
        long color );
    HRESULT setBackground_2 (
        struct IThemeColor * ThemeColor );
    IExcelConditionPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsFontUnderlineModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsFontBoldItalicModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsFontStrikethroughModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsFontColorModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_clearFontSettings ( ) = 0;
      virtual HRESULT __stdcall raw_IsLeftBorderModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsRightBorderModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTopBorderModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsBottomBorderModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_clearBorderSettings ( ) = 0;
      virtual HRESULT __stdcall raw_IsBackgroundModified (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_clearBackgroundSettings ( ) = 0;
      virtual HRESULT __stdcall raw_getConditionType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setConditionType (
        /*[in]*/ long type ) = 0;
      virtual HRESULT __stdcall raw_getOperator (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setOperator (
        /*[in]*/ long nOperator ) = 0;
      virtual HRESULT __stdcall raw_getFirstFormula (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstFormula (
        /*[in]*/ BSTR firstFormula ) = 0;
      virtual HRESULT __stdcall raw_getSecondFormula (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSecondFormula (
        /*[in]*/ BSTR secondFormula ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getForegroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setForeground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyles (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getLeftStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getRightStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors_2 (
        /*[in]*/ VARIANT borderTop,
        /*[in]*/ VARIANT borderBottom,
        /*[in]*/ VARIANT borderLeft,
        /*[in]*/ VARIANT borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTopThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getBottomColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBottomThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getLeftColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getRightColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRightThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackgroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBackground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelCondition * * pRetVal ) = 0;
};

struct __declspec(uuid("fefa4675-b292-364a-b3e1-20cc8c52d55a"))
IExcelConditionalFormatting : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setFirstRow (
        long firstRow );
    HRESULT setFirstColumn (
        long firstColumn );
    HRESULT setLastRow (
        long lastRow );
    HRESULT setLastColumn (
        long lastColumn );
    long getFirstRow ( );
    long getLastRow ( );
    long getFirstColumn ( );
    long getLastColumn ( );
    HRESULT setRange (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn );
    HRESULT setRange_2 (
        _bstr_t range );
    HRESULT addCondition (
        struct IExcelCondition * condition );
    HRESULT addCondition_2 (
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula );
    HRESULT addCondition_3 (
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    HRESULT addCondition_4 (
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground,
        long background );
    HRESULT addCondition_5 (
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        long background );
    HRESULT insertCondition (
        long index,
        struct IExcelCondition * condition );
    long ConditionCount ( );
    HRESULT removeCondition (
        long index );
    IExcelConditionPtr getConditionAt (
        long index );
    _bstr_t getRange ( );
    IExcelConditionalFormattingPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setFirstRow (
        /*[in]*/ long firstRow ) = 0;
      virtual HRESULT __stdcall raw_setFirstColumn (
        /*[in]*/ long firstColumn ) = 0;
      virtual HRESULT __stdcall raw_setLastRow (
        /*[in]*/ long lastRow ) = 0;
      virtual HRESULT __stdcall raw_setLastColumn (
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_getFirstRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLastRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFirstColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLastColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRange (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_setRange_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_addCondition (
        /*[in]*/ struct IExcelCondition * condition ) = 0;
      virtual HRESULT __stdcall raw_addCondition_2 (
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula ) = 0;
      virtual HRESULT __stdcall raw_addCondition_3 (
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_addCondition_4 (
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground,
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_addCondition_5 (
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_insertCondition (
        /*[in]*/ long index,
        /*[in]*/ struct IExcelCondition * condition ) = 0;
      virtual HRESULT __stdcall raw_ConditionCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeCondition (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_getConditionAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelCondition * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRange (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelConditionalFormatting * * pRetVal ) = 0;
};

struct __declspec(uuid("bc0f9dde-5ada-346f-9d1d-82e50d24b121"))
ExcelCondition;
    // interface _Object
    // [ default ] interface IExcelCondition

struct __declspec(uuid("81fd1c59-fc05-40e5-abc8-6309e8785837"))
IExcelArrayFormula : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long getFirstRow ( );
    long getLastRow ( );
    long getFirstColumn ( );
    long getLastColumn ( );
    long getRowsNumber ( );
    long getColsNumber ( );
    _bstr_t getFormula ( );
    HRESULT setFormula (
        _bstr_t Formula );
    IExcelArrayFormulaPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFirstRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLastRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFirstColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLastColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRowsNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getColsNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFormula (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFormula (
        /*[in]*/ BSTR Formula ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelArrayFormula * * pRetVal ) = 0;
};

struct __declspec(uuid("85bdc5f9-da18-4b14-a5ef-df7a149ca3ad"))
ExcelArrayFormula;
    // interface _Object
    // [ default ] interface IExcelArrayFormula

struct __declspec(uuid("6e7c7ff4-fb96-3c96-abbf-0deaff4f22dc"))
IFormula : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsFunction (
        _bstr_t token );
    VARIANT_BOOL IsArray (
        _bstr_t sValue );
    SAFEARRAY * get3DCellElements (
        _bstr_t sCellReference );
    SAFEARRAY * get3DCellElementsR1C1style (
        _bstr_t sCellReference,
        long formulaRow,
        long formulaColumn );
    SAFEARRAY * get3DRangeElements (
        _bstr_t sRange );
    SAFEARRAY * get3DRangeElementsR1C1style (
        _bstr_t sRange,
        long formulaRow,
        long formulaColumn );
    SAFEARRAY * get3DColumnRangeElementsR1C1style (
        _bstr_t sRange,
        long formulaRow,
        long formulaColumn );
    SAFEARRAY * get3DRowRangeElementsR1C1style (
        _bstr_t sRange,
        long formulaRow,
        long formulaColumn );
    IFormulaResultPtr computeFormula (
        _bstr_t sFormula,
        const _variant_t & currentWorksheet_arg,
        const _variant_t & formulaWorksheet_arg,
        long formulaRow,
        long formulaColumn );
    VARIANT_BOOL IsName (
        _bstr_t sValue );
    VARIANT_BOOL Is3DName (
        _bstr_t value );
    IExcelNamePtr getExcelName (
        _bstr_t sName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsFunction (
        /*[in]*/ BSTR token,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsArray (
        /*[in]*/ BSTR sValue,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_get3DCellElements (
        /*[in]*/ BSTR sCellReference,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_get3DCellElementsR1C1style (
        /*[in]*/ BSTR sCellReference,
        /*[in]*/ long formulaRow,
        /*[in]*/ long formulaColumn,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_get3DRangeElements (
        /*[in]*/ BSTR sRange,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_get3DRangeElementsR1C1style (
        /*[in]*/ BSTR sRange,
        /*[in]*/ long formulaRow,
        /*[in]*/ long formulaColumn,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_get3DColumnRangeElementsR1C1style (
        /*[in]*/ BSTR sRange,
        /*[in]*/ long formulaRow,
        /*[in]*/ long formulaColumn,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_get3DRowRangeElementsR1C1style (
        /*[in]*/ BSTR sRange,
        /*[in]*/ long formulaRow,
        /*[in]*/ long formulaColumn,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_computeFormula (
        /*[in]*/ BSTR sFormula,
        /*[in]*/ VARIANT currentWorksheet_arg,
        /*[in]*/ VARIANT formulaWorksheet_arg,
        /*[in]*/ long formulaRow,
        /*[in]*/ long formulaColumn,
        /*[out,retval]*/ struct IFormulaResult * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsName (
        /*[in]*/ BSTR sValue,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Is3DName (
        /*[in]*/ BSTR value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getExcelName (
        /*[in]*/ BSTR sName,
        /*[out,retval]*/ struct IExcelName * * pRetVal ) = 0;
};

struct __declspec(uuid("828cf291-873d-35e4-b51c-2afc8927859c"))
Formula;
    // interface _Object
    // [ default ] interface IFormula

struct __declspec(uuid("55eb7646-e7c8-3b7e-8b10-5c4765422603"))
ExcelConditionalFormatting;
    // interface _Object
    // [ default ] interface IExcelConditionalFormatting

struct __declspec(uuid("7e535428-0376-3633-a302-7b574f8f6330"))
IExcelHeader : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getHeaderString ( );
    HRESULT setHeaderString (
        _bstr_t text );
    _bstr_t getPosition ( );
    HRESULT setPosition (
        _bstr_t position );
    HRESULT InsertValue (
        _bstr_t value );
    HRESULT InsertFont (
        _bstr_t fontType );
    HRESULT InsertFontSize (
        long fontSize );
    HRESULT InsertSingleUnderline ( );
    HRESULT RemoveSingleUnderline ( );
    HRESULT InsertDoubleUnderline ( );
    HRESULT RemoveDoubleUnderline ( );
    HRESULT InsertStrikethrough ( );
    HRESULT RemoveStrikethrough ( );
    HRESULT InsertSuperscript ( );
    HRESULT RemoveSuperscript ( );
    HRESULT InsertSubscript ( );
    HRESULT RemoveSubscript ( );
    HRESULT InsertBold ( );
    HRESULT RemoveBold ( );
    HRESULT InsertItalic ( );
    HRESULT RemoveItalic ( );
    HRESULT InsertPage ( );
    HRESULT InsertPages ( );
    HRESULT InsertDate ( );
    HRESULT InsertTime ( );
    HRESULT InsertFile ( );
    HRESULT InsertTab ( );
    HRESULT InsertEnter ( );
    HRESULT Reset ( );
    IExcelHeaderPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getHeaderString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeaderString (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getPosition (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPosition (
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_InsertValue (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_InsertFont (
        /*[in]*/ BSTR fontType ) = 0;
      virtual HRESULT __stdcall raw_InsertFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_InsertSingleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSingleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_InsertDoubleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveDoubleUnderline ( ) = 0;
      virtual HRESULT __stdcall raw_InsertStrikethrough ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveStrikethrough ( ) = 0;
      virtual HRESULT __stdcall raw_InsertSuperscript ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSuperscript ( ) = 0;
      virtual HRESULT __stdcall raw_InsertSubscript ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubscript ( ) = 0;
      virtual HRESULT __stdcall raw_InsertBold ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveBold ( ) = 0;
      virtual HRESULT __stdcall raw_InsertItalic ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItalic ( ) = 0;
      virtual HRESULT __stdcall raw_InsertPage ( ) = 0;
      virtual HRESULT __stdcall raw_InsertPages ( ) = 0;
      virtual HRESULT __stdcall raw_InsertDate ( ) = 0;
      virtual HRESULT __stdcall raw_InsertTime ( ) = 0;
      virtual HRESULT __stdcall raw_InsertFile ( ) = 0;
      virtual HRESULT __stdcall raw_InsertTab ( ) = 0;
      virtual HRESULT __stdcall raw_InsertEnter ( ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelHeader * * pRetVal ) = 0;
};

struct __declspec(uuid("35b30884-93d0-4fbc-b038-993dab2694ae"))
ExternalLinks;
    // interface _Object
    // [ default ] interface IExternalLinks

struct __declspec(uuid("50e99b26-77fa-4e22-95d5-64f11f1d8e57"))
IExcelDataGroup : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setFirstRow (
        long firstRow );
    long getFirstRow ( );
    HRESULT setLastRow (
        long lastRow );
    long getLastRow ( );
    HRESULT setFirstColumn (
        long firstColumn );
    long getFirstColumn ( );
    HRESULT setLastColumn (
        long lastColumn );
    long getLastColumn ( );
    HRESULT setRange (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn );
    HRESULT setRange_2 (
        _bstr_t range );
    long getGroupType ( );
    HRESULT setGroupType (
        long groupRowsColumns );
    VARIANT_BOOL isCollapsed ( );
    HRESULT setCollapsed (
        VARIANT_BOOL isCollapsed );
    IExcelAutoFormatPtr getAutoFormat ( );
    HRESULT setAutoFormat (
        struct IExcelAutoFormat * xlsAutoFormat );
    IExcelDataGroupPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setFirstRow (
        /*[in]*/ long firstRow ) = 0;
      virtual HRESULT __stdcall raw_getFirstRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastRow (
        /*[in]*/ long lastRow ) = 0;
      virtual HRESULT __stdcall raw_getLastRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstColumn (
        /*[in]*/ long firstColumn ) = 0;
      virtual HRESULT __stdcall raw_getFirstColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastColumn (
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_getLastColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRange (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_setRange_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_getGroupType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGroupType (
        /*[in]*/ long groupRowsColumns ) = 0;
      virtual HRESULT __stdcall raw_isCollapsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCollapsed (
        /*[in]*/ VARIANT_BOOL isCollapsed ) = 0;
      virtual HRESULT __stdcall raw_getAutoFormat (
        /*[out,retval]*/ struct IExcelAutoFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutoFormat (
        /*[in]*/ struct IExcelAutoFormat * xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelDataGroup * * pRetVal ) = 0;
};

struct __declspec(uuid("88c818bc-8049-4531-ad3c-07017c0aab6a"))
ExcelDataGroup;
    // interface _Object
    // [ default ] interface IExcelDataGroup

struct __declspec(uuid("e5181cae-ca8a-35a6-98a8-5ef367963175"))
ExcelRow;
    // interface _Object
    // [ default ] interface IExcelRow

struct __declspec(uuid("70655755-12f0-3dcc-8401-02acc40b0c5a"))
ExcelHeader;
    // interface _Object
    // [ default ] interface IExcelHeader

struct __declspec(uuid("af805196-0b9a-3c5a-bb49-b2d63a05fd08"))
ExcelSheet;
    // interface _Object
    // [ default ] interface IExcelSheet

struct __declspec(uuid("7083da59-ec51-3966-8b76-026adfc73aee"))
IExcelDataValidator : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long getValidationType ( );
    HRESULT setValidationType (
        long validationType );
    long getErrorStyle ( );
    HRESULT setErrorStyle (
        long errorStyle );
    VARIANT_BOOL IgnoreBlank ( );
    HRESULT setIgnoreBlank (
        VARIANT_BOOL IgnoreBlank );
    VARIANT_BOOL IsShowInputBox ( );
    HRESULT setIsShowInputBox (
        VARIANT_BOOL showInputBox );
    VARIANT_BOOL IsShowErrorBox ( );
    HRESULT setIsShowErrorBox (
        VARIANT_BOOL showErrorBox );
    long getOperatorType ( );
    HRESULT setOperatorType (
        long operatorType );
    long getFirstRow ( );
    HRESULT setFirstRow (
        long firstRow );
    long getLastRow ( );
    HRESULT setLastRow (
        long lastRow );
    long getFirstColumn ( );
    HRESULT setFirstColumn (
        long firstColumn );
    long getLastColumn ( );
    HRESULT setLastColumn (
        long lastColumn );
    HRESULT ApplyToRange (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn );
    HRESULT ApplyToRange_2 (
        _bstr_t range );
    _bstr_t getFirstFormula ( );
    HRESULT setFirstFormula (
        _bstr_t Formula );
    _bstr_t getSecondFormula ( );
    HRESULT setSecondFormula (
        _bstr_t Formula );
    HRESULT setInputTitle (
        _bstr_t inputTitle );
    _bstr_t getInputTitle ( );
    HRESULT setErrorTitle (
        _bstr_t errorTitle );
    _bstr_t getErrorTitle ( );
    HRESULT setInputText (
        _bstr_t inputText );
    _bstr_t getInputText ( );
    HRESULT setErrorText (
        _bstr_t textError );
    _bstr_t getErrorText ( );
    HRESULT setInputMessage (
        _bstr_t title,
        _bstr_t text );
    HRESULT setErrorAlert (
        _bstr_t title,
        _bstr_t text );
    IExcelDataValidatorPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getValidationType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setValidationType (
        /*[in]*/ long validationType ) = 0;
      virtual HRESULT __stdcall raw_getErrorStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setErrorStyle (
        /*[in]*/ long errorStyle ) = 0;
      virtual HRESULT __stdcall raw_IgnoreBlank (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIgnoreBlank (
        /*[in]*/ VARIANT_BOOL IgnoreBlank ) = 0;
      virtual HRESULT __stdcall raw_IsShowInputBox (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIsShowInputBox (
        /*[in]*/ VARIANT_BOOL showInputBox ) = 0;
      virtual HRESULT __stdcall raw_IsShowErrorBox (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIsShowErrorBox (
        /*[in]*/ VARIANT_BOOL showErrorBox ) = 0;
      virtual HRESULT __stdcall raw_getOperatorType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setOperatorType (
        /*[in]*/ long operatorType ) = 0;
      virtual HRESULT __stdcall raw_getFirstRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstRow (
        /*[in]*/ long firstRow ) = 0;
      virtual HRESULT __stdcall raw_getLastRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastRow (
        /*[in]*/ long lastRow ) = 0;
      virtual HRESULT __stdcall raw_getFirstColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstColumn (
        /*[in]*/ long firstColumn ) = 0;
      virtual HRESULT __stdcall raw_getLastColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastColumn (
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_ApplyToRange (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_ApplyToRange_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_getFirstFormula (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstFormula (
        /*[in]*/ BSTR Formula ) = 0;
      virtual HRESULT __stdcall raw_getSecondFormula (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSecondFormula (
        /*[in]*/ BSTR Formula ) = 0;
      virtual HRESULT __stdcall raw_setInputTitle (
        /*[in]*/ BSTR inputTitle ) = 0;
      virtual HRESULT __stdcall raw_getInputTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setErrorTitle (
        /*[in]*/ BSTR errorTitle ) = 0;
      virtual HRESULT __stdcall raw_getErrorTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setInputText (
        /*[in]*/ BSTR inputText ) = 0;
      virtual HRESULT __stdcall raw_getInputText (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setErrorText (
        /*[in]*/ BSTR textError ) = 0;
      virtual HRESULT __stdcall raw_getErrorText (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setInputMessage (
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_setErrorAlert (
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelDataValidator * * pRetVal ) = 0;
};

struct __declspec(uuid("9e6c2fd0-c4a7-3cfc-a920-3d3b4c7da563"))
ExcelDataValidator;
    // interface _Object
    // [ default ] interface IExcelDataValidator

struct __declspec(uuid("1b1c448d-6ee6-33ce-8f74-4c19d2ec9c75"))
IExcelPageSetup : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT easy_setPrintArea (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    HRESULT easy_setPrintArea_2 (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn,
        VARIANT_BOOL IsR1C1ReferenceStyle );
    HRESULT easy_setPrintArea_3 (
        _bstr_t range );
    _bstr_t easy_getPrintArea ( );
    HRESULT easy_removePrintArea ( );
    HRESULT easy_setRowsToRepeatAtTop (
        long startRow,
        long endRow );
    HRESULT easy_setRowsToRepeatAtTop_2 (
        long startRow,
        long endRow,
        VARIANT_BOOL IsR1C1ReferenceStyle );
    HRESULT easy_setRowsToRepeatAtTop_3 (
        _bstr_t rowRange );
    _bstr_t easy_getRowsToRepeatAtTop ( );
    _bstr_t easy_getColumnsToRepeatAtLeft ( );
    HRESULT easy_setColumnsToRepeatAtLeft (
        long startColumn,
        long endColumn );
    HRESULT easy_setColumnsToRepeatAtLeft_2 (
        long startColumn,
        long endColumn,
        VARIANT_BOOL IsR1C1ReferenceStyle );
    HRESULT easy_setColumnsToRepeatAtLeft_3 (
        _bstr_t columnRange );
    _bstr_t getOrientation ( );
    HRESULT setOrientation (
        _bstr_t orientation );
    long getPaperSize ( );
    HRESULT setPaperSize (
        long paperSize );
    long getScalingFactor ( );
    HRESULT setScalingFactor (
        long scalingFactor );
    long getFitToPagesWidth ( );
    HRESULT setFitToPagesWidth (
        long value );
    long getFitToPagesHeight ( );
    HRESULT setFitToPagesHeight (
        long value );
    long getFirstPageNumber ( );
    HRESULT setFirstPageNumber (
        long firstPageNumber );
    double getTopMargin ( );
    HRESULT setTopMargin (
        double topMargin );
    double getBottomMargin ( );
    HRESULT setBottomMargin (
        double bottomMargin );
    double getLeftMargin ( );
    HRESULT setLeftMargin (
        double leftMargin );
    double getRightMargin ( );
    HRESULT setRightMargin (
        double rightMargin );
    double getHeaderMargin ( );
    HRESULT setHeaderMargin (
        double headerMargin );
    double getFooterMargin ( );
    HRESULT setFooterMargin (
        double footerMargin );
    VARIANT_BOOL CenterHorizontally ( );
    HRESULT setCenterHorizontally (
        VARIANT_BOOL isCenterHorizontally );
    VARIANT_BOOL CenterVertically ( );
    HRESULT setCenterVertically (
        VARIANT_BOOL isCenterVertically );
    VARIANT_BOOL PrintGridlines ( );
    HRESULT setPrintGridlines (
        VARIANT_BOOL PrintGridlines );
    VARIANT_BOOL PrintBlackAndWhite ( );
    HRESULT setPrintBlackAndWhite (
        VARIANT_BOOL PrintBlackAndWhite );
    VARIANT_BOOL PrintDraftQuality ( );
    HRESULT setPrintDraftQuality (
        VARIANT_BOOL PrintDraftQuality );
    VARIANT_BOOL PrintRowAndColumnHeadings ( );
    HRESULT setPrintRowAndColumnHeadings (
        VARIANT_BOOL PrintRowAndColumnHeadings );
    long getPrintComments ( );
    HRESULT setPrintComments (
        long position );
    long getPageOrder ( );
    HRESULT setPageOrder (
        long pageOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_easy_setPrintArea (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn ) = 0;
      virtual HRESULT __stdcall raw_easy_setPrintArea_2 (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[in]*/ VARIANT_BOOL IsR1C1ReferenceStyle ) = 0;
      virtual HRESULT __stdcall raw_easy_setPrintArea_3 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_easy_getPrintArea (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removePrintArea ( ) = 0;
      virtual HRESULT __stdcall raw_easy_setRowsToRepeatAtTop (
        /*[in]*/ long startRow,
        /*[in]*/ long endRow ) = 0;
      virtual HRESULT __stdcall raw_easy_setRowsToRepeatAtTop_2 (
        /*[in]*/ long startRow,
        /*[in]*/ long endRow,
        /*[in]*/ VARIANT_BOOL IsR1C1ReferenceStyle ) = 0;
      virtual HRESULT __stdcall raw_easy_setRowsToRepeatAtTop_3 (
        /*[in]*/ BSTR rowRange ) = 0;
      virtual HRESULT __stdcall raw_easy_getRowsToRepeatAtTop (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getColumnsToRepeatAtLeft (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setColumnsToRepeatAtLeft (
        /*[in]*/ long startColumn,
        /*[in]*/ long endColumn ) = 0;
      virtual HRESULT __stdcall raw_easy_setColumnsToRepeatAtLeft_2 (
        /*[in]*/ long startColumn,
        /*[in]*/ long endColumn,
        /*[in]*/ VARIANT_BOOL IsR1C1ReferenceStyle ) = 0;
      virtual HRESULT __stdcall raw_easy_setColumnsToRepeatAtLeft_3 (
        /*[in]*/ BSTR columnRange ) = 0;
      virtual HRESULT __stdcall raw_getOrientation (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setOrientation (
        /*[in]*/ BSTR orientation ) = 0;
      virtual HRESULT __stdcall raw_getPaperSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPaperSize (
        /*[in]*/ long paperSize ) = 0;
      virtual HRESULT __stdcall raw_getScalingFactor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setScalingFactor (
        /*[in]*/ long scalingFactor ) = 0;
      virtual HRESULT __stdcall raw_getFitToPagesWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFitToPagesWidth (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getFitToPagesHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFitToPagesHeight (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getFirstPageNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstPageNumber (
        /*[in]*/ long firstPageNumber ) = 0;
      virtual HRESULT __stdcall raw_getTopMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopMargin (
        /*[in]*/ double topMargin ) = 0;
      virtual HRESULT __stdcall raw_getBottomMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomMargin (
        /*[in]*/ double bottomMargin ) = 0;
      virtual HRESULT __stdcall raw_getLeftMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftMargin (
        /*[in]*/ double leftMargin ) = 0;
      virtual HRESULT __stdcall raw_getRightMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightMargin (
        /*[in]*/ double rightMargin ) = 0;
      virtual HRESULT __stdcall raw_getHeaderMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeaderMargin (
        /*[in]*/ double headerMargin ) = 0;
      virtual HRESULT __stdcall raw_getFooterMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFooterMargin (
        /*[in]*/ double footerMargin ) = 0;
      virtual HRESULT __stdcall raw_CenterHorizontally (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCenterHorizontally (
        /*[in]*/ VARIANT_BOOL isCenterHorizontally ) = 0;
      virtual HRESULT __stdcall raw_CenterVertically (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCenterVertically (
        /*[in]*/ VARIANT_BOOL isCenterVertically ) = 0;
      virtual HRESULT __stdcall raw_PrintGridlines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintGridlines (
        /*[in]*/ VARIANT_BOOL PrintGridlines ) = 0;
      virtual HRESULT __stdcall raw_PrintBlackAndWhite (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintBlackAndWhite (
        /*[in]*/ VARIANT_BOOL PrintBlackAndWhite ) = 0;
      virtual HRESULT __stdcall raw_PrintDraftQuality (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintDraftQuality (
        /*[in]*/ VARIANT_BOOL PrintDraftQuality ) = 0;
      virtual HRESULT __stdcall raw_PrintRowAndColumnHeadings (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintRowAndColumnHeadings (
        /*[in]*/ VARIANT_BOOL PrintRowAndColumnHeadings ) = 0;
      virtual HRESULT __stdcall raw_getPrintComments (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintComments (
        /*[in]*/ long position ) = 0;
      virtual HRESULT __stdcall raw_getPageOrder (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPageOrder (
        /*[in]*/ long pageOrder ) = 0;
};

struct __declspec(uuid("e60be4c6-16f8-33e7-bb22-49a837f79e08"))
ExcelPageSetup;
    // interface _Object
    // [ default ] interface IExcelPageSetup

struct __declspec(uuid("94630ead-0167-4230-bc5e-9edeff8a8e62"))
IExcelFilter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setAutoFilter (
        VARIANT_BOOL isAutoFilter );
    HRESULT setAutoFilter_2 (
        _bstr_t listRange );
    VARIANT_BOOL isAutoFilter ( );
    HRESULT setAdvancedFilter (
        _bstr_t listRange,
        _bstr_t criteriaRange,
        _bstr_t copyTo );
    HRESULT setListRange (
        _bstr_t listRange );
    _bstr_t getListRange ( );
    HRESULT setCriteriaRange (
        _bstr_t criteriaRange );
    _bstr_t getCriteriaRange ( );
    HRESULT setCopyTo (
        _bstr_t copyTo );
    _bstr_t getCopyTo ( );
    HRESULT removeFilter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setAutoFilter (
        /*[in]*/ VARIANT_BOOL isAutoFilter ) = 0;
      virtual HRESULT __stdcall raw_setAutoFilter_2 (
        /*[in]*/ BSTR listRange ) = 0;
      virtual HRESULT __stdcall raw_isAutoFilter (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAdvancedFilter (
        /*[in]*/ BSTR listRange,
        /*[in]*/ BSTR criteriaRange,
        /*[in]*/ BSTR copyTo ) = 0;
      virtual HRESULT __stdcall raw_setListRange (
        /*[in]*/ BSTR listRange ) = 0;
      virtual HRESULT __stdcall raw_getListRange (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCriteriaRange (
        /*[in]*/ BSTR criteriaRange ) = 0;
      virtual HRESULT __stdcall raw_getCriteriaRange (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCopyTo (
        /*[in]*/ BSTR copyTo ) = 0;
      virtual HRESULT __stdcall raw_getCopyTo (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeFilter ( ) = 0;
};

struct __declspec(uuid("5253ae6d-0cfc-3df7-ae24-0852a52c1817"))
IExcelHyperlink : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setPosition (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn );
    HRESULT setPosition_2 (
        _bstr_t position );
    long getFirstRow ( );
    HRESULT setFirstRow (
        long value );
    long getLastRow ( );
    HRESULT setLastRow (
        long value );
    long getFirstColumn ( );
    HRESULT setFirstColumn (
        long value );
    long getLastColumn ( );
    HRESULT setLastColumn (
        long value );
    _bstr_t getDescription ( );
    HRESULT setDescription (
        _bstr_t value );
    _bstr_t getURL ( );
    HRESULT setURL (
        _bstr_t value );
    _bstr_t getTextMark ( );
    HRESULT setTextMark (
        _bstr_t value );
    _bstr_t getToolTip ( );
    HRESULT setToolTip (
        _bstr_t value );
    _bstr_t getHyperlinkType ( );
    HRESULT setHyperlinkType (
        _bstr_t hyperlinkType );
    HRESULT setHyperlink (
        _bstr_t hyperlinkType,
        _bstr_t hyperlink );
    IExcelHyperlinkPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setPosition (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_setPosition_2 (
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_getFirstRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstRow (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getLastRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastRow (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getFirstColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstColumn (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getLastColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLastColumn (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDescription (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_getURL (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setURL (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_getTextMark (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextMark (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_getToolTip (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setToolTip (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_getHyperlinkType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHyperlinkType (
        /*[in]*/ BSTR hyperlinkType ) = 0;
      virtual HRESULT __stdcall raw_setHyperlink (
        /*[in]*/ BSTR hyperlinkType,
        /*[in]*/ BSTR hyperlink ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelHyperlink * * pRetVal ) = 0;
};

struct __declspec(uuid("9f93903a-80e0-3ab2-8d35-febfd01f3716"))
ExcelHyperlink;
    // interface _Object
    // [ default ] interface IExcelHyperlink

struct __declspec(uuid("57034dba-932d-4909-a9cc-30ccc9436bb3"))
ExcelFilter;
    // interface _Object
    // [ default ] interface IExcelFilter

struct __declspec(uuid("d87a94a1-cfc9-3820-9d99-5bed66178087"))
ExcelCell;
    // interface _Object
    // [ default ] interface IExcelCell

struct __declspec(uuid("8bcad5ae-3ec8-3992-a16d-f882f58780b0"))
UnknownSheet;
    // interface _Object
    // interface IExcelSheet
    // [ default ] interface IUnknownSheet

struct __declspec(uuid("485f0f1f-03fe-3963-a22a-855e19e3fe6a"))
ExcelWorksheet;
    // interface _Object
    // interface IExcelSheet
    // [ default ] interface IExcelWorksheet

struct __declspec(uuid("f8bf86ff-a8fb-487c-adcb-a9bf2dadd4d3"))
ExcelOptions;
    // interface _Object
    // [ default ] interface IExcelOptions

struct __declspec(uuid("dc78dbd1-2a45-3bf3-ae4d-e1952358aaaa"))
ExcelChartSheet;
    // interface _Object
    // interface IExcelSheet
    // [ default ] interface IExcelChartSheet

struct __declspec(uuid("ea483c39-2cf6-43fa-b5ef-dfde627eff29"))
DrawingObject2D;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // [ default ] interface IDrawingObject2D

struct __declspec(uuid("3e8c0efd-68d5-3cbd-b424-a9987e060693"))
ExcelChartLegend;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // [ default ] interface IExcelChartLegend

struct __declspec(uuid("cf4b40bd-6d3b-4ad8-9eea-a347e70ff7ad"))
FontDrawingObject;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // [ default ] interface IFontDrawingObject

struct __declspec(uuid("199ac4b3-1d39-4b12-a320-d6c122dca4ac"))
ExcelDataLabels;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // interface IAlignDrawingObject
    // [ default ] interface IExcelDataLabels

struct __declspec(uuid("cd136046-ddd7-443e-b24f-761dfe31e05e"))
AlignDrawingObject;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // [ default ] interface IAlignDrawingObject

struct __declspec(uuid("57d5a78a-0179-4c2d-a71f-7ab04535b344"))
ExcelTitle;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // interface IAlignDrawingObject
    // [ default ] interface IExcelTitle

struct __declspec(uuid("2398e0f8-6208-316e-a68c-29d8a68a92d3"))
ExcelAxis;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // interface IAlignDrawingObject
    // [ default ] interface IExcelAxis

struct __declspec(uuid("d704910e-7601-3ac8-aeab-bd73159f5d8c"))
ExcelDataTable;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // [ default ] interface IExcelDataTable

struct __declspec(uuid("5f30d755-c22e-30bf-a4da-bceddd569c36"))
ExcelSeries;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // [ default ] interface IExcelSeries

struct __declspec(uuid("23ac6b75-ef83-4ba2-aa98-300de91b8fd7"))
EffectDrawingObject;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // [ default ] interface IEffectDrawingObject

struct __declspec(uuid("04fa486d-0d66-374f-805f-be1cd334f72d"))
ExcelPlotArea;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // [ default ] interface IExcelPlotArea

struct __declspec(uuid("06128529-59f4-3161-9073-9ad2177c21aa"))
ExcelChartGridlines;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // [ default ] interface IExcelChartGridlines

struct __declspec(uuid("ffd0033a-8c15-4ff0-aee8-e77203f604c3"))
LineDrawingObject;
    // interface _Object
    // interface IDrawingObject
    // [ default ] interface ILineDrawingObject

struct __declspec(uuid("287725b7-7ec0-3284-8ad6-31a7296a4b0a"))
ExcelChartArea;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IEffectDrawingObject
    // interface IFontDrawingObject
    // [ default ] interface IExcelChartArea

struct __declspec(uuid("60e73b4b-2ddd-4dbc-a56a-ac818cf7c28d"))
IFormat3D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getTopBevel ( );
    HRESULT setTopBevel (
        _bstr_t bevel );
    float getTopBevelWidth ( );
    HRESULT setTopBevelWidth (
        float width );
    float getTopBevelHeight ( );
    HRESULT setTopBevelHeight (
        float height );
    _bstr_t getBottomBevel ( );
    HRESULT setBottomBevel (
        _bstr_t bevel );
    float getBottomBevelWidth ( );
    HRESULT setBottomBevelWidth (
        float width );
    float getBottomBevelHeight ( );
    HRESULT setBottomBevelHeight (
        float height );
    _bstr_t getMaterial ( );
    HRESULT setMaterial (
        _bstr_t material );
    _bstr_t getLighting ( );
    HRESULT setLighting (
        _bstr_t lighting );
    float getLightAngle ( );
    HRESULT setLightAngle (
        float angle );
    IFormat3DPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getTopBevel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopBevel (
        /*[in]*/ BSTR bevel ) = 0;
      virtual HRESULT __stdcall raw_getTopBevelWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopBevelWidth (
        /*[in]*/ float width ) = 0;
      virtual HRESULT __stdcall raw_getTopBevelHeight (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopBevelHeight (
        /*[in]*/ float height ) = 0;
      virtual HRESULT __stdcall raw_getBottomBevel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomBevel (
        /*[in]*/ BSTR bevel ) = 0;
      virtual HRESULT __stdcall raw_getBottomBevelWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomBevelWidth (
        /*[in]*/ float width ) = 0;
      virtual HRESULT __stdcall raw_getBottomBevelHeight (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomBevelHeight (
        /*[in]*/ float height ) = 0;
      virtual HRESULT __stdcall raw_getMaterial (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMaterial (
        /*[in]*/ BSTR material ) = 0;
      virtual HRESULT __stdcall raw_getLighting (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLighting (
        /*[in]*/ BSTR lighting ) = 0;
      virtual HRESULT __stdcall raw_getLightAngle (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLightAngle (
        /*[in]*/ float angle ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
};

struct __declspec(uuid("ee2fc913-bcf1-431a-b19b-ffb509a0bf48"))
IAlignmentFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setTextDirectionHorizontal (
        _bstr_t verticalAlignment,
        long angle );
    HRESULT setTextDirectionRotate90Degrees (
        _bstr_t horizontalAlignment );
    HRESULT setTextDirectionRotate270Degrees (
        _bstr_t horizontalAlignment );
    HRESULT setTextDirectionStacked (
        _bstr_t horizontalAlignment,
        VARIANT_BOOL isLeftToRight );
    _bstr_t getHorizontalAlignment ( );
    _bstr_t getVerticalAlignment ( );
    long getTextAngle ( );
    VARIANT_BOOL isLeftToRight ( );
    IAlignmentFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setTextDirectionHorizontal (
        /*[in]*/ BSTR verticalAlignment,
        /*[in]*/ long angle ) = 0;
      virtual HRESULT __stdcall raw_setTextDirectionRotate90Degrees (
        /*[in]*/ BSTR horizontalAlignment ) = 0;
      virtual HRESULT __stdcall raw_setTextDirectionRotate270Degrees (
        /*[in]*/ BSTR horizontalAlignment ) = 0;
      virtual HRESULT __stdcall raw_setTextDirectionStacked (
        /*[in]*/ BSTR horizontalAlignment,
        /*[in]*/ VARIANT_BOOL isLeftToRight ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTextAngle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_isLeftToRight (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IAlignmentFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("ecfd0a43-712e-4a23-ae64-fd7bd42dc9da"))
IFontFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL IsHeadingsFont ( );
    HRESULT setHeadingsFont ( );
    VARIANT_BOOL IsBodyFont ( );
    HRESULT setBodyFont ( );
    VARIANT_BOOL IsAutomaticFont ( );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    VARIANT_BOOL IsAutomaticFontStyle ( );
    float getFontSize ( );
    HRESULT setFontSize (
        float fontSize );
    VARIANT_BOOL IsAutomaticFontSize ( );
    HRESULT setFontSettings (
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    HRESULT setFontSettings_2 (
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        const _variant_t & foreground );
    long getForeground ( );
    HRESULT setForeground (
        long foreground );
    IThemeColorPtr getForegroundThemeColor ( );
    HRESULT setForeground_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL IsAutomaticForeground ( );
    HRESULT setAutomaticForeground (
        VARIANT_BOOL isAutomatic );
    _bstr_t getUnderlineStyle ( );
    long getUnderlineColor ( );
    IThemeColorPtr getUnderlineThemeColor ( );
    VARIANT_BOOL IsAutomaticUnderlineColor ( );
    HRESULT setUnderlineSettings (
        _bstr_t UnderlineStyle,
        VARIANT_BOOL isAutomaticColor );
    HRESULT setUnderlineSettings_2 (
        _bstr_t UnderlineStyle,
        long color );
    HRESULT setUnderlineSettings_3 (
        _bstr_t UnderlineStyle,
        const _variant_t & color );
    VARIANT_BOOL IsAutomaticUnderline ( );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsAutomaticStrikethrough ( );
    VARIANT_BOOL IsDoubleStrikethrough ( );
    HRESULT setDoubleStrikethrough (
        VARIANT_BOOL IsDoubleStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    HRESULT setSuperscript_2 (
        VARIANT_BOOL IsSuperscript,
        long offset );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    HRESULT setSubscript_2 (
        VARIANT_BOOL IsSubscript,
        long offset );
    long getOffset ( );
    VARIANT_BOOL IsAutomaticSuperscriptSubscript ( );
    VARIANT_BOOL IsSmallCaps ( );
    HRESULT setSmallCaps (
        VARIANT_BOOL IsSmallCaps );
    VARIANT_BOOL IsAllCaps ( );
    HRESULT setAllCaps (
        VARIANT_BOOL IsAllCaps );
    VARIANT_BOOL IsAutomaticCaps ( );
    VARIANT_BOOL IsEqualizeCharacterHeight ( );
    HRESULT setEqualizeCharacterHeight (
        VARIANT_BOOL IsEqualizeCharacterHeight );
    VARIANT_BOOL IsAutomaticEqualizeCharacterHeight ( );
    _bstr_t getSpacingType ( );
    HRESULT setCharacterSpacing (
        _bstr_t type,
        float spacingBy );
    float getSpacingBy ( );
    VARIANT_BOOL IsAutomaticCharacterSpacing ( );
    float getKerningForFonts ( );
    HRESULT setKerningForFonts (
        float points );
    VARIANT_BOOL IsAutomaticKerningForFonts ( );
    IFontFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_IsHeadingsFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeadingsFont ( ) = 0;
      virtual HRESULT __stdcall raw_IsBodyFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBodyFont ( ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticFontStyle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ float fontSize ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticFontSize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSettings (
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_setFontSettings_2 (
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ VARIANT foreground ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_getForegroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticForeground (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticForeground (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticUnderlineColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineSettings (
        /*[in]*/ BSTR UnderlineStyle,
        /*[in]*/ VARIANT_BOOL isAutomaticColor ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineSettings_2 (
        /*[in]*/ BSTR UnderlineStyle,
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineSettings_3 (
        /*[in]*/ BSTR UnderlineStyle,
        /*[in]*/ VARIANT color ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticUnderline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsDoubleStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDoubleStrikethrough (
        /*[in]*/ VARIANT_BOOL IsDoubleStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript_2 (
        /*[in]*/ VARIANT_BOOL IsSuperscript,
        /*[in]*/ long offset ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_setSubscript_2 (
        /*[in]*/ VARIANT_BOOL IsSubscript,
        /*[in]*/ long offset ) = 0;
      virtual HRESULT __stdcall raw_getOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticSuperscriptSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsSmallCaps (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSmallCaps (
        /*[in]*/ VARIANT_BOOL IsSmallCaps ) = 0;
      virtual HRESULT __stdcall raw_IsAllCaps (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllCaps (
        /*[in]*/ VARIANT_BOOL IsAllCaps ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticCaps (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEqualizeCharacterHeight (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setEqualizeCharacterHeight (
        /*[in]*/ VARIANT_BOOL IsEqualizeCharacterHeight ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticEqualizeCharacterHeight (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSpacingType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCharacterSpacing (
        /*[in]*/ BSTR type,
        /*[in]*/ float spacingBy ) = 0;
      virtual HRESULT __stdcall raw_getSpacingBy (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticCharacterSpacing (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getKerningForFonts (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setKerningForFonts (
        /*[in]*/ float points ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticKerningForFonts (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("3e349d35-6fe4-4317-8a4a-8a2cc42cc1a7"))
FontFormat;
    // interface _Object
    // [ default ] interface IFontFormat

struct __declspec(uuid("6fc734c1-fca2-4059-ab4b-d98472a2879d"))
IShadowFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long getShadowType ( );
    VARIANT_BOOL HasShadow ( );
    HRESULT setNoShadow (
        VARIANT_BOOL HasShadow );
    HRESULT setOuterShadow (
        long transparency,
        float size,
        float blur,
        float angle,
        float distance,
        _bstr_t alignment );
    HRESULT setInnerShadow (
        long transparency,
        float blur,
        float angle,
        float distance );
    HRESULT setPerspectiveShadow (
        long transparency,
        float size,
        float blur,
        float angle,
        float distance,
        _bstr_t alignment,
        VARIANT_BOOL isLower );
    VARIANT_BOOL IsLowerPerspective ( );
    HRESULT setShadow (
        long presetShadows );
    long getColor ( );
    HRESULT setColor (
        long color );
    IThemeColorPtr getThemeColor ( );
    HRESULT setColor_2 (
        struct IThemeColor * ThemeColor );
    long getTransparency ( );
    HRESULT setTransparency (
        long transparency );
    float getSize ( );
    HRESULT setSize (
        float size );
    float getBlur ( );
    HRESULT setBlur (
        float blur );
    float getAngle ( );
    HRESULT setAngle (
        float angle );
    float getDistance ( );
    HRESULT setDistance (
        float distance );
    _bstr_t getAlignment ( );
    IShadowFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getShadowType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasShadow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNoShadow (
        /*[in]*/ VARIANT_BOOL HasShadow ) = 0;
      virtual HRESULT __stdcall raw_setOuterShadow (
        /*[in]*/ long transparency,
        /*[in]*/ float size,
        /*[in]*/ float blur,
        /*[in]*/ float angle,
        /*[in]*/ float distance,
        /*[in]*/ BSTR alignment ) = 0;
      virtual HRESULT __stdcall raw_setInnerShadow (
        /*[in]*/ long transparency,
        /*[in]*/ float blur,
        /*[in]*/ float angle,
        /*[in]*/ float distance ) = 0;
      virtual HRESULT __stdcall raw_setPerspectiveShadow (
        /*[in]*/ long transparency,
        /*[in]*/ float size,
        /*[in]*/ float blur,
        /*[in]*/ float angle,
        /*[in]*/ float distance,
        /*[in]*/ BSTR alignment,
        /*[in]*/ VARIANT_BOOL isLower ) = 0;
      virtual HRESULT __stdcall raw_IsLowerPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadow (
        /*[in]*/ long presetShadows ) = 0;
      virtual HRESULT __stdcall raw_getColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColor (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_getThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColor_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getTransparency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTransparency (
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_getSize (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSize (
        /*[in]*/ float size ) = 0;
      virtual HRESULT __stdcall raw_getBlur (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBlur (
        /*[in]*/ float blur ) = 0;
      virtual HRESULT __stdcall raw_getAngle (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAngle (
        /*[in]*/ float angle ) = 0;
      virtual HRESULT __stdcall raw_getDistance (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDistance (
        /*[in]*/ float distance ) = 0;
      virtual HRESULT __stdcall raw_getAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("4e65c5dd-af69-438f-adda-39bfbdad8e3d"))
ShadowFormat;
    // interface _Object
    // [ default ] interface IShadowFormat

struct __declspec(uuid("57795188-f711-40d1-aa69-f33f775eb653"))
IGradientStop : IDispatch
{};

struct __declspec(uuid("8ff51eb1-82f8-44ff-85fe-ca264fd13b5e"))
GradientStop;
    // interface _Object
    // [ default ] interface IGradientStop

struct __declspec(uuid("fbee48c6-a6b3-4f26-a4bd-7d635707ad37"))
ILineStyleFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    float getWidth ( );
    HRESULT setWidth (
        float width );
    _bstr_t getCompoundType ( );
    HRESULT setCompoundType (
        _bstr_t compoundType );
    _bstr_t getDashType ( );
    HRESULT setDashType (
        _bstr_t dashType );
    _bstr_t getCapType ( );
    HRESULT setCapType (
        _bstr_t capType );
    _bstr_t getJoinType ( );
    HRESULT setJoinType (
        _bstr_t joinType );
    HRESULT setArrowSettings (
        _bstr_t arrowBeginType,
        long arrowBeginSize,
        _bstr_t arrowEndType,
        long arrowEndSize );
    _bstr_t getArrowBeginType ( );
    long getArrowBeginSize ( );
    _bstr_t getArrowEndType ( );
    long getArrowEndSize ( );
    ILineStyleFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWidth (
        /*[in]*/ float width ) = 0;
      virtual HRESULT __stdcall raw_getCompoundType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCompoundType (
        /*[in]*/ BSTR compoundType ) = 0;
      virtual HRESULT __stdcall raw_getDashType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDashType (
        /*[in]*/ BSTR dashType ) = 0;
      virtual HRESULT __stdcall raw_getCapType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCapType (
        /*[in]*/ BSTR capType ) = 0;
      virtual HRESULT __stdcall raw_getJoinType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setJoinType (
        /*[in]*/ BSTR joinType ) = 0;
      virtual HRESULT __stdcall raw_setArrowSettings (
        /*[in]*/ BSTR arrowBeginType,
        /*[in]*/ long arrowBeginSize,
        /*[in]*/ BSTR arrowEndType,
        /*[in]*/ long arrowEndSize ) = 0;
      virtual HRESULT __stdcall raw_getArrowBeginType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getArrowBeginSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getArrowEndType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getArrowEndSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("458fecc0-66cf-44a3-bc8d-7326427695ad"))
LineStyleFormat;
    // interface _Object
    // [ default ] interface ILineStyleFormat

struct __declspec(uuid("ed2dc7c7-f6cf-435d-9871-ac7c151c2a26"))
ILineColorFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsNoLine ( );
    HRESULT setNoLine (
        VARIANT_BOOL noLine );
    VARIANT_BOOL IsSolidLine ( );
    HRESULT setSolidLine (
        long color,
        long transparency );
    HRESULT setSolidLine_2 (
        const _variant_t & color,
        long transparency );
    long getTransparency ( );
    long getLineColor ( );
    HRESULT setLineColor (
        long color );
    IThemeColorPtr getLineThemeColor ( );
    HRESULT setLineColor_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL IsPatternLine ( );
    long getLinePattern ( );
    HRESULT setPatternLine (
        long linePattern,
        long color );
    VARIANT_BOOL IsGradientLine ( );
    HRESULT setGradientLine (
        long presetColors );
    long getGradientType ( );
    HRESULT setGradientType (
        long type );
    float getGradientAngle ( );
    HRESULT setGradientAngle (
        float angle );
    long getGradientDirection ( );
    HRESULT setGradientDirection (
        long direction );
    HRESULT addGradientStop (
        long position,
        long color,
        long transparency );
    HRESULT addGradientStop_2 (
        long position,
        const _variant_t & color,
        long transparency );
    HRESULT addGradientStop_3 (
        struct IGradientStop * stop );
    IGradientStopPtr getGradientStopAt (
        long stop );
    HRESULT removeGradientStopAt (
        long stop );
    long GradientStopCount ( );
    VARIANT_BOOL isAutomatic ( );
    HRESULT setAutomatic (
        VARIANT_BOOL isAutomatic );
    ILineColorFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsNoLine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNoLine (
        /*[in]*/ VARIANT_BOOL noLine ) = 0;
      virtual HRESULT __stdcall raw_IsSolidLine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSolidLine (
        /*[in]*/ long color,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_setSolidLine_2 (
        /*[in]*/ VARIANT color,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_getTransparency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLineColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColor (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_getLineThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColor_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_IsPatternLine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLinePattern (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPatternLine (
        /*[in]*/ long linePattern,
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_IsGradientLine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientLine (
        /*[in]*/ long presetColors ) = 0;
      virtual HRESULT __stdcall raw_getGradientType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientType (
        /*[in]*/ long type ) = 0;
      virtual HRESULT __stdcall raw_getGradientAngle (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientAngle (
        /*[in]*/ float angle ) = 0;
      virtual HRESULT __stdcall raw_getGradientDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientDirection (
        /*[in]*/ long direction ) = 0;
      virtual HRESULT __stdcall raw_addGradientStop (
        /*[in]*/ long position,
        /*[in]*/ long color,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_addGradientStop_2 (
        /*[in]*/ long position,
        /*[in]*/ VARIANT color,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_addGradientStop_3 (
        /*[in]*/ struct IGradientStop * stop ) = 0;
      virtual HRESULT __stdcall raw_getGradientStopAt (
        /*[in]*/ long stop,
        /*[out,retval]*/ struct IGradientStop * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeGradientStopAt (
        /*[in]*/ long stop ) = 0;
      virtual HRESULT __stdcall raw_GradientStopCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_isAutomatic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomatic (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("9dc24cbd-599a-3cf1-999d-59a9fbfdefac"))
IExcelChartGridlines : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    VARIANT_BOOL IsVisible ( );
    HRESULT setVisible (
        VARIANT_BOOL IsVisible );
    long getLineStyle ( );
    HRESULT setLineStyle (
        long lineStyle );
    long getLineWeight ( );
    HRESULT setLineWeight (
        long lineWeight );
    long getLineColor ( );
    HRESULT setLineColor (
        long lineColor );
    IExcelChartGridlinesPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVisible (
        /*[in]*/ VARIANT_BOOL IsVisible ) = 0;
      virtual HRESULT __stdcall raw_getLineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyle (
        /*[in]*/ long lineStyle ) = 0;
      virtual HRESULT __stdcall raw_getLineWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineWeight (
        /*[in]*/ long lineWeight ) = 0;
      virtual HRESULT __stdcall raw_getLineColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColor (
        /*[in]*/ long lineColor ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
};

struct __declspec(uuid("f0c767b8-c46b-44bc-b5ca-1a1cb7ad737f"))
AlignmentFormat;
    // interface _Object
    // [ default ] interface IAlignmentFormat

struct __declspec(uuid("9aa68a6e-6aa2-414d-a7f7-b5dd84e4aa54"))
FillFormat;
    // interface _Object
    // [ default ] interface IFillFormat

struct __declspec(uuid("d1eeb3f8-bf41-4cfa-aa4b-58e1cb5a6cd9"))
Format3D;
    // interface _Object
    // [ default ] interface IFormat3D

struct __declspec(uuid("f2be887e-7529-4744-92df-aea301614f2c"))
LineColorFormat;
    // interface _Object
    // [ default ] interface ILineColorFormat

struct __declspec(uuid("2e7a7199-04a8-424a-8b23-82e2232c8046"))
IDrawingObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setLeftUpperOffset (
        long horizontalOffset,
        long verticalOffset );
    long getHorizontalOffset ( );
    long getVerticalOffset ( );
    HRESULT setSize (
        long width,
        long height );
    long getHeight ( );
    long getWidth ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setLeftUpperOffset (
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSize (
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_getHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("e27f44e9-18a6-43d7-b099-59b6a9d70117"))
DrawingObject;
    // interface _Object
    // [ default ] interface IDrawingObject

struct __declspec(uuid("9ec6019a-c8a0-42e0-a5c9-949cd5830f12"))
ILineDrawingObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
};

struct __declspec(uuid("1567dfd5-7240-4d71-88aa-1b27f561e74a"))
FillDrawingObject;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // [ default ] interface IFillDrawingObject

struct __declspec(uuid("3b6d9144-adbe-4165-9022-f931021ea9db"))
IDrawingObject2D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setLeftUpperCorner (
        long row,
        long column );
    HRESULT setLeftUpperCorner_2 (
        _bstr_t cellReference );
    long getLeftUpperCornerRow ( );
    long getLeftUpperCornerColumn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setLeftUpperCorner (
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperCorner_2 (
        /*[in]*/ BSTR cellReference ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("21d090e8-eab8-4495-bc59-dd374eb90125"))
IEffectDrawingObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
};

struct __declspec(uuid("8db79e9f-443c-4531-85d3-c2408f70ef3b"))
IFontDrawingObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
};

struct __declspec(uuid("84d11710-33da-35d4-a8de-5dc2d2169215"))
IExcelComment : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setLeftUpperCorner (
        long row,
        long column );
    HRESULT setLeftUpperCorner_2 (
        _bstr_t cellReference );
    long getLeftUpperCornerRow ( );
    long getLeftUpperCornerColumn ( );
    HRESULT setLeftUpperOffset (
        long horizontalOffset,
        long verticalOffset );
    long getHorizontalOffset ( );
    long getVerticalOffset ( );
    HRESULT setSize (
        long commentWidth,
        long commentHeight );
    long getHeight ( );
    long getWidth ( );
    _bstr_t getText ( );
    HRESULT setText (
        _bstr_t text );
    _bstr_t getHTMLText ( );
    HRESULT setHTMLText (
        _bstr_t text );
    VARIANT_BOOL IsHTMLUsed ( );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    long getForeground ( );
    HRESULT setForeground (
        long color );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    IExcelCommentPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setLeftUpperCorner (
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperCorner_2 (
        /*[in]*/ BSTR cellReference ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperOffset (
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSize (
        /*[in]*/ long commentWidth,
        /*[in]*/ long commentHeight ) = 0;
      virtual HRESULT __stdcall raw_getHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getText (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getHTMLText (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHTMLText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_IsHTMLUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelComment * * pRetVal ) = 0;
};

struct __declspec(uuid("6a882a73-420f-3aa8-ab02-dd9b47269125"))
IExcelCell : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IExcelStylePtr getStyle ( );
    HRESULT setStyle (
        struct IExcelStyle * xlsStyle );
    _bstr_t getFormat ( );
    HRESULT setFormat (
        _bstr_t format );
    _bstr_t getHorizontalAlignment ( );
    HRESULT setHorizontalAlignment (
        _bstr_t horizontalAlignment );
    _bstr_t getVerticalAlignment ( );
    HRESULT setVerticalAlignment (
        _bstr_t verticalAlignment );
    VARIANT_BOOL IsJustifyDistributed ( );
    HRESULT setJustifyDistributed (
        VARIANT_BOOL isWrap );
    long getIndent ( );
    HRESULT setIndent (
        long indent );
    long getTextRotation ( );
    HRESULT setTextRotation (
        long textRotation );
    VARIANT_BOOL isWrap ( );
    HRESULT setWrap (
        VARIANT_BOOL isWrap );
    VARIANT_BOOL IsShrink ( );
    HRESULT setShrink (
        VARIANT_BOOL IsShrink );
    VARIANT_BOOL IsMergeCell ( );
    long getTextDirection ( );
    HRESULT setTextDirection (
        long textDirection );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL IsHeadingsFont ( );
    HRESULT setHeadingsFont ( );
    VARIANT_BOOL IsBodyFont ( );
    HRESULT setBodyFont ( );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getForeground ( );
    IThemeColorPtr getForegroundThemeColor ( );
    HRESULT setForeground (
        long color );
    HRESULT setForeground_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    HRESULT setBorderStyles (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    long getTopStyle_Border ( );
    HRESULT setTopStyle_Border (
        long borderStyle );
    long getBottomStyle_Border ( );
    HRESULT setBottomStyle_Border (
        long borderStyle );
    long getLeftStyle_Border ( );
    HRESULT setLeftStyle_Border (
        long borderStyle );
    long getRightStyle_Border ( );
    HRESULT setRightStyle_Border (
        long borderStyle );
    HRESULT setBorderColors (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    HRESULT setBorderColors_2 (
        const _variant_t & borderTop,
        const _variant_t & borderBottom,
        const _variant_t & borderLeft,
        const _variant_t & borderRight );
    long getTopColor_Border ( );
    IThemeColorPtr getTopThemeColor_Border ( );
    HRESULT setTopColor_Border (
        long color );
    HRESULT setTopColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getBottomColor_Border ( );
    IThemeColorPtr getBottomThemeColor_Border ( );
    HRESULT setBottomColor_Border (
        long color );
    HRESULT setBottomColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getLeftColor_Border ( );
    IThemeColorPtr getLeftThemeColor_Border ( );
    HRESULT setLeftColor_Border (
        long color );
    HRESULT setLeftColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getRightColor_Border ( );
    IThemeColorPtr getRightThemeColor_Border ( );
    HRESULT setRightColor_Border (
        long color );
    HRESULT setRightColor_Border_2 (
        struct IThemeColor * ThemeColor );
    HRESULT setDiagonalBorder (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        long borderColor );
    HRESULT setDiagonalBorder_2 (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        const _variant_t & borderColor );
    long getDiagonalUpStyle_Border ( );
    long getDiagonalDownStyle_Border ( );
    long getDiagonalColor_Border ( );
    IThemeColorPtr getDiagonalThemeColor_Border ( );
    long getBackground ( );
    IThemeColorPtr getBackgroundThemeColor ( );
    HRESULT setBackground (
        long color );
    HRESULT setBackground_2 (
        struct IThemeColor * ThemeColor );
    long getPattern ( );
    HRESULT setPattern (
        long pattern );
    long getPatternColor ( );
    IThemeColorPtr getPatternThemeColor ( );
    HRESULT setPatternColor (
        long patternColor );
    HRESULT setPatternColor_2 (
        struct IThemeColor * ThemeColor );
    long getGradientColor1 ( );
    long getGradientColor2 ( );
    HRESULT setGradientFill (
        long color1,
        long color2,
        long shadingStyle );
    IThemeColorPtr getGradientThemeColor1 ( );
    IThemeColorPtr getGradientThemeColor2 ( );
    HRESULT setGradientFill_2 (
        const _variant_t & themeColor1,
        const _variant_t & themeColor2,
        long shadingStyle );
    long getGradientShadingStyle ( );
    VARIANT_BOOL IsLocked ( );
    HRESULT setLocked (
        VARIANT_BOOL IsLocked );
    VARIANT_BOOL IsHiddenFormula ( );
    HRESULT setHiddenFormula (
        VARIANT_BOOL IsHidden );
    _bstr_t getValue ( );
    HRESULT setValue (
        _bstr_t value );
    _bstr_t getHTMLValue ( );
    HRESULT setHTMLValue (
        _bstr_t value );
    VARIANT_BOOL IsHTMLUsed ( );
    VARIANT_BOOL IsArrayFormula ( );
    _bstr_t getFormulaResultValue ( );
    VARIANT_BOOL containsFormula ( );
    IUnknownPtr calculateFormula (
        const _variant_t & excel,
        const _variant_t & cellWorksheet,
        const _variant_t & formulaWorksheet,
        long nCellRow,
        long nCellColumn,
        long nFormulaRow,
        long nFormulaColumn,
        VARIANT_BOOL bRecalculate );
    _bstr_t getFormattedValue ( );
    _bstr_t getDataType ( );
    HRESULT setDataType (
        _bstr_t dataType );
    IExcelCommentPtr getComment ( );
    HRESULT setComment (
        struct IExcelComment * xlsComment );
    HRESULT setComment_2 (
        _bstr_t text );
    HRESULT setComment_3 (
        _bstr_t text,
        long width,
        long height );
    HRESULT setComment_4 (
        _bstr_t text,
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    IExcelCellPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFormat (
        /*[in]*/ BSTR format ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHorizontalAlignment (
        /*[in]*/ BSTR horizontalAlignment ) = 0;
      virtual HRESULT __stdcall raw_getVerticalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVerticalAlignment (
        /*[in]*/ BSTR verticalAlignment ) = 0;
      virtual HRESULT __stdcall raw_IsJustifyDistributed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setJustifyDistributed (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_getIndent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIndent (
        /*[in]*/ long indent ) = 0;
      virtual HRESULT __stdcall raw_getTextRotation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextRotation (
        /*[in]*/ long textRotation ) = 0;
      virtual HRESULT __stdcall raw_isWrap (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWrap (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_IsShrink (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShrink (
        /*[in]*/ VARIANT_BOOL IsShrink ) = 0;
      virtual HRESULT __stdcall raw_IsMergeCell (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTextDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextDirection (
        /*[in]*/ long textDirection ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_IsHeadingsFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeadingsFont ( ) = 0;
      virtual HRESULT __stdcall raw_IsBodyFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBodyFont ( ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getForegroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setForeground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyles (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getLeftStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getRightStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors_2 (
        /*[in]*/ VARIANT borderTop,
        /*[in]*/ VARIANT borderBottom,
        /*[in]*/ VARIANT borderLeft,
        /*[in]*/ VARIANT borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTopThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getBottomColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBottomThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getLeftColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getRightColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRightThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder_2 (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ VARIANT borderColor ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalUpStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalDownStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackgroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBackground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getPattern (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPattern (
        /*[in]*/ long pattern ) = 0;
      virtual HRESULT __stdcall raw_getPatternColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getPatternThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor (
        /*[in]*/ long patternColor ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill (
        /*[in]*/ long color1,
        /*[in]*/ long color2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor1 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor2 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill_2 (
        /*[in]*/ VARIANT themeColor1,
        /*[in]*/ VARIANT themeColor2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientShadingStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLocked (
        /*[in]*/ VARIANT_BOOL IsLocked ) = 0;
      virtual HRESULT __stdcall raw_IsHiddenFormula (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHiddenFormula (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_getValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setValue (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_getHTMLValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHTMLValue (
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_IsHTMLUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsArrayFormula (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFormulaResultValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_containsFormula (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_calculateFormula (
        /*[in]*/ VARIANT excel,
        /*[in]*/ VARIANT cellWorksheet,
        /*[in]*/ VARIANT formulaWorksheet,
        /*[in]*/ long nCellRow,
        /*[in]*/ long nCellColumn,
        /*[in]*/ long nFormulaRow,
        /*[in]*/ long nFormulaColumn,
        /*[in]*/ VARIANT_BOOL bRecalculate,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFormattedValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDataType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataType (
        /*[in]*/ BSTR dataType ) = 0;
      virtual HRESULT __stdcall raw_getComment (
        /*[out,retval]*/ struct IExcelComment * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setComment (
        /*[in]*/ struct IExcelComment * xlsComment ) = 0;
      virtual HRESULT __stdcall raw_setComment_2 (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_setComment_3 (
        /*[in]*/ BSTR text,
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_setComment_4 (
        /*[in]*/ BSTR text,
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelCell * * pRetVal ) = 0;
};

struct __declspec(uuid("d81631d8-6dc3-3c71-998a-ab7bc7a93d84"))
IExcelRow : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IExcelCellPtr easy_getCellAt (
        long index );
    HRESULT easy_setCellAt (
        const _variant_t & Cell,
        long index );
    HRESULT easy_removeCellAt (
        long index );
    HRESULT easy_removeCellRange (
        long startIndex,
        long count );
    HRESULT easy_insertCellAt (
        const _variant_t & Cell,
        long index );
    HRESULT easy_addCell (
        struct IExcelCell * Cell );
    IExcelCellPtr easy_getCell (
        long index );
    long count ( );
    long getHeight ( );
    HRESULT setHeight (
        long height );
    VARIANT_BOOL IsHiddenRow ( );
    HRESULT setHiddenRow (
        VARIANT_BOOL IsHidden );
    VARIANT_BOOL AutoResize ( );
    HRESULT setAutoResize (
        VARIANT_BOOL isAutoResize );
    _bstr_t getDataType ( );
    HRESULT setDataType (
        _bstr_t dataType );
    IExcelStylePtr getStyle ( );
    HRESULT setStyle (
        struct IExcelStyle * xlsStyle );
    _bstr_t getFormat ( );
    HRESULT setFormat (
        _bstr_t format );
    _bstr_t getHorizontalAlignment ( );
    HRESULT setHorizontalAlignment (
        _bstr_t horizontalAlignment );
    _bstr_t getVerticalAlignment ( );
    HRESULT setVerticalAlignment (
        _bstr_t verticalAlignment );
    VARIANT_BOOL IsJustifyDistributed ( );
    HRESULT setJustifyDistributed (
        VARIANT_BOOL isWrap );
    long getIndent ( );
    HRESULT setIndent (
        long indent );
    long getTextRotation ( );
    HRESULT setTextRotation (
        long textRotation );
    VARIANT_BOOL isWrap ( );
    HRESULT setWrap (
        VARIANT_BOOL isWrap );
    VARIANT_BOOL IsShrink ( );
    HRESULT setShrink (
        VARIANT_BOOL IsShrink );
    long getTextDirection ( );
    HRESULT setTextDirection (
        long textDirection );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL IsHeadingsFont ( );
    HRESULT setHeadingsFont ( );
    VARIANT_BOOL IsBodyFont ( );
    HRESULT setBodyFont ( );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getForeground ( );
    IThemeColorPtr getForegroundThemeColor ( );
    HRESULT setForeground (
        long color );
    HRESULT setForeground_2 (
        struct IThemeColor * ThemeColor );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    HRESULT setBorderStyles (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    long getTopStyle_Border ( );
    HRESULT setTopStyle_Border (
        long borderStyle );
    long getBottomStyle_Border ( );
    HRESULT setBottomStyle_Border (
        long borderStyle );
    long getLeftStyle_Border ( );
    HRESULT setLeftStyle_Border (
        long borderStyle );
    long getRightStyle_Border ( );
    HRESULT setRightStyle_Border (
        long borderStyle );
    HRESULT setBorderColors (
        long borderTop,
        long borderBottom,
        long borderLeft,
        long borderRight );
    HRESULT setBorderColors_2 (
        const _variant_t & borderTop,
        const _variant_t & borderBottom,
        const _variant_t & borderLeft,
        const _variant_t & borderRight );
    long getTopColor_Border ( );
    IThemeColorPtr getTopThemeColor_Border ( );
    HRESULT setTopColor_Border (
        long color );
    HRESULT setTopColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getBottomColor_Border ( );
    IThemeColorPtr getBottomThemeColor_Border ( );
    HRESULT setBottomColor_Border (
        long color );
    HRESULT setBottomColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getLeftColor_Border ( );
    IThemeColorPtr getLeftThemeColor_Border ( );
    HRESULT setLeftColor_Border (
        long color );
    HRESULT setLeftColor_Border_2 (
        struct IThemeColor * ThemeColor );
    long getRightColor_Border ( );
    IThemeColorPtr getRightThemeColor_Border ( );
    HRESULT setRightColor_Border (
        long color );
    HRESULT setRightColor_Border_2 (
        struct IThemeColor * ThemeColor );
    HRESULT setDiagonalBorder (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        long borderColor );
    HRESULT setDiagonalBorder_2 (
        VARIANT_BOOL borderDiagonalUp,
        VARIANT_BOOL borderDiagonalDown,
        long borderStyle,
        const _variant_t & borderColor );
    long getDiagonalUpStyle_Border ( );
    long getDiagonalDownStyle_Border ( );
    long getDiagonalColor_Border ( );
    IThemeColorPtr getDiagonalThemeColor_Border ( );
    long getBackground ( );
    IThemeColorPtr getBackgroundThemeColor ( );
    HRESULT setBackground (
        long color );
    HRESULT setBackground_2 (
        struct IThemeColor * ThemeColor );
    long getPattern ( );
    HRESULT setPattern (
        long pattern );
    long getPatternColor ( );
    IThemeColorPtr getPatternThemeColor ( );
    HRESULT setPatternColor (
        long patternColor );
    HRESULT setPatternColor_2 (
        struct IThemeColor * ThemeColor );
    long getGradientColor1 ( );
    long getGradientColor2 ( );
    HRESULT setGradientFill (
        long color1,
        long color2,
        long shadingStyle );
    IThemeColorPtr getGradientThemeColor1 ( );
    IThemeColorPtr getGradientThemeColor2 ( );
    HRESULT setGradientFill_2 (
        const _variant_t & themeColor1,
        const _variant_t & themeColor2,
        long shadingStyle );
    long getGradientShadingStyle ( );
    VARIANT_BOOL IsLocked ( );
    HRESULT setLocked (
        VARIANT_BOOL IsLocked );
    VARIANT_BOOL IsHiddenFormula ( );
    HRESULT setHiddenFormula (
        VARIANT_BOOL IsHidden );
    IExcelRowPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_easy_getCellAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setCellAt (
        /*[in]*/ VARIANT Cell,
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeCellAt (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeCellRange (
        /*[in]*/ long startIndex,
        /*[in]*/ long count ) = 0;
      virtual HRESULT __stdcall raw_easy_insertCellAt (
        /*[in]*/ VARIANT Cell,
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_addCell (
        /*[in]*/ struct IExcelCell * Cell ) = 0;
      virtual HRESULT __stdcall raw_easy_getCell (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeight (
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_IsHiddenRow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHiddenRow (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_AutoResize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutoResize (
        /*[in]*/ VARIANT_BOOL isAutoResize ) = 0;
      virtual HRESULT __stdcall raw_getDataType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataType (
        /*[in]*/ BSTR dataType ) = 0;
      virtual HRESULT __stdcall raw_getStyle (
        /*[out,retval]*/ struct IExcelStyle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStyle (
        /*[in]*/ struct IExcelStyle * xlsStyle ) = 0;
      virtual HRESULT __stdcall raw_getFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFormat (
        /*[in]*/ BSTR format ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHorizontalAlignment (
        /*[in]*/ BSTR horizontalAlignment ) = 0;
      virtual HRESULT __stdcall raw_getVerticalAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVerticalAlignment (
        /*[in]*/ BSTR verticalAlignment ) = 0;
      virtual HRESULT __stdcall raw_IsJustifyDistributed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setJustifyDistributed (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_getIndent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setIndent (
        /*[in]*/ long indent ) = 0;
      virtual HRESULT __stdcall raw_getTextRotation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextRotation (
        /*[in]*/ long textRotation ) = 0;
      virtual HRESULT __stdcall raw_isWrap (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWrap (
        /*[in]*/ VARIANT_BOOL isWrap ) = 0;
      virtual HRESULT __stdcall raw_IsShrink (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShrink (
        /*[in]*/ VARIANT_BOOL IsShrink ) = 0;
      virtual HRESULT __stdcall raw_getTextDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTextDirection (
        /*[in]*/ long textDirection ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_IsHeadingsFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHeadingsFont ( ) = 0;
      virtual HRESULT __stdcall raw_IsBodyFont (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBodyFont ( ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getForegroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setForeground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyles (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBottomStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getLeftStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getRightStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightStyle_Border (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors (
        /*[in]*/ long borderTop,
        /*[in]*/ long borderBottom,
        /*[in]*/ long borderLeft,
        /*[in]*/ long borderRight ) = 0;
      virtual HRESULT __stdcall raw_setBorderColors_2 (
        /*[in]*/ VARIANT borderTop,
        /*[in]*/ VARIANT borderBottom,
        /*[in]*/ VARIANT borderLeft,
        /*[in]*/ VARIANT borderRight ) = 0;
      virtual HRESULT __stdcall raw_getTopColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTopThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setTopColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getBottomColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBottomThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBottomColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getLeftColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setLeftColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getRightColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRightThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setRightColor_Border_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_setDiagonalBorder_2 (
        /*[in]*/ VARIANT_BOOL borderDiagonalUp,
        /*[in]*/ VARIANT_BOOL borderDiagonalDown,
        /*[in]*/ long borderStyle,
        /*[in]*/ VARIANT borderColor ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalUpStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalDownStyle_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalColor_Border (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getDiagonalThemeColor_Border (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackgroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long color ) = 0;
      virtual HRESULT __stdcall raw_setBackground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getPattern (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPattern (
        /*[in]*/ long pattern ) = 0;
      virtual HRESULT __stdcall raw_getPatternColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getPatternThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor (
        /*[in]*/ long patternColor ) = 0;
      virtual HRESULT __stdcall raw_setPatternColor_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getGradientColor2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill (
        /*[in]*/ long color1,
        /*[in]*/ long color2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor1 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getGradientThemeColor2 (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill_2 (
        /*[in]*/ VARIANT themeColor1,
        /*[in]*/ VARIANT themeColor2,
        /*[in]*/ long shadingStyle ) = 0;
      virtual HRESULT __stdcall raw_getGradientShadingStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLocked (
        /*[in]*/ VARIANT_BOOL IsLocked ) = 0;
      virtual HRESULT __stdcall raw_IsHiddenFormula (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHiddenFormula (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelRow * * pRetVal ) = 0;
};

struct __declspec(uuid("fbd626e2-ff12-380c-b752-4459e21583ca"))
IExcelTable : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long RowCount ( );
    HRESULT setRowCount (
        long count );
    HRESULT easy_addRow ( );
    HRESULT easy_addRow_2 (
        struct IExcelRow * rowData );
    HRESULT easy_insertRow (
        long row,
        const _variant_t & rowData );
    HRESULT easy_removeRow (
        long row );
    HRESULT easy_removeRowRange (
        long startRow,
        long count );
    long getRowHeight ( );
    HRESULT setRowHeight (
        long height );
    long getRowHeight_2 (
        long row );
    HRESULT setRowHeight_2 (
        long row,
        long rowHeight );
    VARIANT_BOOL IsRowHeightSet ( );
    IExcelRowPtr easy_getRowAt (
        long row );
    long ColumnCount ( );
    HRESULT setColumnCount (
        long count );
    HRESULT easy_addColumn ( );
    HRESULT easy_addColumn_2 (
        struct IExcelColumn * columnData );
    HRESULT easy_insertColumn (
        long column,
        const _variant_t & columnData );
    HRESULT easy_removeColumn (
        long column );
    HRESULT easy_removeColumnRange (
        long startColumn,
        long count );
    long getColumnWidth ( );
    HRESULT setColumnWidth (
        long width );
    long getColumnWidth_2 (
        long column );
    HRESULT setColumnWidth_2 (
        long column,
        long columnWidth );
    IExcelColumnPtr easy_getColumnAt (
        long column );
    IExcelCellPtr easy_getCellAt (
        long row,
        long column );
    IExcelCellPtr easy_getCell (
        long row,
        long column );
    IExcelCellPtr easy_getCell_2 (
        _bstr_t cellReference );
    HRESULT easy_setCellAt (
        const _variant_t & Cell,
        long row,
        long column );
    HRESULT easy_setRangeStyle (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn,
        const _variant_t & style );
    HRESULT easy_setRangeStyle_2 (
        _bstr_t range,
        const _variant_t & style );
    HRESULT easy_setRangeStyle_3 (
        _bstr_t startCellReference,
        _bstr_t endCellReference,
        const _variant_t & style );
    HRESULT easy_setRangeAutoFormat (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_setRangeAutoFormat_2 (
        _bstr_t range,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_setRangeAutoFormat_3 (
        _bstr_t startCellReference,
        _bstr_t endCellReference,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_mergeCells (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    HRESULT easy_mergeCells_2 (
        _bstr_t range );
    HRESULT easy_mergeCells_3 (
        _bstr_t startCellReference,
        _bstr_t endCellReference );
    long easy_getCellMergingFirstRow (
        long nIndex );
    long easy_getCellMergingLastRow (
        long nIndex );
    long easy_getCellMergingFirstCol (
        long nIndex );
    long easy_getCellMergingLastCol (
        long nIndex );
    long MergeCellRangesCount ( );
    HRESULT easy_removeCellMerging (
        long nIndex );
    HRESULT easy_insertPageBreakAtRow (
        long row );
    HRESULT easy_insertPageBreakAtColumn (
        long column );
    HRESULT easy_resetAllPageBreaks ( );
    IListPtr getHorizontalPageBreaks ( );
    IListPtr getVerticalPageBreaks ( );
    HRESULT easy_freezePanes (
        long splitRow,
        long splitColumn );
    HRESULT easy_freezePanes_2 (
        long splitRow,
        long splitColumn,
        long topVisibleRow_BottomPane,
        long leftVisibleColumn_RightPane );
    HRESULT easy_unfreezePanes ( );
    HRESULT easy_split (
        long splitRow,
        long splitColumn );
    HRESULT easy_split_2 (
        long splitRow,
        long splitColumn,
        long topVisibleRow_BottomPane,
        long leftVisibleColumn_RightPane );
    HRESULT easy_removeSplit ( );
    VARIANT_BOOL IsSplitSet ( );
    VARIANT_BOOL IsFreezePaneSet ( );
    ICellPtr findFirst (
        _bstr_t value,
        long lookIn,
        VARIANT_BOOL matchCase,
        VARIANT_BOOL matchEntireCellContents );
    IListPtr findAll (
        _bstr_t value,
        long lookIn,
        VARIANT_BOOL matchCase,
        VARIANT_BOOL matchEntireCellContents );
    IExcelTablePtr Clone ( );
    HRESULT Dispose ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RowCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRowCount (
        /*[in]*/ long count ) = 0;
      virtual HRESULT __stdcall raw_easy_addRow ( ) = 0;
      virtual HRESULT __stdcall raw_easy_addRow_2 (
        /*[in]*/ struct IExcelRow * rowData ) = 0;
      virtual HRESULT __stdcall raw_easy_insertRow (
        /*[in]*/ long row,
        /*[in]*/ VARIANT rowData ) = 0;
      virtual HRESULT __stdcall raw_easy_removeRow (
        /*[in]*/ long row ) = 0;
      virtual HRESULT __stdcall raw_easy_removeRowRange (
        /*[in]*/ long startRow,
        /*[in]*/ long count ) = 0;
      virtual HRESULT __stdcall raw_getRowHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRowHeight (
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_getRowHeight_2 (
        /*[in]*/ long row,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRowHeight_2 (
        /*[in]*/ long row,
        /*[in]*/ long rowHeight ) = 0;
      virtual HRESULT __stdcall raw_IsRowHeightSet (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getRowAt (
        /*[in]*/ long row,
        /*[out,retval]*/ struct IExcelRow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ColumnCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColumnCount (
        /*[in]*/ long count ) = 0;
      virtual HRESULT __stdcall raw_easy_addColumn ( ) = 0;
      virtual HRESULT __stdcall raw_easy_addColumn_2 (
        /*[in]*/ struct IExcelColumn * columnData ) = 0;
      virtual HRESULT __stdcall raw_easy_insertColumn (
        /*[in]*/ long column,
        /*[in]*/ VARIANT columnData ) = 0;
      virtual HRESULT __stdcall raw_easy_removeColumn (
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_easy_removeColumnRange (
        /*[in]*/ long startColumn,
        /*[in]*/ long count ) = 0;
      virtual HRESULT __stdcall raw_getColumnWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColumnWidth (
        /*[in]*/ long width ) = 0;
      virtual HRESULT __stdcall raw_getColumnWidth_2 (
        /*[in]*/ long column,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColumnWidth_2 (
        /*[in]*/ long column,
        /*[in]*/ long columnWidth ) = 0;
      virtual HRESULT __stdcall raw_easy_getColumnAt (
        /*[in]*/ long column,
        /*[out,retval]*/ struct IExcelColumn * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getCellAt (
        /*[in]*/ long row,
        /*[in]*/ long column,
        /*[out,retval]*/ struct IExcelCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getCell (
        /*[in]*/ long row,
        /*[in]*/ long column,
        /*[out,retval]*/ struct IExcelCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getCell_2 (
        /*[in]*/ BSTR cellReference,
        /*[out,retval]*/ struct IExcelCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setCellAt (
        /*[in]*/ VARIANT Cell,
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_easy_setRangeStyle (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[in]*/ VARIANT style ) = 0;
      virtual HRESULT __stdcall raw_easy_setRangeStyle_2 (
        /*[in]*/ BSTR range,
        /*[in]*/ VARIANT style ) = 0;
      virtual HRESULT __stdcall raw_easy_setRangeStyle_3 (
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ BSTR endCellReference,
        /*[in]*/ VARIANT style ) = 0;
      virtual HRESULT __stdcall raw_easy_setRangeAutoFormat (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_setRangeAutoFormat_2 (
        /*[in]*/ BSTR range,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_setRangeAutoFormat_3 (
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ BSTR endCellReference,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_mergeCells (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn ) = 0;
      virtual HRESULT __stdcall raw_easy_mergeCells_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_easy_mergeCells_3 (
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ BSTR endCellReference ) = 0;
      virtual HRESULT __stdcall raw_easy_getCellMergingFirstRow (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getCellMergingLastRow (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getCellMergingFirstCol (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getCellMergingLastCol (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MergeCellRangesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeCellMerging (
        /*[in]*/ long nIndex ) = 0;
      virtual HRESULT __stdcall raw_easy_insertPageBreakAtRow (
        /*[in]*/ long row ) = 0;
      virtual HRESULT __stdcall raw_easy_insertPageBreakAtColumn (
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_easy_resetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalPageBreaks (
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalPageBreaks (
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_freezePanes (
        /*[in]*/ long splitRow,
        /*[in]*/ long splitColumn ) = 0;
      virtual HRESULT __stdcall raw_easy_freezePanes_2 (
        /*[in]*/ long splitRow,
        /*[in]*/ long splitColumn,
        /*[in]*/ long topVisibleRow_BottomPane,
        /*[in]*/ long leftVisibleColumn_RightPane ) = 0;
      virtual HRESULT __stdcall raw_easy_unfreezePanes ( ) = 0;
      virtual HRESULT __stdcall raw_easy_split (
        /*[in]*/ long splitRow,
        /*[in]*/ long splitColumn ) = 0;
      virtual HRESULT __stdcall raw_easy_split_2 (
        /*[in]*/ long splitRow,
        /*[in]*/ long splitColumn,
        /*[in]*/ long topVisibleRow_BottomPane,
        /*[in]*/ long leftVisibleColumn_RightPane ) = 0;
      virtual HRESULT __stdcall raw_easy_removeSplit ( ) = 0;
      virtual HRESULT __stdcall raw_IsSplitSet (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsFreezePaneSet (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_findFirst (
        /*[in]*/ BSTR value,
        /*[in]*/ long lookIn,
        /*[in]*/ VARIANT_BOOL matchCase,
        /*[in]*/ VARIANT_BOOL matchEntireCellContents,
        /*[out,retval]*/ struct ICell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_findAll (
        /*[in]*/ BSTR value,
        /*[in]*/ long lookIn,
        /*[in]*/ VARIANT_BOOL matchCase,
        /*[in]*/ VARIANT_BOOL matchEntireCellContents,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
};

struct __declspec(uuid("d60e39d8-a136-4728-b1f4-567a79b6379b"))
IAlignDrawingObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAlignmentFormatPtr getAlignmentFormat ( );
    HRESULT setAlignmentFormat (
        struct IAlignmentFormat * AlignmentFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getAlignmentFormat (
        /*[out,retval]*/ struct IAlignmentFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAlignmentFormat (
        /*[in]*/ struct IAlignmentFormat * AlignmentFormat ) = 0;
};

struct __declspec(uuid("405e8d77-61fd-3a01-86e3-f6bf0ca79816"))
IExcelImage : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setLeftUpperCorner (
        long row,
        long column );
    HRESULT setLeftUpperCorner_2 (
        _bstr_t cellReference );
    long getLeftUpperCornerRow ( );
    long getLeftUpperCornerColumn ( );
    HRESULT setLeftUpperOffset (
        long horizontalOffset,
        long verticalOffset );
    HRESULT setSize (
        long imageWidth,
        long imageHeight );
    long getHeight ( );
    long getWidth ( );
    long getHorizontalOffset ( );
    long getVerticalOffset ( );
    _bstr_t getImagePath ( );
    HRESULT setImagePath (
        _bstr_t path );
    SAFEARRAY * getImageBytes ( );
    IExcelImagePtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setLeftUpperCorner (
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperCorner_2 (
        /*[in]*/ BSTR cellReference ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperOffset (
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset ) = 0;
      virtual HRESULT __stdcall raw_setSize (
        /*[in]*/ long imageWidth,
        /*[in]*/ long imageHeight ) = 0;
      virtual HRESULT __stdcall raw_getHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getImagePath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setImagePath (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_getImageBytes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
};

struct __declspec(uuid("b8981ef8-3d8e-3ca9-8ba3-0ac2a985b21e"))
IExcelSheet : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsSheetSelected ( );
    HRESULT setSheetSelected (
        VARIANT_BOOL IsSheetSelected );
    VARIANT_BOOL IsSheetProtected ( );
    HRESULT setSheetProtected (
        VARIANT_BOOL IsSheetProtected );
    HRESULT setProtectionPassword (
        _bstr_t sPassword );
    VARIANT_BOOL IsHidden ( );
    HRESULT setHidden (
        VARIANT_BOOL IsHidden );
    _bstr_t getSheetName ( );
    HRESULT setSheetName (
        _bstr_t sheetName );
    long getZoom ( );
    HRESULT setZoom (
        long zoom );
    long getTabColor ( );
    IThemeColorPtr getTabThemeColor ( );
    HRESULT setTabColor (
        long colorTab );
    HRESULT setTabColor_2 (
        struct IThemeColor * colorTab );
    HRESULT easy_addImage (
        struct IExcelImage * xlsImage );
    HRESULT easy_addImage_2 (
        _bstr_t path );
    HRESULT easy_removeImage (
        long index );
    HRESULT easy_removeImage_2 (
        _bstr_t path );
    IExcelImagePtr easy_getImageAt (
        long index );
    IExcelImagePtr easy_getImage (
        _bstr_t path );
    long ImageCount ( );
    HRESULT Dispose ( );
    IExcelSheetPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsSheetSelected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetSelected (
        /*[in]*/ VARIANT_BOOL IsSheetSelected ) = 0;
      virtual HRESULT __stdcall raw_IsSheetProtected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetProtected (
        /*[in]*/ VARIANT_BOOL IsSheetProtected ) = 0;
      virtual HRESULT __stdcall raw_setProtectionPassword (
        /*[in]*/ BSTR sPassword ) = 0;
      virtual HRESULT __stdcall raw_IsHidden (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHidden (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_getSheetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetName (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_getZoom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setZoom (
        /*[in]*/ long zoom ) = 0;
      virtual HRESULT __stdcall raw_getTabColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTabThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTabColor (
        /*[in]*/ long colorTab ) = 0;
      virtual HRESULT __stdcall raw_setTabColor_2 (
        /*[in]*/ struct IThemeColor * colorTab ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage (
        /*[in]*/ struct IExcelImage * xlsImage ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_2 (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_removeImage (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeImage_2 (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_getImageAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getImage (
        /*[in]*/ BSTR path,
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImageCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelSheet * * pRetVal ) = 0;
};

struct __declspec(uuid("98c1308c-62a1-3f93-8add-a54c1da6c409"))
IUnknownSheet : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IExcelSheetPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelSheet * * pRetVal ) = 0;
};

struct __declspec(uuid("41e2e077-0a18-4edc-963d-67b4b830f001"))
IFillFormat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsNoFill ( );
    HRESULT setNoFill (
        VARIANT_BOOL noFill );
    VARIANT_BOOL IsSolidFill ( );
    HRESULT setSolidFill (
        long background,
        long transparency );
    HRESULT setSolidFill_2 (
        const _variant_t & background,
        long transparency );
    long getTransparency ( );
    long getBackground ( );
    HRESULT setBackground (
        long background );
    IThemeColorPtr getBackgroundThemeColor ( );
    HRESULT setBackground_2 (
        struct IThemeColor * ThemeColor );
    long getPattern ( );
    HRESULT setPattern (
        long pattern );
    long getForeground ( );
    HRESULT setForeground (
        long foreground );
    VARIANT_BOOL IsPatternFill ( );
    VARIANT_BOOL IsGradientFill ( );
    HRESULT setGradientFill (
        long presetColors );
    long getGradientType ( );
    HRESULT setGradientType (
        long type );
    float getGradientAngle ( );
    HRESULT setGradientAngle (
        float angle );
    long getGradientDirection ( );
    HRESULT setGradientDirection (
        long direction );
    HRESULT addGradientStop (
        long position,
        long color,
        long transparency );
    HRESULT addGradientStop_2 (
        long position,
        const _variant_t & color,
        long transparency );
    HRESULT addGradientStop_3 (
        struct IGradientStop * stop );
    IGradientStopPtr getGradientStopAt (
        long stop );
    HRESULT removeGradientStopAt (
        long stop );
    long GradientStopCount ( );
    VARIANT_BOOL IsRotateWithShape ( );
    HRESULT setRotateWithShape (
        VARIANT_BOOL IsRotateWithShape );
    VARIANT_BOOL IsPictureFill ( );
    HRESULT setPictureFill (
        _bstr_t path,
        long transparency );
    HRESULT setPictureFill_2 (
        const _variant_t & xlsImage,
        long transparency );
    HRESULT setTextureFill (
        long presetTexture );
    IExcelImagePtr getTexturePicture ( );
    VARIANT_BOOL IsTilePictureAsTexture ( );
    HRESULT setTilingOptions (
        float offsetX,
        float offsetY,
        float scaleX,
        float scaleY,
        _bstr_t alignment,
        _bstr_t mirrorType );
    HRESULT setStretchOptions (
        float leftOffset,
        float rightOffset,
        float topOffset,
        float bottomOffset );
    float getTileOffsetX ( );
    float getTileOffsetY ( );
    float getTileScaleX ( );
    float getTileScaleY ( );
    _bstr_t getTileAlignment ( );
    _bstr_t getTileMirrorType ( );
    float getStretchLeftOffset ( );
    float getStretchRightOffset ( );
    float getStretchTopOffset ( );
    float getStretchBottomOffset ( );
    VARIANT_BOOL isAutomatic ( );
    HRESULT setAutomatic (
        VARIANT_BOOL isAutomatic );
    IFillFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsNoFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNoFill (
        /*[in]*/ VARIANT_BOOL noFill ) = 0;
      virtual HRESULT __stdcall raw_IsSolidFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSolidFill (
        /*[in]*/ long background,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_setSolidFill_2 (
        /*[in]*/ VARIANT background,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_getTransparency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_getBackgroundThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground_2 (
        /*[in]*/ struct IThemeColor * ThemeColor ) = 0;
      virtual HRESULT __stdcall raw_getPattern (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPattern (
        /*[in]*/ long pattern ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_IsPatternFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsGradientFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientFill (
        /*[in]*/ long presetColors ) = 0;
      virtual HRESULT __stdcall raw_getGradientType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientType (
        /*[in]*/ long type ) = 0;
      virtual HRESULT __stdcall raw_getGradientAngle (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientAngle (
        /*[in]*/ float angle ) = 0;
      virtual HRESULT __stdcall raw_getGradientDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGradientDirection (
        /*[in]*/ long direction ) = 0;
      virtual HRESULT __stdcall raw_addGradientStop (
        /*[in]*/ long position,
        /*[in]*/ long color,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_addGradientStop_2 (
        /*[in]*/ long position,
        /*[in]*/ VARIANT color,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_addGradientStop_3 (
        /*[in]*/ struct IGradientStop * stop ) = 0;
      virtual HRESULT __stdcall raw_getGradientStopAt (
        /*[in]*/ long stop,
        /*[out,retval]*/ struct IGradientStop * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeGradientStopAt (
        /*[in]*/ long stop ) = 0;
      virtual HRESULT __stdcall raw_GradientStopCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsRotateWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRotateWithShape (
        /*[in]*/ VARIANT_BOOL IsRotateWithShape ) = 0;
      virtual HRESULT __stdcall raw_IsPictureFill (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPictureFill (
        /*[in]*/ BSTR path,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_setPictureFill_2 (
        /*[in]*/ VARIANT xlsImage,
        /*[in]*/ long transparency ) = 0;
      virtual HRESULT __stdcall raw_setTextureFill (
        /*[in]*/ long presetTexture ) = 0;
      virtual HRESULT __stdcall raw_getTexturePicture (
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTilePictureAsTexture (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTilingOptions (
        /*[in]*/ float offsetX,
        /*[in]*/ float offsetY,
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY,
        /*[in]*/ BSTR alignment,
        /*[in]*/ BSTR mirrorType ) = 0;
      virtual HRESULT __stdcall raw_setStretchOptions (
        /*[in]*/ float leftOffset,
        /*[in]*/ float rightOffset,
        /*[in]*/ float topOffset,
        /*[in]*/ float bottomOffset ) = 0;
      virtual HRESULT __stdcall raw_getTileOffsetX (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTileOffsetY (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTileScaleX (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTileScaleY (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTileAlignment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTileMirrorType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getStretchLeftOffset (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getStretchRightOffset (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getStretchTopOffset (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getStretchBottomOffset (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_isAutomatic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomatic (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
};

struct __declspec(uuid("19690ea0-b0ca-4fd8-b781-eb8fb15d1146"))
IExcelDataLabels : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAlignmentFormatPtr getAlignmentFormat ( );
    HRESULT setAlignmentFormat (
        struct IAlignmentFormat * AlignmentFormat );
    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );
    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    VARIANT_BOOL ShowSeriesName ( );
    HRESULT setShowSeriesName (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowCategoryName ( );
    HRESULT setShowCategoryName (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowValue ( );
    HRESULT setShowValue (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowPercentage ( );
    HRESULT setShowPercentage (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowBubbleSize ( );
    HRESULT setShowBubbleSize (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowLeaderLines ( );
    HRESULT setShowLeaderLines (
        VARIANT_BOOL show );
    _bstr_t getLabelPosition ( );
    HRESULT setLabelPosition (
        _bstr_t labelPosition );
    VARIANT_BOOL getShowLegendKeyNextToLabel ( );
    HRESULT setShowLegendKeyNextToLabel (
        VARIANT_BOOL value );
    _bstr_t getSeparator ( );
    HRESULT setSeparator (
        _bstr_t separator );
    _bstr_t getNumberFormat ( );
    HRESULT setNumberFormat (
        _bstr_t numberFormat );
    HRESULT setNumberFormatLinked (
        VARIANT_BOOL isNumberFormatLinked );
    VARIANT_BOOL isNumberFormatLinked ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getAlignmentFormat (
        /*[out,retval]*/ struct IAlignmentFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAlignmentFormat (
        /*[in]*/ struct IAlignmentFormat * AlignmentFormat ) = 0;
      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowSeriesName (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowCategoryName (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowValue (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowPercentage (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowBubbleSize (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowLeaderLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowLeaderLines (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_getLabelPosition (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLabelPosition (
        /*[in]*/ BSTR labelPosition ) = 0;
      virtual HRESULT __stdcall raw_getShowLegendKeyNextToLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowLegendKeyNextToLabel (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_getSeparator (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSeparator (
        /*[in]*/ BSTR separator ) = 0;
      virtual HRESULT __stdcall raw_getNumberFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNumberFormat (
        /*[in]*/ BSTR numberFormat ) = 0;
      virtual HRESULT __stdcall raw_setNumberFormatLinked (
        /*[in]*/ VARIANT_BOOL isNumberFormatLinked ) = 0;
      virtual HRESULT __stdcall raw_isNumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("0aa20e06-ae78-39b9-8547-5f5597ebe931"))
IExcelPlotArea : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    long getBorderStyle ( );
    HRESULT setBorderStyle (
        long borderStyle );
    long getBorderWeight ( );
    HRESULT setBorderWeight (
        long borderWeight );
    long getBorderColor ( );
    HRESULT setBorderColor (
        long borderColor );
    long getBackground ( );
    HRESULT setBackground (
        long background );
    IExcelPlotAreaPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_getBorderStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyle (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBorderWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderWeight (
        /*[in]*/ long borderWeight ) = 0;
      virtual HRESULT __stdcall raw_getBorderColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderColor (
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelPlotArea * * pRetVal ) = 0;
};

struct __declspec(uuid("28167d30-0a76-4d20-b3e3-2a5124e6aaff"))
IExcelTitle : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAlignmentFormatPtr getAlignmentFormat ( );
    HRESULT setAlignmentFormat (
        struct IAlignmentFormat * AlignmentFormat );
    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );
    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    HRESULT setText (
        _bstr_t text );
    _bstr_t getText ( );
    IExcelTitlePtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getAlignmentFormat (
        /*[out,retval]*/ struct IAlignmentFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAlignmentFormat (
        /*[in]*/ struct IAlignmentFormat * AlignmentFormat ) = 0;
      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_setText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getText (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelTitle * * pRetVal ) = 0;
};

struct __declspec(uuid("5ba017d4-9b3a-3d39-b3a1-843dbd18dba7"))
IExcelDataTable : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );
    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    VARIANT_BOOL IsVisible ( );
    HRESULT setVisible (
        VARIANT_BOOL value );
    long getLineStyle ( );
    HRESULT setLineStyle (
        long lineStyle );
    long getLineColor ( );
    HRESULT setLineColor (
        long lineColor );
    long getLineWeight ( );
    HRESULT setLineWeight (
        long lineWeight );
    VARIANT_BOOL HasLegendKey ( );
    HRESULT setLegendKey (
        VARIANT_BOOL value );
    VARIANT_BOOL HasHorizontalLines ( );
    HRESULT setHorizontalLines (
        VARIANT_BOOL value );
    VARIANT_BOOL HasVerticalLines ( );
    HRESULT setVerticalLines (
        VARIANT_BOOL value );
    VARIANT_BOOL HasOutlineLines ( );
    HRESULT setOutlineLines (
        VARIANT_BOOL value );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    long getForeground ( );
    HRESULT setForeground (
        long fontColor );
    HRESULT setFontSettings (
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    IExcelDataTablePtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVisible (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_getLineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyle (
        /*[in]*/ long lineStyle ) = 0;
      virtual HRESULT __stdcall raw_getLineColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColor (
        /*[in]*/ long lineColor ) = 0;
      virtual HRESULT __stdcall raw_getLineWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineWeight (
        /*[in]*/ long lineWeight ) = 0;
      virtual HRESULT __stdcall raw_HasLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLegendKey (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_HasHorizontalLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHorizontalLines (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_HasVerticalLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVerticalLines (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_HasOutlineLines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setOutlineLines (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long fontColor ) = 0;
      virtual HRESULT __stdcall raw_setFontSettings (
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelDataTable * * pRetVal ) = 0;
};

struct __declspec(uuid("718fb25f-dfac-3494-ae9c-e047e1988a57"))
IExcelChartLegend : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );
    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    VARIANT_BOOL IsVisible ( );
    HRESULT setVisible (
        VARIANT_BOOL value );
    long getBorderStyle ( );
    HRESULT setBorderStyle (
        long borderStyle );
    long getBorderWeight ( );
    HRESULT setBorderWeight (
        long borderWeight );
    long getBorderColor ( );
    HRESULT setBorderColor (
        long borderColor );
    VARIANT_BOOL IsShadow ( );
    HRESULT setShadow (
        VARIANT_BOOL IsShadow );
    long getForeground ( );
    HRESULT setForeground (
        long foreground );
    long getBackground ( );
    HRESULT setBackground (
        long background );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    HRESULT setFontSettings (
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    long getPlacement ( );
    HRESULT setPlacement (
        long location );
    long getKeysArrangementDirection ( );
    HRESULT setKeysArrangementDirection (
        long direction );
    IExcelChartLegendPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVisible (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_getBorderStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyle (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBorderWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderWeight (
        /*[in]*/ long borderWeight ) = 0;
      virtual HRESULT __stdcall raw_getBorderColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderColor (
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_IsShadow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadow (
        /*[in]*/ VARIANT_BOOL IsShadow ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_setFontSettings (
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_getPlacement (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPlacement (
        /*[in]*/ long location ) = 0;
      virtual HRESULT __stdcall raw_getKeysArrangementDirection (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setKeysArrangementDirection (
        /*[in]*/ long direction ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelChartLegend * * pRetVal ) = 0;
};

struct __declspec(uuid("f57b6fac-637d-36a1-8513-a492d17a14fd"))
IExcelSeries : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    _bstr_t getName ( );
    HRESULT setName (
        _bstr_t seriesName );
    _bstr_t getValues ( );
    HRESULT setValues (
        _bstr_t seriesValues );
    long getLineStyle ( );
    HRESULT setLineStyle (
        long lineStyle );
    long getLineWeight ( );
    HRESULT setLineWeight (
        long lineWeight );
    long getLineColor ( );
    HRESULT setLineColor (
        long lineColor );
    VARIANT_BOOL IsShadow ( );
    HRESULT setShadow (
        VARIANT_BOOL IsShadow );
    long getBackground ( );
    HRESULT setBackground (
        long background );
    IExcelDataLabelsPtr getDataLabels ( );
    HRESULT setDataLabels (
        long dataLabels );
    HRESULT setDataLabels_2 (
        struct IExcelDataLabels * xlsDataLabels );
    VARIANT_BOOL ShowDataLabels ( );
    HRESULT setShowDataLabels (
        VARIANT_BOOL show );
    VARIANT_BOOL getShowLegendKeyNextToLabel ( );
    HRESULT setShowLegendKeyNextToLabel (
        VARIANT_BOOL value );
    long getMarkerType ( );
    HRESULT setMarkerType (
        long markerType );
    long getMarkerSize ( );
    HRESULT setMarkerSize (
        long markerSize );
    IFillFormatPtr getMarkerFillFormat ( );
    HRESULT setMarkerFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getMarkerLineColorFormat ( );
    HRESULT setMarkerLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getMarkerLineStyleFormat ( );
    HRESULT setMarkerLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    VARIANT_BOOL IsInvertIfNegative ( );
    HRESULT setInvertIfNegative (
        VARIANT_BOOL invertIfNegative );
    float getStackScale ( );
    HRESULT setStackScale (
        float scale );
    VARIANT_BOOL IsSmoothedLine ( );
    HRESULT setSmoothedLine (
        VARIANT_BOOL IsSmoothedLine );
    IExcelSeriesPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setName (
        /*[in]*/ BSTR seriesName ) = 0;
      virtual HRESULT __stdcall raw_getValues (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setValues (
        /*[in]*/ BSTR seriesValues ) = 0;
      virtual HRESULT __stdcall raw_getLineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyle (
        /*[in]*/ long lineStyle ) = 0;
      virtual HRESULT __stdcall raw_getLineWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineWeight (
        /*[in]*/ long lineWeight ) = 0;
      virtual HRESULT __stdcall raw_getLineColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColor (
        /*[in]*/ long lineColor ) = 0;
      virtual HRESULT __stdcall raw_IsShadow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadow (
        /*[in]*/ VARIANT_BOOL IsShadow ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_getDataLabels (
        /*[out,retval]*/ struct IExcelDataLabels * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataLabels (
        /*[in]*/ long dataLabels ) = 0;
      virtual HRESULT __stdcall raw_setDataLabels_2 (
        /*[in]*/ struct IExcelDataLabels * xlsDataLabels ) = 0;
      virtual HRESULT __stdcall raw_ShowDataLabels (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowDataLabels (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_getShowLegendKeyNextToLabel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowLegendKeyNextToLabel (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_getMarkerType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMarkerType (
        /*[in]*/ long markerType ) = 0;
      virtual HRESULT __stdcall raw_getMarkerSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMarkerSize (
        /*[in]*/ long markerSize ) = 0;
      virtual HRESULT __stdcall raw_getMarkerFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMarkerFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getMarkerLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMarkerLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getMarkerLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMarkerLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_IsInvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setInvertIfNegative (
        /*[in]*/ VARIANT_BOOL invertIfNegative ) = 0;
      virtual HRESULT __stdcall raw_getStackScale (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStackScale (
        /*[in]*/ float scale ) = 0;
      virtual HRESULT __stdcall raw_IsSmoothedLine (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSmoothedLine (
        /*[in]*/ VARIANT_BOOL IsSmoothedLine ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelSeries * * pRetVal ) = 0;
};

struct __declspec(uuid("e916225b-a410-361e-bcf9-09eca6e6eb5b"))
IExcelChartArea : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );
    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    long getBorderStyle ( );
    HRESULT setBorderStyle (
        long borderStyle );
    long getBorderWeight ( );
    HRESULT setBorderWeight (
        long borderWeight );
    long getBorderColor ( );
    HRESULT setBorderColor (
        long borderColor );
    VARIANT_BOOL IsShadow ( );
    HRESULT setShadow (
        VARIANT_BOOL IsShadow );
    long getForeground ( );
    HRESULT setForeground (
        long foreground );
    long getBackground ( );
    HRESULT setBackground (
        long background );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    HRESULT setFontSettings (
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    VARIANT_BOOL HasRoundedCorners ( );
    HRESULT setRoundedCorners (
        VARIANT_BOOL roundedCorners );
    IExcelChartAreaPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_getBorderStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderStyle (
        /*[in]*/ long borderStyle ) = 0;
      virtual HRESULT __stdcall raw_getBorderWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderWeight (
        /*[in]*/ long borderWeight ) = 0;
      virtual HRESULT __stdcall raw_getBorderColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBorderColor (
        /*[in]*/ long borderColor ) = 0;
      virtual HRESULT __stdcall raw_IsShadow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadow (
        /*[in]*/ VARIANT_BOOL IsShadow ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_getBackground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBackground (
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_setFontSettings (
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_HasRoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRoundedCorners (
        /*[in]*/ VARIANT_BOOL roundedCorners ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelChartArea * * pRetVal ) = 0;
};

struct __declspec(uuid("db83c9f8-e455-3505-bf80-4079f30f97ab"))
IExcelAxis : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAlignmentFormatPtr getAlignmentFormat ( );
    HRESULT setAlignmentFormat (
        struct IAlignmentFormat * AlignmentFormat );
    IFontFormatPtr getFontFormat ( );
    HRESULT setFontFormat (
        struct IFontFormat * FontFormat );
    IFormat3DPtr get3DFormat ( );
    HRESULT set3DFormat (
        struct IFormat3D * Format3D );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    HRESULT setLabel (
        _bstr_t label );
    _bstr_t getLabel ( );
    HRESULT setAxisTitle (
        struct IExcelTitle * xlsTitle );
    IExcelTitlePtr getAxisTitle ( );
    HRESULT setVisible (
        VARIANT_BOOL IsVisible );
    VARIANT_BOOL IsVisible ( );
    long getLineStyle ( );
    HRESULT setLineStyle (
        long lineStyle );
    long getLineWeight ( );
    HRESULT setLineWeight (
        long axisWeight );
    long getLineColor ( );
    HRESULT setLineColor (
        long lineColor );
    long getMajorTickMarkType ( );
    HRESULT setMajorTickMarkType (
        long majorTickMarkType );
    long getMinorTickMarkType ( );
    HRESULT setMinorTickMarkType (
        long minorTickMarkType );
    long getTickMarkLabel ( );
    HRESULT setTickMarkLabel (
        long tickMarkLabel );
    long getForeground ( );
    HRESULT setForeground (
        long foreground );
    VARIANT_BOOL IsStrikethrough ( );
    HRESULT setStrikethrough (
        VARIANT_BOOL IsStrikethrough );
    VARIANT_BOOL IsSuperscript ( );
    HRESULT setSuperscript (
        VARIANT_BOOL IsSuperscript );
    VARIANT_BOOL IsSubscript ( );
    HRESULT setSubscript (
        VARIANT_BOOL IsSubscript );
    long getUnderlineStyle ( );
    HRESULT setUnderlineStyle (
        long UnderlineStyle );
    long getFontSize ( );
    HRESULT setFontSize (
        long fontSize );
    _bstr_t getFont ( );
    HRESULT setFont (
        _bstr_t fontName );
    VARIANT_BOOL isBold ( );
    HRESULT setBold (
        VARIANT_BOOL isBold );
    VARIANT_BOOL isItalic ( );
    HRESULT setItalic (
        VARIANT_BOOL isItalic );
    HRESULT setFontSettings (
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    _bstr_t getNumberFormat ( );
    HRESULT setNumberFormat (
        _bstr_t numberFormat );
    VARIANT_BOOL isNumberFormatLinked ( );
    HRESULT setNumberFormatLinked (
        VARIANT_BOOL isNumberFormatLinked );
    long getRotationDegrees ( );
    HRESULT setRotationDegrees (
        long rotationDegrees );
    double getMinimumValue ( );
    HRESULT setMinimumValue (
        double minimumValue );
    VARIANT_BOOL IsAutomaticMinimumValue ( );
    HRESULT setAutomaticMinimumValue (
        VARIANT_BOOL isAutomatic );
    double getMaximumValue ( );
    HRESULT setMaximumValue (
        double maximumValue );
    VARIANT_BOOL IsAutomaticMaximumValue ( );
    HRESULT setAutomaticMaximumValue (
        VARIANT_BOOL isAutomatic );
    double getMajorUnit ( );
    HRESULT setMajorUnit (
        double majorUnit );
    VARIANT_BOOL IsAutomaticMajorUnit ( );
    HRESULT setAutomaticMajorUnit (
        VARIANT_BOOL isAutomatic );
    double getMinorUnit ( );
    HRESULT setMinorUnit (
        double minorUnit );
    VARIANT_BOOL IsAutomaticMinorUnit ( );
    HRESULT setAutomaticMinorUnit (
        VARIANT_BOOL isAutomatic );
    double getCrossValue ( );
    HRESULT setCrossValue (
        double crossValue );
    VARIANT_BOOL IsAutomaticCategoryAxisCrossesValue ( );
    HRESULT setAutomaticCategoryAxisCrossesValue (
        VARIANT_BOOL isAutomatic );
    VARIANT_BOOL IsLogarithmicScale ( );
    HRESULT setLogarithmicScale (
        VARIANT_BOOL IsLogarithmicScale );
    VARIANT_BOOL IsReverseOrder ( );
    HRESULT setReverseOrder (
        VARIANT_BOOL IsReverseOrder );
    VARIANT_BOOL IsMaximumCross ( );
    HRESULT setMaximumCross (
        VARIANT_BOOL IsMaximumCross );
    long getLabelFrequency ( );
    HRESULT setLabelFrequency (
        long labelFrequency );
    long getTickMarksFrequency ( );
    HRESULT setTickMarksFrequency (
        long tickMarksFrequency );
    VARIANT_BOOL IsCrossedBetweenCategories ( );
    HRESULT setCrossedBetweenCategories (
        VARIANT_BOOL between );
    IExcelAxisPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getAlignmentFormat (
        /*[out,retval]*/ struct IAlignmentFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAlignmentFormat (
        /*[in]*/ struct IAlignmentFormat * AlignmentFormat ) = 0;
      virtual HRESULT __stdcall raw_getFontFormat (
        /*[out,retval]*/ struct IFontFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontFormat (
        /*[in]*/ struct IFontFormat * FontFormat ) = 0;
      virtual HRESULT __stdcall raw_get3DFormat (
        /*[out,retval]*/ struct IFormat3D * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_set3DFormat (
        /*[in]*/ struct IFormat3D * Format3D ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_setLabel (
        /*[in]*/ BSTR label ) = 0;
      virtual HRESULT __stdcall raw_getLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAxisTitle (
        /*[in]*/ struct IExcelTitle * xlsTitle ) = 0;
      virtual HRESULT __stdcall raw_getAxisTitle (
        /*[out,retval]*/ struct IExcelTitle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVisible (
        /*[in]*/ VARIANT_BOOL IsVisible ) = 0;
      virtual HRESULT __stdcall raw_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyle (
        /*[in]*/ long lineStyle ) = 0;
      virtual HRESULT __stdcall raw_getLineWeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineWeight (
        /*[in]*/ long axisWeight ) = 0;
      virtual HRESULT __stdcall raw_getLineColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColor (
        /*[in]*/ long lineColor ) = 0;
      virtual HRESULT __stdcall raw_getMajorTickMarkType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMajorTickMarkType (
        /*[in]*/ long majorTickMarkType ) = 0;
      virtual HRESULT __stdcall raw_getMinorTickMarkType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMinorTickMarkType (
        /*[in]*/ long minorTickMarkType ) = 0;
      virtual HRESULT __stdcall raw_getTickMarkLabel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTickMarkLabel (
        /*[in]*/ long tickMarkLabel ) = 0;
      virtual HRESULT __stdcall raw_getForeground (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setForeground (
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_IsStrikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStrikethrough (
        /*[in]*/ VARIANT_BOOL IsStrikethrough ) = 0;
      virtual HRESULT __stdcall raw_IsSuperscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSuperscript (
        /*[in]*/ VARIANT_BOOL IsSuperscript ) = 0;
      virtual HRESULT __stdcall raw_IsSubscript (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubscript (
        /*[in]*/ VARIANT_BOOL IsSubscript ) = 0;
      virtual HRESULT __stdcall raw_getUnderlineStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUnderlineStyle (
        /*[in]*/ long UnderlineStyle ) = 0;
      virtual HRESULT __stdcall raw_getFontSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFontSize (
        /*[in]*/ long fontSize ) = 0;
      virtual HRESULT __stdcall raw_getFont (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFont (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall raw_isBold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBold (
        /*[in]*/ VARIANT_BOOL isBold ) = 0;
      virtual HRESULT __stdcall raw_isItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setItalic (
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_setFontSettings (
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_getNumberFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNumberFormat (
        /*[in]*/ BSTR numberFormat ) = 0;
      virtual HRESULT __stdcall raw_isNumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setNumberFormatLinked (
        /*[in]*/ VARIANT_BOOL isNumberFormatLinked ) = 0;
      virtual HRESULT __stdcall raw_getRotationDegrees (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRotationDegrees (
        /*[in]*/ long rotationDegrees ) = 0;
      virtual HRESULT __stdcall raw_getMinimumValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMinimumValue (
        /*[in]*/ double minimumValue ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticMinimumValue (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticMinimumValue (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getMaximumValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMaximumValue (
        /*[in]*/ double maximumValue ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticMaximumValue (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticMaximumValue (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getMajorUnit (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMajorUnit (
        /*[in]*/ double majorUnit ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticMajorUnit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticMajorUnit (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getMinorUnit (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMinorUnit (
        /*[in]*/ double minorUnit ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticMinorUnit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticMinorUnit (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_getCrossValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCrossValue (
        /*[in]*/ double crossValue ) = 0;
      virtual HRESULT __stdcall raw_IsAutomaticCategoryAxisCrossesValue (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutomaticCategoryAxisCrossesValue (
        /*[in]*/ VARIANT_BOOL isAutomatic ) = 0;
      virtual HRESULT __stdcall raw_IsLogarithmicScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLogarithmicScale (
        /*[in]*/ VARIANT_BOOL IsLogarithmicScale ) = 0;
      virtual HRESULT __stdcall raw_IsReverseOrder (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setReverseOrder (
        /*[in]*/ VARIANT_BOOL IsReverseOrder ) = 0;
      virtual HRESULT __stdcall raw_IsMaximumCross (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMaximumCross (
        /*[in]*/ VARIANT_BOOL IsMaximumCross ) = 0;
      virtual HRESULT __stdcall raw_getLabelFrequency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLabelFrequency (
        /*[in]*/ long labelFrequency ) = 0;
      virtual HRESULT __stdcall raw_getTickMarksFrequency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTickMarksFrequency (
        /*[in]*/ long tickMarksFrequency ) = 0;
      virtual HRESULT __stdcall raw_IsCrossedBetweenCategories (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCrossedBetweenCategories (
        /*[in]*/ VARIANT_BOOL between ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelAxis * * pRetVal ) = 0;
};

struct __declspec(uuid("b6972636-0b4a-437b-98d4-0d99754fb552"))
IExcelChart : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setLeftUpperCorner (
        long row,
        long column );
    HRESULT setLeftUpperCorner_2 (
        _bstr_t cellReference );
    long getLeftUpperCornerRow ( );
    long getLeftUpperCornerColumn ( );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    HRESULT setLeftUpperOffset (
        long horizontalOffset,
        long verticalOffset );
    long getHorizontalOffset ( );
    long getVerticalOffset ( );
    HRESULT setSize (
        long chartWidth,
        long chartHeight );
    long getHeight ( );
    long getWidth ( );
    HRESULT easy_setChartType (
        long chartType );
    long easy_getChartType ( );
    HRESULT easy_addSeries (
        struct IExcelSeries * xlsChartSeries );
    HRESULT easy_addSeries_2 (
        _bstr_t seriesName,
        _bstr_t seriesValues );
    HRESULT easy_removeSeries (
        long index );
    IExcelSeriesPtr easy_getSeriesAt (
        long index );
    long SeriesCount ( );
    HRESULT easy_setCategoryXAxisLabels (
        _bstr_t formulaCategoryXAxisLabels );
    _bstr_t easy_getCategoryXAxisLabels ( );
    HRESULT easy_setTitle (
        _bstr_t title );
    _bstr_t easy_getTitle ( );
    IExcelTitlePtr getChartTitle ( );
    HRESULT setChartTitle (
        struct IExcelTitle * xlsTitle );
    IExcelChartAreaPtr easy_getChartArea ( );
    HRESULT easy_setChartArea (
        struct IExcelChartArea * xlsChartArea );
    IExcelPlotAreaPtr easy_getPlotArea ( );
    HRESULT easy_setPlotArea (
        struct IExcelPlotArea * xlsPlotArea );
    IExcelChartLegendPtr easy_getLegend ( );
    HRESULT easy_setLegend (
        struct IExcelChartLegend * xlsLegend );
    IExcelAxisPtr easy_getCategoryXAxis ( );
    HRESULT easy_setCategoryXAxis (
        struct IExcelAxis * xlsCategoryXAxis );
    HRESULT easy_setValueYAxis (
        struct IExcelAxis * xlsValueYAxis );
    IExcelAxisPtr easy_getValueYAxis ( );
    HRESULT easy_setXAxisMajorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getXAxisMajorGridlines ( );
    HRESULT easy_setYAxisMajorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getYAxisMajorGridlines ( );
    HRESULT easy_setXAxisMinorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getXAxisMinorGridlines ( );
    HRESULT easy_setYAxisMinorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getYAxisMinorGridlines ( );
    HRESULT easy_setChartDataTable (
        struct IExcelDataTable * xlsChartDataTable );
    IExcelDataTablePtr easy_getChartDataTable ( );
    HRESULT easy_setSeriesOverlap (
        long overlap );
    long easy_getSeriesOverlap ( );
    HRESULT easy_setSeriesGap (
        long gap );
    long easy_getSeriesGap ( );
    HRESULT easy_set3DRotation (
        long n3DRotation );
    long easy_get3DRotation ( );
    HRESULT easy_set3DElevation (
        long n3DElevation );
    long easy_get3DElevation ( );
    HRESULT easy_set3DHeight (
        long n3DHeight );
    long easy_get3DHeight ( );
    HRESULT easy_set3DPerspective (
        long n3DPerspective );
    long easy_get3DPerspective ( );
    HRESULT easy_setUse3DPerspective (
        VARIANT_BOOL use3DPerspective );
    VARIANT_BOOL easy_Use3DPerspective ( );
    HRESULT setFirstSliceAngle (
        long angle );
    long getFirstSliceAngle ( );
    HRESULT setVariableColorsBySlice (
        VARIANT_BOOL isVariableColor );
    VARIANT_BOOL HasVariableColorsBySlice ( );
    HRESULT setPieExplosion (
        long distance );
    long getPieExplosion ( );
    HRESULT splitSeriesByPosition (
        long values );
    HRESULT splitSeriesByValue (
        double value );
    HRESULT splitSeriesByPercentageValue (
        long value );
    double getSplitPosition ( );
    long getSplitType ( );
    long getSecondPlotSize ( );
    HRESULT setSecondPlotSize (
        long size );
    long getDoughnutHoleSize ( );
    HRESULT setDoughnutHoleSize (
        long size );
    long getBubbleScale ( );
    HRESULT setBubbleScale (
        long percent );
    long getBubbleSize ( );
    HRESULT setBubbleSize (
        long bubbleSize );
    HRESULT setShowNegativeBubbles (
        VARIANT_BOOL visible );
    VARIANT_BOOL ShowNegativeBubbles ( );
    long getStyle ( );
    HRESULT setStyle (
        long style );
    IExcelChartPtr Clone ( );
    HRESULT Dispose ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setLeftUpperCorner (
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperCorner_2 (
        /*[in]*/ BSTR cellReference ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperOffset (
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSize (
        /*[in]*/ long chartWidth,
        /*[in]*/ long chartHeight ) = 0;
      virtual HRESULT __stdcall raw_getHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setChartType (
        /*[in]*/ long chartType ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addSeries (
        /*[in]*/ struct IExcelSeries * xlsChartSeries ) = 0;
      virtual HRESULT __stdcall raw_easy_addSeries_2 (
        /*[in]*/ BSTR seriesName,
        /*[in]*/ BSTR seriesValues ) = 0;
      virtual HRESULT __stdcall raw_easy_removeSeries (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_getSeriesAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelSeries * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SeriesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setCategoryXAxisLabels (
        /*[in]*/ BSTR formulaCategoryXAxisLabels ) = 0;
      virtual HRESULT __stdcall raw_easy_getCategoryXAxisLabels (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setTitle (
        /*[in]*/ BSTR title ) = 0;
      virtual HRESULT __stdcall raw_easy_getTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getChartTitle (
        /*[out,retval]*/ struct IExcelTitle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setChartTitle (
        /*[in]*/ struct IExcelTitle * xlsTitle ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartArea (
        /*[out,retval]*/ struct IExcelChartArea * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setChartArea (
        /*[in]*/ struct IExcelChartArea * xlsChartArea ) = 0;
      virtual HRESULT __stdcall raw_easy_getPlotArea (
        /*[out,retval]*/ struct IExcelPlotArea * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setPlotArea (
        /*[in]*/ struct IExcelPlotArea * xlsPlotArea ) = 0;
      virtual HRESULT __stdcall raw_easy_getLegend (
        /*[out,retval]*/ struct IExcelChartLegend * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setLegend (
        /*[in]*/ struct IExcelChartLegend * xlsLegend ) = 0;
      virtual HRESULT __stdcall raw_easy_getCategoryXAxis (
        /*[out,retval]*/ struct IExcelAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setCategoryXAxis (
        /*[in]*/ struct IExcelAxis * xlsCategoryXAxis ) = 0;
      virtual HRESULT __stdcall raw_easy_setValueYAxis (
        /*[in]*/ struct IExcelAxis * xlsValueYAxis ) = 0;
      virtual HRESULT __stdcall raw_easy_getValueYAxis (
        /*[out,retval]*/ struct IExcelAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setXAxisMajorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getXAxisMajorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setYAxisMajorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getYAxisMajorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setXAxisMinorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getXAxisMinorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setYAxisMinorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getYAxisMinorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setChartDataTable (
        /*[in]*/ struct IExcelDataTable * xlsChartDataTable ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartDataTable (
        /*[out,retval]*/ struct IExcelDataTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setSeriesOverlap (
        /*[in]*/ long overlap ) = 0;
      virtual HRESULT __stdcall raw_easy_getSeriesOverlap (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setSeriesGap (
        /*[in]*/ long gap ) = 0;
      virtual HRESULT __stdcall raw_easy_getSeriesGap (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DRotation (
        /*[in]*/ long n3DRotation ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DRotation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DElevation (
        /*[in]*/ long n3DElevation ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DElevation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DHeight (
        /*[in]*/ long n3DHeight ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DPerspective (
        /*[in]*/ long n3DPerspective ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DPerspective (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setUse3DPerspective (
        /*[in]*/ VARIANT_BOOL use3DPerspective ) = 0;
      virtual HRESULT __stdcall raw_easy_Use3DPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstSliceAngle (
        /*[in]*/ long angle ) = 0;
      virtual HRESULT __stdcall raw_getFirstSliceAngle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVariableColorsBySlice (
        /*[in]*/ VARIANT_BOOL isVariableColor ) = 0;
      virtual HRESULT __stdcall raw_HasVariableColorsBySlice (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPieExplosion (
        /*[in]*/ long distance ) = 0;
      virtual HRESULT __stdcall raw_getPieExplosion (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_splitSeriesByPosition (
        /*[in]*/ long values ) = 0;
      virtual HRESULT __stdcall raw_splitSeriesByValue (
        /*[in]*/ double value ) = 0;
      virtual HRESULT __stdcall raw_splitSeriesByPercentageValue (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getSplitPosition (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSplitType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSecondPlotSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSecondPlotSize (
        /*[in]*/ long size ) = 0;
      virtual HRESULT __stdcall raw_getDoughnutHoleSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDoughnutHoleSize (
        /*[in]*/ long size ) = 0;
      virtual HRESULT __stdcall raw_getBubbleScale (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBubbleScale (
        /*[in]*/ long percent ) = 0;
      virtual HRESULT __stdcall raw_getBubbleSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBubbleSize (
        /*[in]*/ long bubbleSize ) = 0;
      virtual HRESULT __stdcall raw_setShowNegativeBubbles (
        /*[in]*/ VARIANT_BOOL visible ) = 0;
      virtual HRESULT __stdcall raw_ShowNegativeBubbles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStyle (
        /*[in]*/ long style ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelChart * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
};

struct __declspec(uuid("a1840315-0e85-3433-a1a7-094abcb182e8"))
IExcelChartSheet : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsSheetSelected ( );
    HRESULT setSheetSelected (
        VARIANT_BOOL IsSheetSelected );
    VARIANT_BOOL IsSheetProtected ( );
    HRESULT setSheetProtected (
        VARIANT_BOOL IsSheetProtected );
    HRESULT setProtectionPassword (
        _bstr_t sPassword );
    VARIANT_BOOL ProtectObjects ( );
    HRESULT setProtectObjects (
        VARIANT_BOOL protect );
    VARIANT_BOOL ProtectContents ( );
    HRESULT setProtectContents (
        VARIANT_BOOL protect );
    VARIANT_BOOL IsHidden ( );
    HRESULT setHidden (
        VARIANT_BOOL IsHidden );
    _bstr_t getSheetName ( );
    HRESULT setSheetName (
        _bstr_t sheetName );
    long getZoom ( );
    HRESULT setZoom (
        long zoom );
    long getTabColor ( );
    IThemeColorPtr getTabThemeColor ( );
    HRESULT setTabColor (
        long colorTab );
    HRESULT setTabColor_2 (
        struct IThemeColor * colorTab );
    HRESULT easy_addImage (
        struct IExcelImage * xlsImage );
    HRESULT easy_addImage_2 (
        _bstr_t path );
    HRESULT easy_addImage_3 (
        _bstr_t path,
        long horizontalOffset,
        long verticalOffset );
    HRESULT easy_addImage_4 (
        _bstr_t path,
        long horizontalOffset,
        long verticalOffset,
        long width,
        long height );
    HRESULT easy_removeImage (
        long index );
    HRESULT easy_removeImage_2 (
        _bstr_t path );
    IExcelImagePtr easy_getImageAt (
        long index );
    IExcelImagePtr easy_getImage (
        _bstr_t path );
    long ImageCount ( );
    HRESULT easy_setExcelChart (
        struct IExcelChart * xlsChart );
    IExcelChartPtr easy_getExcelChart ( );
    IExcelSheetPtr Clone ( );
    HRESULT Dispose ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsSheetSelected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetSelected (
        /*[in]*/ VARIANT_BOOL IsSheetSelected ) = 0;
      virtual HRESULT __stdcall raw_IsSheetProtected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetProtected (
        /*[in]*/ VARIANT_BOOL IsSheetProtected ) = 0;
      virtual HRESULT __stdcall raw_setProtectionPassword (
        /*[in]*/ BSTR sPassword ) = 0;
      virtual HRESULT __stdcall raw_ProtectObjects (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setProtectObjects (
        /*[in]*/ VARIANT_BOOL protect ) = 0;
      virtual HRESULT __stdcall raw_ProtectContents (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setProtectContents (
        /*[in]*/ VARIANT_BOOL protect ) = 0;
      virtual HRESULT __stdcall raw_IsHidden (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHidden (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_getSheetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetName (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_getZoom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setZoom (
        /*[in]*/ long zoom ) = 0;
      virtual HRESULT __stdcall raw_getTabColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTabThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTabColor (
        /*[in]*/ long colorTab ) = 0;
      virtual HRESULT __stdcall raw_setTabColor_2 (
        /*[in]*/ struct IThemeColor * colorTab ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage (
        /*[in]*/ struct IExcelImage * xlsImage ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_2 (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_4 (
        /*[in]*/ BSTR path,
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset,
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_easy_removeImage (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeImage_2 (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_getImageAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getImage (
        /*[in]*/ BSTR path,
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImageCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setExcelChart (
        /*[in]*/ struct IExcelChart * xlsChart ) = 0;
      virtual HRESULT __stdcall raw_easy_getExcelChart (
        /*[out,retval]*/ struct IExcelChart * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
};

struct __declspec(uuid("9047a116-4871-45bd-92f2-2afa73287d1c"))
IFillDrawingObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
};

struct __declspec(uuid("8cf51e8f-a7d1-34dc-b378-c2f6aae3ece1"))
ExcelImage;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IDrawingObject2D
    // [ default ] interface IExcelImage

struct __declspec(uuid("6eeb8f9f-649f-3aea-9b0a-1f763f17065e"))
ExcelComment;
    // interface _Object
    // interface IDrawingObject
    // interface ILineDrawingObject
    // interface IFillDrawingObject
    // interface IDrawingObject2D
    // [ default ] interface IExcelComment

struct __declspec(uuid("18345295-43b3-47bb-877d-eebaa4cca101"))
IExcelPivotTable : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getName ( );
    HRESULT setName (
        _bstr_t name );
    HRESULT setLocation (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn );
    HRESULT setLocation_2 (
        _bstr_t range );
    _bstr_t getLocation ( );
    HRESULT setSourceRange (
        _bstr_t formulaRange,
        const _variant_t & xls );
    _bstr_t getSourceRange ( );
    IExcelFieldPtr getFieldAt (
        long index );
    IExcelFieldPtr getField (
        _bstr_t name );
    long FieldCount ( );
    HRESULT addFieldToRowLabels (
        _bstr_t fieldName );
    long RowLabelsCount ( );
    HRESULT removeFieldFromRowLabels (
        _bstr_t fieldName );
    IExcelFieldPtr getRowLabelsFieldAt (
        long index );
    HRESULT addFieldToColumnLabels (
        _bstr_t fieldName );
    long ColumnLabelsCount ( );
    HRESULT removeFieldFromColumnLabels (
        _bstr_t fieldName );
    IExcelFieldPtr getColumnLabelsFieldAt (
        long index );
    HRESULT addFieldToReportFilter (
        _bstr_t fieldName );
    long ReportFilterCount ( );
    HRESULT removeFieldFromReportFilter (
        _bstr_t fieldName );
    IExcelFieldPtr getReportFilterFieldAt (
        long index );
    HRESULT addFieldToValues (
        _bstr_t fieldName,
        _bstr_t customName,
        long nSubtotal );
    long ValuesCount ( );
    HRESULT removeValueFieldFromValues (
        _bstr_t customFieldName );
    IExcelValueFieldPtr getValueField (
        _bstr_t name );
    IExcelValueFieldPtr getValueFieldAt (
        long index );
    HRESULT Refresh (
        struct IExcelDocument * xls );
    _bstr_t getRowHeaderTitle ( );
    HRESULT setRowHeaderTitle (
        _bstr_t text );
    _bstr_t getColumnHeaderTitle ( );
    HRESULT setColumnHeaderTitle (
        _bstr_t text );
    _bstr_t getDataHeaderTitle ( );
    HRESULT setDataHeaderTitle (
        _bstr_t text );
    _bstr_t getGrandTotalTitle ( );
    HRESULT setGrandTotalTitle (
        _bstr_t text );
    VARIANT_BOOL IsMergeAndCenterCellsWithLabels ( );
    HRESULT setMergeAndCenterCellsWithLabels (
        VARIANT_BOOL mergeAndCenterCellsWithLabels );
    long getRowLabelsIndent ( );
    HRESULT setRowLabelsIndent (
        long chars );
    VARIANT_BOOL IsPageOverThenDown ( );
    HRESULT setPageOverThenDown (
        VARIANT_BOOL IsPageOverThenDown );
    long getPageWrap ( );
    HRESULT setPageWrap (
        long fields );
    VARIANT_BOOL ShowError ( );
    _bstr_t getErrorValue ( );
    HRESULT setErrorValue (
        VARIANT_BOOL ShowError,
        _bstr_t value );
    VARIANT_BOOL ShowEmptyCells ( );
    _bstr_t getEmptyCellValue ( );
    HRESULT setEmptyCellValue (
        VARIANT_BOOL showEmptyCell,
        _bstr_t value );
    VARIANT_BOOL IsPreserveCellFormattingOnUpdate ( );
    HRESULT setPreserveCellFormattingOnUpdate (
        VARIANT_BOOL preserve );
    VARIANT_BOOL IsAutofitColumnWidthsOnUpdate ( );
    HRESULT setAutofitColumnWidthsOnUpdate (
        VARIANT_BOOL autofit );
    VARIANT_BOOL ShowGrandTotalsForRows ( );
    HRESULT setShowGrandTotalsForRows (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowGrandTotalsForColumns ( );
    HRESULT setShowGrandTotalsForColumns (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowSubtotalFilteredPageItems ( );
    HRESULT setSubtotalFilteredPageItems (
        VARIANT_BOOL show );
    VARIANT_BOOL AllowMultipleFiltersPerField ( );
    HRESULT setAllowMultipleFiltersPerField (
        VARIANT_BOOL allow );
    VARIANT_BOOL IsUseCustomListsWhenSorting ( );
    HRESULT setUseCustomListsWhenSorting (
        VARIANT_BOOL useCustomListsWhenSorting );
    VARIANT_BOOL ShowDrillButtons ( );
    HRESULT setShowDrillButtons (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowContextualTooltips ( );
    HRESULT setShowContextualTooltips (
        VARIANT_BOOL ShowContextualTooltips );
    VARIANT_BOOL ShowHeaders ( );
    HRESULT setShowHeaders (
        VARIANT_BOOL ShowHeaders );
    VARIANT_BOOL IsClassicLayout ( );
    HRESULT setClassicLayout (
        VARIANT_BOOL IsClassicLayout );
    long getSortOrder ( );
    HRESULT setSortOrder (
        long sortOrder );
    HRESULT setCompactForm ( );
    HRESULT setOutlineForm ( );
    HRESULT setTabularForm ( );
    VARIANT_BOOL PrintDrillButtons ( );
    HRESULT setPrintDrillButtons (
        VARIANT_BOOL PrintDrillButtons );
    VARIANT_BOOL RepeatRowLabels ( );
    HRESULT setRepeatRowLabels (
        VARIANT_BOOL RepeatRowLabels );
    VARIANT_BOOL PrintTitles ( );
    HRESULT setPrintTitles (
        VARIANT_BOOL PrintTitles );
    VARIANT_BOOL IsEnabledShowDetails ( );
    HRESULT setEnableShowDetails (
        VARIANT_BOOL enable );
    _bstr_t getStyle ( );
    HRESULT setStyle (
        _bstr_t style );
    VARIANT_BOOL ShowRowHeaders ( );
    HRESULT setShowRowHeaders (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowColumnHeaders ( );
    HRESULT setShowColumnHeaders (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowRowStripes ( );
    HRESULT setShowRowStripes (
        VARIANT_BOOL show );
    VARIANT_BOOL ShowColumnStripes ( );
    HRESULT setShowColumnStripes (
        VARIANT_BOOL show );
    IExcelPivotTablePtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setName (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall raw_setLocation (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn ) = 0;
      virtual HRESULT __stdcall raw_setLocation_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_getLocation (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSourceRange (
        /*[in]*/ BSTR formulaRange,
        /*[in]*/ VARIANT xls ) = 0;
      virtual HRESULT __stdcall raw_getSourceRange (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFieldAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getField (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct IExcelField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FieldCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_addFieldToRowLabels (
        /*[in]*/ BSTR fieldName ) = 0;
      virtual HRESULT __stdcall raw_RowLabelsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeFieldFromRowLabels (
        /*[in]*/ BSTR fieldName ) = 0;
      virtual HRESULT __stdcall raw_getRowLabelsFieldAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_addFieldToColumnLabels (
        /*[in]*/ BSTR fieldName ) = 0;
      virtual HRESULT __stdcall raw_ColumnLabelsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeFieldFromColumnLabels (
        /*[in]*/ BSTR fieldName ) = 0;
      virtual HRESULT __stdcall raw_getColumnLabelsFieldAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_addFieldToReportFilter (
        /*[in]*/ BSTR fieldName ) = 0;
      virtual HRESULT __stdcall raw_ReportFilterCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeFieldFromReportFilter (
        /*[in]*/ BSTR fieldName ) = 0;
      virtual HRESULT __stdcall raw_getReportFilterFieldAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_addFieldToValues (
        /*[in]*/ BSTR fieldName,
        /*[in]*/ BSTR customName,
        /*[in]*/ long nSubtotal ) = 0;
      virtual HRESULT __stdcall raw_ValuesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeValueFieldFromValues (
        /*[in]*/ BSTR customFieldName ) = 0;
      virtual HRESULT __stdcall raw_getValueField (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct IExcelValueField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getValueFieldAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelValueField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[in]*/ struct IExcelDocument * xls ) = 0;
      virtual HRESULT __stdcall raw_getRowHeaderTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRowHeaderTitle (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getColumnHeaderTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColumnHeaderTitle (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getDataHeaderTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataHeaderTitle (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_getGrandTotalTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setGrandTotalTitle (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_IsMergeAndCenterCellsWithLabels (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setMergeAndCenterCellsWithLabels (
        /*[in]*/ VARIANT_BOOL mergeAndCenterCellsWithLabels ) = 0;
      virtual HRESULT __stdcall raw_getRowLabelsIndent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRowLabelsIndent (
        /*[in]*/ long chars ) = 0;
      virtual HRESULT __stdcall raw_IsPageOverThenDown (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPageOverThenDown (
        /*[in]*/ VARIANT_BOOL IsPageOverThenDown ) = 0;
      virtual HRESULT __stdcall raw_getPageWrap (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPageWrap (
        /*[in]*/ long fields ) = 0;
      virtual HRESULT __stdcall raw_ShowError (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getErrorValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setErrorValue (
        /*[in]*/ VARIANT_BOOL ShowError,
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_ShowEmptyCells (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getEmptyCellValue (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setEmptyCellValue (
        /*[in]*/ VARIANT_BOOL showEmptyCell,
        /*[in]*/ BSTR value ) = 0;
      virtual HRESULT __stdcall raw_IsPreserveCellFormattingOnUpdate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPreserveCellFormattingOnUpdate (
        /*[in]*/ VARIANT_BOOL preserve ) = 0;
      virtual HRESULT __stdcall raw_IsAutofitColumnWidthsOnUpdate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAutofitColumnWidthsOnUpdate (
        /*[in]*/ VARIANT_BOOL autofit ) = 0;
      virtual HRESULT __stdcall raw_ShowGrandTotalsForRows (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowGrandTotalsForRows (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowGrandTotalsForColumns (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowGrandTotalsForColumns (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowSubtotalFilteredPageItems (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSubtotalFilteredPageItems (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_AllowMultipleFiltersPerField (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowMultipleFiltersPerField (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_IsUseCustomListsWhenSorting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setUseCustomListsWhenSorting (
        /*[in]*/ VARIANT_BOOL useCustomListsWhenSorting ) = 0;
      virtual HRESULT __stdcall raw_ShowDrillButtons (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowDrillButtons (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowContextualTooltips (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowContextualTooltips (
        /*[in]*/ VARIANT_BOOL ShowContextualTooltips ) = 0;
      virtual HRESULT __stdcall raw_ShowHeaders (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowHeaders (
        /*[in]*/ VARIANT_BOOL ShowHeaders ) = 0;
      virtual HRESULT __stdcall raw_IsClassicLayout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setClassicLayout (
        /*[in]*/ VARIANT_BOOL IsClassicLayout ) = 0;
      virtual HRESULT __stdcall raw_getSortOrder (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSortOrder (
        /*[in]*/ long sortOrder ) = 0;
      virtual HRESULT __stdcall raw_setCompactForm ( ) = 0;
      virtual HRESULT __stdcall raw_setOutlineForm ( ) = 0;
      virtual HRESULT __stdcall raw_setTabularForm ( ) = 0;
      virtual HRESULT __stdcall raw_PrintDrillButtons (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintDrillButtons (
        /*[in]*/ VARIANT_BOOL PrintDrillButtons ) = 0;
      virtual HRESULT __stdcall raw_RepeatRowLabels (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRepeatRowLabels (
        /*[in]*/ VARIANT_BOOL RepeatRowLabels ) = 0;
      virtual HRESULT __stdcall raw_PrintTitles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPrintTitles (
        /*[in]*/ VARIANT_BOOL PrintTitles ) = 0;
      virtual HRESULT __stdcall raw_IsEnabledShowDetails (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setEnableShowDetails (
        /*[in]*/ VARIANT_BOOL enable ) = 0;
      virtual HRESULT __stdcall raw_getStyle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStyle (
        /*[in]*/ BSTR style ) = 0;
      virtual HRESULT __stdcall raw_ShowRowHeaders (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowRowHeaders (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowColumnHeaders (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowColumnHeaders (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowRowStripes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowRowStripes (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_ShowColumnStripes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowColumnStripes (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelPivotTable * * pRetVal ) = 0;
};

struct __declspec(uuid("84b24933-7f43-4c32-a790-4b8b47ce79ef"))
IExcelPivotChart : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setLeftUpperCorner (
        long row,
        long column );
    HRESULT setLeftUpperCorner_2 (
        _bstr_t cellReference );
    long getLeftUpperCornerRow ( );
    long getLeftUpperCornerColumn ( );
    IFillFormatPtr getFillFormat ( );
    HRESULT setFillFormat (
        struct IFillFormat * FillFormat );
    ILineColorFormatPtr getLineColorFormat ( );
    HRESULT setLineColorFormat (
        struct ILineColorFormat * LineColorFormat );
    ILineStyleFormatPtr getLineStyleFormat ( );
    HRESULT setLineStyleFormat (
        struct ILineStyleFormat * LineStyleFormat );
    IShadowFormatPtr getShadowFormat ( );
    HRESULT setShadowFormat (
        struct IShadowFormat * ShadowFormat );
    HRESULT setLeftUpperOffset (
        long horizontalOffset,
        long verticalOffset );
    long getHorizontalOffset ( );
    long getVerticalOffset ( );
    HRESULT setSize (
        long chartWidth,
        long chartHeight );
    long getHeight ( );
    long getWidth ( );
    HRESULT easy_setChartType (
        long chartType );
    long easy_getChartType ( );
    HRESULT easy_addSeries (
        struct IExcelSeries * xlsChartSeries );
    HRESULT easy_addSeries_2 (
        _bstr_t seriesName,
        _bstr_t seriesValues );
    HRESULT easy_removeSeries (
        long index );
    IExcelSeriesPtr easy_getSeriesAt (
        long index );
    long SeriesCount ( );
    HRESULT easy_setCategoryXAxisLabels (
        _bstr_t formulaCategoryXAxisLabels );
    _bstr_t easy_getCategoryXAxisLabels ( );
    HRESULT easy_setTitle (
        _bstr_t title );
    _bstr_t easy_getTitle ( );
    IExcelTitlePtr getChartTitle ( );
    HRESULT setChartTitle (
        struct IExcelTitle * xlsTitle );
    IExcelChartAreaPtr easy_getChartArea ( );
    HRESULT easy_setChartArea (
        struct IExcelChartArea * xlsChartArea );
    IExcelPlotAreaPtr easy_getPlotArea ( );
    HRESULT easy_setPlotArea (
        struct IExcelPlotArea * xlsPlotArea );
    IExcelChartLegendPtr easy_getLegend ( );
    HRESULT easy_setLegend (
        struct IExcelChartLegend * xlsLegend );
    IExcelAxisPtr easy_getCategoryXAxis ( );
    HRESULT easy_setCategoryXAxis (
        struct IExcelAxis * xlsCategoryXAxis );
    HRESULT easy_setValueYAxis (
        struct IExcelAxis * xlsValueYAxis );
    IExcelAxisPtr easy_getValueYAxis ( );
    HRESULT easy_setXAxisMajorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getXAxisMajorGridlines ( );
    HRESULT easy_setYAxisMajorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getYAxisMajorGridlines ( );
    HRESULT easy_setXAxisMinorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getXAxisMinorGridlines ( );
    HRESULT easy_setYAxisMinorGridlines (
        struct IExcelChartGridlines * xlsGridlines );
    IExcelChartGridlinesPtr easy_getYAxisMinorGridlines ( );
    HRESULT easy_setChartDataTable (
        struct IExcelDataTable * xlsChartDataTable );
    IExcelDataTablePtr easy_getChartDataTable ( );
    HRESULT easy_setSeriesOverlap (
        long overlap );
    long easy_getSeriesOverlap ( );
    HRESULT easy_setSeriesGap (
        long gap );
    long easy_getSeriesGap ( );
    HRESULT easy_set3DRotation (
        long n3DRotation );
    long easy_get3DRotation ( );
    HRESULT easy_set3DElevation (
        long n3DElevation );
    long easy_get3DElevation ( );
    HRESULT easy_set3DHeight (
        long n3DHeight );
    long easy_get3DHeight ( );
    HRESULT easy_set3DPerspective (
        long n3DPerspective );
    long easy_get3DPerspective ( );
    HRESULT easy_setUse3DPerspective (
        VARIANT_BOOL use3DPerspective );
    VARIANT_BOOL easy_Use3DPerspective ( );
    HRESULT setFirstSliceAngle (
        long angle );
    long getFirstSliceAngle ( );
    HRESULT setVariableColorsBySlice (
        VARIANT_BOOL isVariableColor );
    VARIANT_BOOL HasVariableColorsBySlice ( );
    HRESULT setPieExplosion (
        long distance );
    long getPieExplosion ( );
    HRESULT splitSeriesByPosition (
        long values );
    HRESULT splitSeriesByValue (
        double value );
    HRESULT splitSeriesByPercentageValue (
        long value );
    double getSplitPosition ( );
    long getSplitType ( );
    long getSecondPlotSize ( );
    HRESULT setSecondPlotSize (
        long size );
    long getDoughnutHoleSize ( );
    HRESULT setDoughnutHoleSize (
        long size );
    long getBubbleScale ( );
    HRESULT setBubbleScale (
        long percent );
    long getBubbleSize ( );
    HRESULT setBubbleSize (
        long bubbleSize );
    HRESULT setShowNegativeBubbles (
        VARIANT_BOOL visible );
    VARIANT_BOOL ShowNegativeBubbles ( );
    long getStyle ( );
    HRESULT setStyle (
        long style );
    HRESULT Dispose ( );
    IExcelPivotTablePtr getPivotTable ( );
    HRESULT setPivotTable (
        struct IExcelPivotTable * xlsPivotTable );
    IExcelPivotChartPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setLeftUpperCorner (
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperCorner_2 (
        /*[in]*/ BSTR cellReference ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerRow (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLeftUpperCornerColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFillFormat (
        /*[out,retval]*/ struct IFillFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFillFormat (
        /*[in]*/ struct IFillFormat * FillFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineColorFormat (
        /*[out,retval]*/ struct ILineColorFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineColorFormat (
        /*[in]*/ struct ILineColorFormat * LineColorFormat ) = 0;
      virtual HRESULT __stdcall raw_getLineStyleFormat (
        /*[out,retval]*/ struct ILineStyleFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setLineStyleFormat (
        /*[in]*/ struct ILineStyleFormat * LineStyleFormat ) = 0;
      virtual HRESULT __stdcall raw_getShadowFormat (
        /*[out,retval]*/ struct IShadowFormat * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShadowFormat (
        /*[in]*/ struct IShadowFormat * ShadowFormat ) = 0;
      virtual HRESULT __stdcall raw_setLeftUpperOffset (
        /*[in]*/ long horizontalOffset,
        /*[in]*/ long verticalOffset ) = 0;
      virtual HRESULT __stdcall raw_getHorizontalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getVerticalOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSize (
        /*[in]*/ long chartWidth,
        /*[in]*/ long chartHeight ) = 0;
      virtual HRESULT __stdcall raw_getHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getWidth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setChartType (
        /*[in]*/ long chartType ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addSeries (
        /*[in]*/ struct IExcelSeries * xlsChartSeries ) = 0;
      virtual HRESULT __stdcall raw_easy_addSeries_2 (
        /*[in]*/ BSTR seriesName,
        /*[in]*/ BSTR seriesValues ) = 0;
      virtual HRESULT __stdcall raw_easy_removeSeries (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_getSeriesAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelSeries * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SeriesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setCategoryXAxisLabels (
        /*[in]*/ BSTR formulaCategoryXAxisLabels ) = 0;
      virtual HRESULT __stdcall raw_easy_getCategoryXAxisLabels (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setTitle (
        /*[in]*/ BSTR title ) = 0;
      virtual HRESULT __stdcall raw_easy_getTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getChartTitle (
        /*[out,retval]*/ struct IExcelTitle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setChartTitle (
        /*[in]*/ struct IExcelTitle * xlsTitle ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartArea (
        /*[out,retval]*/ struct IExcelChartArea * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setChartArea (
        /*[in]*/ struct IExcelChartArea * xlsChartArea ) = 0;
      virtual HRESULT __stdcall raw_easy_getPlotArea (
        /*[out,retval]*/ struct IExcelPlotArea * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setPlotArea (
        /*[in]*/ struct IExcelPlotArea * xlsPlotArea ) = 0;
      virtual HRESULT __stdcall raw_easy_getLegend (
        /*[out,retval]*/ struct IExcelChartLegend * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setLegend (
        /*[in]*/ struct IExcelChartLegend * xlsLegend ) = 0;
      virtual HRESULT __stdcall raw_easy_getCategoryXAxis (
        /*[out,retval]*/ struct IExcelAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setCategoryXAxis (
        /*[in]*/ struct IExcelAxis * xlsCategoryXAxis ) = 0;
      virtual HRESULT __stdcall raw_easy_setValueYAxis (
        /*[in]*/ struct IExcelAxis * xlsValueYAxis ) = 0;
      virtual HRESULT __stdcall raw_easy_getValueYAxis (
        /*[out,retval]*/ struct IExcelAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setXAxisMajorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getXAxisMajorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setYAxisMajorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getYAxisMajorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setXAxisMinorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getXAxisMinorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setYAxisMinorGridlines (
        /*[in]*/ struct IExcelChartGridlines * xlsGridlines ) = 0;
      virtual HRESULT __stdcall raw_easy_getYAxisMinorGridlines (
        /*[out,retval]*/ struct IExcelChartGridlines * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setChartDataTable (
        /*[in]*/ struct IExcelDataTable * xlsChartDataTable ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartDataTable (
        /*[out,retval]*/ struct IExcelDataTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setSeriesOverlap (
        /*[in]*/ long overlap ) = 0;
      virtual HRESULT __stdcall raw_easy_getSeriesOverlap (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setSeriesGap (
        /*[in]*/ long gap ) = 0;
      virtual HRESULT __stdcall raw_easy_getSeriesGap (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DRotation (
        /*[in]*/ long n3DRotation ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DRotation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DElevation (
        /*[in]*/ long n3DElevation ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DElevation (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DHeight (
        /*[in]*/ long n3DHeight ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DHeight (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_set3DPerspective (
        /*[in]*/ long n3DPerspective ) = 0;
      virtual HRESULT __stdcall raw_easy_get3DPerspective (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setUse3DPerspective (
        /*[in]*/ VARIANT_BOOL use3DPerspective ) = 0;
      virtual HRESULT __stdcall raw_easy_Use3DPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setFirstSliceAngle (
        /*[in]*/ long angle ) = 0;
      virtual HRESULT __stdcall raw_getFirstSliceAngle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setVariableColorsBySlice (
        /*[in]*/ VARIANT_BOOL isVariableColor ) = 0;
      virtual HRESULT __stdcall raw_HasVariableColorsBySlice (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPieExplosion (
        /*[in]*/ long distance ) = 0;
      virtual HRESULT __stdcall raw_getPieExplosion (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_splitSeriesByPosition (
        /*[in]*/ long values ) = 0;
      virtual HRESULT __stdcall raw_splitSeriesByValue (
        /*[in]*/ double value ) = 0;
      virtual HRESULT __stdcall raw_splitSeriesByPercentageValue (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall raw_getSplitPosition (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSplitType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getSecondPlotSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSecondPlotSize (
        /*[in]*/ long size ) = 0;
      virtual HRESULT __stdcall raw_getDoughnutHoleSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDoughnutHoleSize (
        /*[in]*/ long size ) = 0;
      virtual HRESULT __stdcall raw_getBubbleScale (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBubbleScale (
        /*[in]*/ long percent ) = 0;
      virtual HRESULT __stdcall raw_getBubbleSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setBubbleSize (
        /*[in]*/ long bubbleSize ) = 0;
      virtual HRESULT __stdcall raw_setShowNegativeBubbles (
        /*[in]*/ VARIANT_BOOL visible ) = 0;
      virtual HRESULT __stdcall raw_ShowNegativeBubbles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getStyle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setStyle (
        /*[in]*/ long style ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
      virtual HRESULT __stdcall raw_getPivotTable (
        /*[out,retval]*/ struct IExcelPivotTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPivotTable (
        /*[in]*/ struct IExcelPivotTable * xlsPivotTable ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelPivotChart * * pRetVal ) = 0;
};

struct __declspec(uuid("499356d9-c10c-4e51-8945-bc1b35afcf4b"))
IExcelWorksheet : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsSheetSelected ( );
    HRESULT setSheetSelected (
        VARIANT_BOOL IsSheetSelected );
    VARIANT_BOOL IsSheetProtected ( );
    HRESULT setSheetProtected (
        VARIANT_BOOL IsSheetProtected );
    HRESULT setProtectionPassword (
        _bstr_t sPassword );
    VARIANT_BOOL AllowSelectLockedCells ( );
    HRESULT setAllowSelectLockedCells (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowSelectUnlockedCells ( );
    HRESULT setAllowSelectUnlockedCells (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowFormatCells ( );
    HRESULT setAllowFormatCells (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowFormatColumns ( );
    HRESULT setAllowFormatColumns (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowFormatRows ( );
    HRESULT setAllowFormatRows (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowInsertColumns ( );
    HRESULT setAllowInsertColumns (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowInsertRows ( );
    HRESULT setAllowInsertRows (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowInsertHyperlinks ( );
    HRESULT setAllowInsertHyperlinks (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowDeleteColumns ( );
    HRESULT setAllowDeleteColumns (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowDeleteRows ( );
    HRESULT setAllowDeleteRows (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowSort ( );
    HRESULT setAllowSort (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowUseAutofilter ( );
    HRESULT setAllowUseAutofilter (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowUsePivots ( );
    HRESULT setAllowUsePivots (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowEditObjects ( );
    HRESULT setAllowEditObjects (
        VARIANT_BOOL allow );
    VARIANT_BOOL AllowEditScenarios ( );
    HRESULT setAllowEditScenarios (
        VARIANT_BOOL allow );
    VARIANT_BOOL IsHidden ( );
    HRESULT setHidden (
        VARIANT_BOOL IsHidden );
    _bstr_t getSheetName ( );
    HRESULT setSheetName (
        _bstr_t sheetName );
    long getZoom ( );
    HRESULT setZoom (
        long zoom );
    long getTabColor ( );
    IThemeColorPtr getTabThemeColor ( );
    HRESULT setTabColor (
        long colorTab );
    HRESULT setTabColor_2 (
        struct IThemeColor * colorTab );
    HRESULT Dispose ( );
    long FooterCount ( );
    IExcelFooterPtr easy_getFooterAt (
        long index );
    HRESULT easy_removeFooter (
        long index );
    HRESULT easy_addFooter (
        struct IExcelFooter * xlsFooter );
    HRESULT easy_addFooter_2 (
        _bstr_t text,
        _bstr_t position );
    HRESULT easy_addFooter_3 (
        _bstr_t text,
        _bstr_t position,
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic );
    HRESULT easy_removeFooter_2 (
        _bstr_t position );
    IExcelFooterPtr easy_getFooterAt_2 (
        _bstr_t position );
    long HeaderCount ( );
    IExcelHeaderPtr easy_getHeaderAt (
        long index );
    HRESULT easy_removeHeader (
        long index );
    HRESULT easy_addHeader (
        struct IExcelHeader * xlsHeader );
    HRESULT easy_addHeader_2 (
        _bstr_t text,
        _bstr_t position );
    HRESULT easy_addHeader_3 (
        _bstr_t text,
        _bstr_t position,
        _bstr_t fontName,
        long fontSize,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic );
    HRESULT easy_removeHeader_2 (
        _bstr_t position );
    IExcelHeaderPtr easy_getHeaderAt_2 (
        _bstr_t position );
    long HyperlinkCount ( );
    IExcelHyperlinkPtr easy_getHyperlinkAt (
        long index );
    IExcelHyperlinkPtr easy_getHyperlinkAt_2 (
        long nRow,
        long nColumn );
    IExcelHyperlinkPtr easy_getHyperlinkAt_3 (
        _bstr_t position );
    HRESULT easy_removeHyperlink (
        long index,
        VARIANT_BOOL clearCellValue );
    HRESULT easy_addHyperlink (
        struct IExcelHyperlink * xlsHyperlink );
    HRESULT easy_addHyperlink_2 (
        _bstr_t hyperlinkType,
        _bstr_t url,
        _bstr_t position );
    HRESULT easy_addHyperlink_3 (
        _bstr_t hyperlinkType,
        _bstr_t url,
        _bstr_t tooltip,
        _bstr_t position );
    HRESULT easy_removeHyperlink_2 (
        _bstr_t position,
        VARIANT_BOOL clearCellValue );
    long DataValidatorCount ( );
    IExcelDataValidatorPtr easy_getDataValidatorAt (
        long index );
    HRESULT easy_removeDataValidator (
        long index );
    HRESULT easy_addDataValidator (
        struct IExcelDataValidator * xlsValidator );
    HRESULT easy_addDataValidator_2 (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn,
        long validationType,
        long operatorType,
        _bstr_t firstFormula,
        _bstr_t secondFormula );
    HRESULT easy_addDataValidator_3 (
        _bstr_t range,
        long validationType,
        long operatorType,
        _bstr_t firstFormula,
        _bstr_t secondFormula );
    HRESULT easy_removeDataValidator_2 (
        _bstr_t range );
    IExcelDataValidatorPtr easy_getDataValidatorAt_2 (
        _bstr_t range );
    IExcelPageSetupPtr easy_getPageSetup ( );
    HRESULT easy_insertDataSet (
        IUnknown * ds,
        VARIANT_BOOL includeColumnNames );
    HRESULT easy_insertDataSet_2 (
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        VARIANT_BOOL includeColumnNames );
    HRESULT easy_insertDataSet_3 (
        IUnknown * ds,
        long startRow,
        long startCol,
        VARIANT_BOOL includeColumnNames );
    HRESULT easy_insertDataSet_4 (
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        VARIANT_BOOL includeColumnNames );
    HRESULT easy_insertDataSet_5 (
        IUnknown * ds,
        _bstr_t startCellReference,
        VARIANT_BOOL includeColumnNames );
    HRESULT easy_insertDataSet_6 (
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        VARIANT_BOOL includeColumnNames );
    HRESULT easy_insertList (
        struct IList * ds );
    HRESULT easy_insertList_2 (
        const _variant_t & List,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_insertList_3 (
        const _variant_t & ds,
        long startRow,
        long startCol );
    HRESULT easy_insertList_4 (
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_insertList_5 (
        const _variant_t & ds,
        _bstr_t startCellReference );
    HRESULT easy_insertList_6 (
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_insertXMLFromFile (
        _bstr_t path );
    HRESULT easy_insertXMLFromFile_2 (
        _bstr_t path,
        long startRow,
        long startCol );
    HRESULT easy_insertXMLFromFile_3 (
        _bstr_t path,
        _bstr_t startCellReference );
    HRESULT easy_insertXMLFromFile_4 (
        struct _Stream * f );
    HRESULT easy_insertXMLFromFile_5 (
        struct _Stream * f,
        long startRow,
        long startCol );
    HRESULT easy_insertXMLFromFile_6 (
        struct _Stream * f,
        _bstr_t startCellReference );
    HRESULT easy_insertXMLFromString (
        _bstr_t xml );
    HRESULT easy_insertXMLFromString_2 (
        _bstr_t xml,
        long startRow,
        long startCol );
    HRESULT easy_insertXMLFromString_3 (
        _bstr_t xml,
        _bstr_t startCellReference );
    long NameCount ( );
    IExcelNamePtr easy_getNameAt (
        long index );
    HRESULT easy_removeName (
        long index );
    HRESULT easy_addName (
        struct IExcelName * xlsName );
    HRESULT easy_addName_2 (
        _bstr_t sNameText,
        _bstr_t sRefersTo );
    HRESULT easy_removeName_2 (
        _bstr_t sNameText );
    IExcelNamePtr easy_getName (
        _bstr_t sNameText );
    long ImageCount ( );
    IExcelImagePtr easy_getImageAt (
        long index );
    HRESULT easy_removeImage (
        long index );
    HRESULT easy_addImage (
        struct IExcelImage * xlsImage );
    HRESULT easy_addImage_2 (
        _bstr_t path );
    HRESULT easy_addImage_3 (
        _bstr_t path,
        long row,
        long column );
    HRESULT easy_addImage_4 (
        _bstr_t path,
        long row,
        long column,
        long width,
        long height );
    HRESULT easy_addImage_5 (
        _bstr_t path,
        _bstr_t position );
    HRESULT easy_addImage_6 (
        _bstr_t path,
        _bstr_t position,
        long width,
        long height );
    HRESULT easy_removeImage_2 (
        _bstr_t path );
    IExcelImagePtr easy_getImage (
        _bstr_t path );
    HRESULT setPageBreakPreview (
        VARIANT_BOOL isPageBreakPreview );
    VARIANT_BOOL isPageBreakPreview ( );
    VARIANT_BOOL ShowGridlines ( );
    HRESULT setShowGridlines (
        VARIANT_BOOL show );
    IExcelTablePtr easy_getExcelTable ( );
    HRESULT easy_setExcelTable (
        struct IExcelTable * xlsTable );
    IExcelConditionalFormattingPtr easy_getConditionalFormattingAt (
        long index );
    HRESULT easy_removeConditionalFormatting (
        long index );
    long ConditionalFormattingCount ( );
    HRESULT easy_addConditionalFormatting (
        struct IExcelConditionalFormatting * ExcelConditionalFormatting );
    HRESULT easy_addConditionalFormatting_2 (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn,
        const _variant_t & lstConditions );
    HRESULT easy_addConditionalFormatting_3 (
        _bstr_t range,
        const _variant_t & lstConditions );
    HRESULT easy_addConditionalFormatting_4 (
        _bstr_t range,
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula );
    HRESULT easy_addConditionalFormatting_5 (
        _bstr_t range,
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground );
    HRESULT easy_addConditionalFormatting_6 (
        _bstr_t range,
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        const _variant_t & foreground,
        const _variant_t & background );
    HRESULT easy_addConditionalFormatting_7 (
        _bstr_t range,
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        VARIANT_BOOL isBold,
        VARIANT_BOOL isItalic,
        long foreground,
        long background );
    HRESULT easy_addConditionalFormatting_8 (
        _bstr_t range,
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        const _variant_t & background );
    HRESULT easy_addConditionalFormatting_9 (
        _bstr_t range,
        long nOperator,
        _bstr_t firstFormula,
        _bstr_t secondFormula,
        long background );
    HRESULT easy_removeConditionalFormatting_2 (
        _bstr_t range );
    IExcelConditionalFormattingPtr easy_getConditionalFormattingAt_2 (
        _bstr_t range );
    _bstr_t easy_computeFormulas (
        const _variant_t & excel,
        VARIANT_BOOL bRecalculate );
    HRESULT easy_addArrayFormula (
        _bstr_t s2DRangeReference,
        _bstr_t sFormula );
    HRESULT easy_addArrayFormula_2 (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn,
        _bstr_t sFormula );
    long ArrayFormulasCount ( );
    HRESULT easy_removeArrayFormula (
        long index );
    HRESULT easy_removeArrayFormula_2 (
        _bstr_t s2DRangeReference );
    HRESULT easy_removeArrayFormula_3 (
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IExcelArrayFormulaPtr easy_getArrayFormulaAt (
        long nRow,
        long nColumn );
    IExcelArrayFormulaPtr easy_getArrayFormulaAt_2 (
        _bstr_t range );
    IExcelArrayFormulaPtr easy_getArrayFormulaAt_3 (
        long index );
    HRESULT easy_addChart (
        struct IExcelChart * xlsChart );
    HRESULT easy_addChart_2 (
        const _variant_t & xlsChart,
        long row,
        long column );
    HRESULT easy_addChart_3 (
        const _variant_t & xlsChart,
        long row,
        long column,
        long width,
        long height );
    HRESULT easy_addChart_4 (
        const _variant_t & xlsChart,
        _bstr_t position );
    HRESULT easy_addChart_5 (
        const _variant_t & xlsChart,
        _bstr_t position,
        long width,
        long height );
    HRESULT easy_removeChart (
        long index );
    IExcelChartPtr easy_getChartAt (
        long index );
    long ChartCount ( );
    VARIANT_BOOL IsDataGroupAutomaticStyles ( );
    HRESULT setDataGroupAutomaticStyles (
        VARIANT_BOOL IsDataGroupAutomaticStyles );
    VARIANT_BOOL IsDataGroupSummaryRowsBelow ( );
    HRESULT setDataGroupSummaryRowsBelow (
        VARIANT_BOOL IsDataGroupSummaryRowsBelow );
    VARIANT_BOOL IsDataGroupSummaryColumnsRight ( );
    HRESULT setDataGroupSummaryColumnsRight (
        VARIANT_BOOL IsDataGroupSummaryColumnsRight );
    HRESULT easy_addDataGroup (
        struct IExcelDataGroup * xlsGroup );
    HRESULT easy_addDataGroup_2 (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn,
        long groupRowsColumns,
        VARIANT_BOOL isCollapsed );
    HRESULT easy_addDataGroup_3 (
        long firstRow,
        long firstColumn,
        long lastRow,
        long lastColumn,
        long groupRowsColumns,
        VARIANT_BOOL isCollapsed,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_addDataGroup_4 (
        _bstr_t range,
        long groupRowsColumns,
        VARIANT_BOOL isCollapsed );
    HRESULT easy_addDataGroup_5 (
        _bstr_t range,
        long groupRowsColumns,
        VARIANT_BOOL isCollapsed,
        const _variant_t & xlsAutoFormat );
    HRESULT easy_removeDataGroup (
        long index );
    HRESULT easy_removeDataGroup_2 (
        _bstr_t range );
    IExcelDataGroupPtr easy_getDataGroupAt (
        long index );
    IExcelDataGroupPtr easy_getDataGroupAt_2 (
        _bstr_t range );
    long DataGroupCount ( );
    long getColumnMaxOutlineLevel ( );
    HRESULT setColumnMaxOutlineLevel (
        long nOutlineLevel );
    long getRowMaxOutlineLevel ( );
    HRESULT setRowMaxOutlineLevel (
        long nOutlineLevel );
    IExcelFilterPtr easy_getFilter ( );
    HRESULT easy_addPivotTable (
        struct IExcelPivotTable * xlsPivotTable );
    HRESULT easy_addPivotTable_2 (
        _bstr_t name,
        _bstr_t location,
        _bstr_t sourceFormulaRange,
        const _variant_t & xls );
    HRESULT easy_removePivotTable (
        long index );
    IExcelPivotTablePtr easy_getPivotTableAt (
        long index );
    IExcelPivotTablePtr easy_getPivotTable (
        _bstr_t name );
    long PivotTableCount ( );
    HRESULT easy_addPivotChart (
        struct IExcelPivotChart * xlsPivotChart );
    IExcelSheetPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsSheetSelected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetSelected (
        /*[in]*/ VARIANT_BOOL IsSheetSelected ) = 0;
      virtual HRESULT __stdcall raw_IsSheetProtected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetProtected (
        /*[in]*/ VARIANT_BOOL IsSheetProtected ) = 0;
      virtual HRESULT __stdcall raw_setProtectionPassword (
        /*[in]*/ BSTR sPassword ) = 0;
      virtual HRESULT __stdcall raw_AllowSelectLockedCells (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowSelectLockedCells (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowSelectUnlockedCells (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowSelectUnlockedCells (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowFormatCells (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowFormatCells (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowFormatColumns (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowFormatColumns (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowFormatRows (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowFormatRows (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowInsertColumns (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowInsertColumns (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowInsertRows (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowInsertRows (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowInsertHyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowInsertHyperlinks (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowDeleteColumns (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowDeleteColumns (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowDeleteRows (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowDeleteRows (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowSort (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowSort (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowUseAutofilter (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowUseAutofilter (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowUsePivots (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowUsePivots (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowEditObjects (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowEditObjects (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_AllowEditScenarios (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setAllowEditScenarios (
        /*[in]*/ VARIANT_BOOL allow ) = 0;
      virtual HRESULT __stdcall raw_IsHidden (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setHidden (
        /*[in]*/ VARIANT_BOOL IsHidden ) = 0;
      virtual HRESULT __stdcall raw_getSheetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSheetName (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_getZoom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setZoom (
        /*[in]*/ long zoom ) = 0;
      virtual HRESULT __stdcall raw_getTabColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTabThemeColor (
        /*[out,retval]*/ struct IThemeColor * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTabColor (
        /*[in]*/ long colorTab ) = 0;
      virtual HRESULT __stdcall raw_setTabColor_2 (
        /*[in]*/ struct IThemeColor * colorTab ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
      virtual HRESULT __stdcall raw_FooterCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getFooterAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelFooter * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeFooter (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_addFooter (
        /*[in]*/ struct IExcelFooter * xlsFooter ) = 0;
      virtual HRESULT __stdcall raw_easy_addFooter_2 (
        /*[in]*/ BSTR text,
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_addFooter_3 (
        /*[in]*/ BSTR text,
        /*[in]*/ BSTR position,
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_easy_removeFooter_2 (
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_getFooterAt_2 (
        /*[in]*/ BSTR position,
        /*[out,retval]*/ struct IExcelFooter * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HeaderCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getHeaderAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelHeader * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeHeader (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_addHeader (
        /*[in]*/ struct IExcelHeader * xlsHeader ) = 0;
      virtual HRESULT __stdcall raw_easy_addHeader_2 (
        /*[in]*/ BSTR text,
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_addHeader_3 (
        /*[in]*/ BSTR text,
        /*[in]*/ BSTR position,
        /*[in]*/ BSTR fontName,
        /*[in]*/ long fontSize,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic ) = 0;
      virtual HRESULT __stdcall raw_easy_removeHeader_2 (
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_getHeaderAt_2 (
        /*[in]*/ BSTR position,
        /*[out,retval]*/ struct IExcelHeader * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HyperlinkCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getHyperlinkAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelHyperlink * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getHyperlinkAt_2 (
        /*[in]*/ long nRow,
        /*[in]*/ long nColumn,
        /*[out,retval]*/ struct IExcelHyperlink * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getHyperlinkAt_3 (
        /*[in]*/ BSTR position,
        /*[out,retval]*/ struct IExcelHyperlink * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeHyperlink (
        /*[in]*/ long index,
        /*[in]*/ VARIANT_BOOL clearCellValue ) = 0;
      virtual HRESULT __stdcall raw_easy_addHyperlink (
        /*[in]*/ struct IExcelHyperlink * xlsHyperlink ) = 0;
      virtual HRESULT __stdcall raw_easy_addHyperlink_2 (
        /*[in]*/ BSTR hyperlinkType,
        /*[in]*/ BSTR url,
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_addHyperlink_3 (
        /*[in]*/ BSTR hyperlinkType,
        /*[in]*/ BSTR url,
        /*[in]*/ BSTR tooltip,
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_removeHyperlink_2 (
        /*[in]*/ BSTR position,
        /*[in]*/ VARIANT_BOOL clearCellValue ) = 0;
      virtual HRESULT __stdcall raw_DataValidatorCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getDataValidatorAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelDataValidator * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeDataValidator (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataValidator (
        /*[in]*/ struct IExcelDataValidator * xlsValidator ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataValidator_2 (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn,
        /*[in]*/ long validationType,
        /*[in]*/ long operatorType,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataValidator_3 (
        /*[in]*/ BSTR range,
        /*[in]*/ long validationType,
        /*[in]*/ long operatorType,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula ) = 0;
      virtual HRESULT __stdcall raw_easy_removeDataValidator_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_easy_getDataValidatorAt_2 (
        /*[in]*/ BSTR range,
        /*[out,retval]*/ struct IExcelDataValidator * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getPageSetup (
        /*[out,retval]*/ struct IExcelPageSetup * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_insertDataSet (
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT_BOOL includeColumnNames ) = 0;
      virtual HRESULT __stdcall raw_easy_insertDataSet_2 (
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ VARIANT_BOOL includeColumnNames ) = 0;
      virtual HRESULT __stdcall raw_easy_insertDataSet_3 (
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT_BOOL includeColumnNames ) = 0;
      virtual HRESULT __stdcall raw_easy_insertDataSet_4 (
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ VARIANT_BOOL includeColumnNames ) = 0;
      virtual HRESULT __stdcall raw_easy_insertDataSet_5 (
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT_BOOL includeColumnNames ) = 0;
      virtual HRESULT __stdcall raw_easy_insertDataSet_6 (
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ VARIANT_BOOL includeColumnNames ) = 0;
      virtual HRESULT __stdcall raw_easy_insertList (
        /*[in]*/ struct IList * ds ) = 0;
      virtual HRESULT __stdcall raw_easy_insertList_2 (
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_insertList_3 (
        /*[in]*/ VARIANT ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol ) = 0;
      virtual HRESULT __stdcall raw_easy_insertList_4 (
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_insertList_5 (
        /*[in]*/ VARIANT ds,
        /*[in]*/ BSTR startCellReference ) = 0;
      virtual HRESULT __stdcall raw_easy_insertList_6 (
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromFile (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromFile_2 (
        /*[in]*/ BSTR path,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromFile_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR startCellReference ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromFile_4 (
        /*[in]*/ struct _Stream * f ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromFile_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromFile_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR startCellReference ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromString (
        /*[in]*/ BSTR xml ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromString_2 (
        /*[in]*/ BSTR xml,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol ) = 0;
      virtual HRESULT __stdcall raw_easy_insertXMLFromString_3 (
        /*[in]*/ BSTR xml,
        /*[in]*/ BSTR startCellReference ) = 0;
      virtual HRESULT __stdcall raw_NameCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getNameAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelName * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeName (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_addName (
        /*[in]*/ struct IExcelName * xlsName ) = 0;
      virtual HRESULT __stdcall raw_easy_addName_2 (
        /*[in]*/ BSTR sNameText,
        /*[in]*/ BSTR sRefersTo ) = 0;
      virtual HRESULT __stdcall raw_easy_removeName_2 (
        /*[in]*/ BSTR sNameText ) = 0;
      virtual HRESULT __stdcall raw_easy_getName (
        /*[in]*/ BSTR sNameText,
        /*[out,retval]*/ struct IExcelName * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImageCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getImageAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeImage (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage (
        /*[in]*/ struct IExcelImage * xlsImage ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_2 (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_4 (
        /*[in]*/ BSTR path,
        /*[in]*/ long row,
        /*[in]*/ long column,
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_addImage_6 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR position,
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_easy_removeImage_2 (
        /*[in]*/ BSTR path ) = 0;
      virtual HRESULT __stdcall raw_easy_getImage (
        /*[in]*/ BSTR path,
        /*[out,retval]*/ struct IExcelImage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPageBreakPreview (
        /*[in]*/ VARIANT_BOOL isPageBreakPreview ) = 0;
      virtual HRESULT __stdcall raw_isPageBreakPreview (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowGridlines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setShowGridlines (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_easy_getExcelTable (
        /*[out,retval]*/ struct IExcelTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setExcelTable (
        /*[in]*/ struct IExcelTable * xlsTable ) = 0;
      virtual HRESULT __stdcall raw_easy_getConditionalFormattingAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelConditionalFormatting * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeConditionalFormatting (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_ConditionalFormattingCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting (
        /*[in]*/ struct IExcelConditionalFormatting * ExcelConditionalFormatting ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_2 (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn,
        /*[in]*/ VARIANT lstConditions ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_3 (
        /*[in]*/ BSTR range,
        /*[in]*/ VARIANT lstConditions ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_4 (
        /*[in]*/ BSTR range,
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_5 (
        /*[in]*/ BSTR range,
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_6 (
        /*[in]*/ BSTR range,
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ VARIANT foreground,
        /*[in]*/ VARIANT background ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_7 (
        /*[in]*/ BSTR range,
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ VARIANT_BOOL isBold,
        /*[in]*/ VARIANT_BOOL isItalic,
        /*[in]*/ long foreground,
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_8 (
        /*[in]*/ BSTR range,
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ VARIANT background ) = 0;
      virtual HRESULT __stdcall raw_easy_addConditionalFormatting_9 (
        /*[in]*/ BSTR range,
        /*[in]*/ long nOperator,
        /*[in]*/ BSTR firstFormula,
        /*[in]*/ BSTR secondFormula,
        /*[in]*/ long background ) = 0;
      virtual HRESULT __stdcall raw_easy_removeConditionalFormatting_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_easy_getConditionalFormattingAt_2 (
        /*[in]*/ BSTR range,
        /*[out,retval]*/ struct IExcelConditionalFormatting * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_computeFormulas (
        /*[in]*/ VARIANT excel,
        /*[in]*/ VARIANT_BOOL bRecalculate,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addArrayFormula (
        /*[in]*/ BSTR s2DRangeReference,
        /*[in]*/ BSTR sFormula ) = 0;
      virtual HRESULT __stdcall raw_easy_addArrayFormula_2 (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[in]*/ BSTR sFormula ) = 0;
      virtual HRESULT __stdcall raw_ArrayFormulasCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeArrayFormula (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeArrayFormula_2 (
        /*[in]*/ BSTR s2DRangeReference ) = 0;
      virtual HRESULT __stdcall raw_easy_removeArrayFormula_3 (
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn ) = 0;
      virtual HRESULT __stdcall raw_easy_getArrayFormulaAt (
        /*[in]*/ long nRow,
        /*[in]*/ long nColumn,
        /*[out,retval]*/ struct IExcelArrayFormula * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getArrayFormulaAt_2 (
        /*[in]*/ BSTR range,
        /*[out,retval]*/ struct IExcelArrayFormula * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getArrayFormulaAt_3 (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelArrayFormula * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart (
        /*[in]*/ struct IExcelChart * xlsChart ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_2 (
        /*[in]*/ VARIANT xlsChart,
        /*[in]*/ long row,
        /*[in]*/ long column ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_3 (
        /*[in]*/ VARIANT xlsChart,
        /*[in]*/ long row,
        /*[in]*/ long column,
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_4 (
        /*[in]*/ VARIANT xlsChart,
        /*[in]*/ BSTR position ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_5 (
        /*[in]*/ VARIANT xlsChart,
        /*[in]*/ BSTR position,
        /*[in]*/ long width,
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall raw_easy_removeChart (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_getChartAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelChart * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChartCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsDataGroupAutomaticStyles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataGroupAutomaticStyles (
        /*[in]*/ VARIANT_BOOL IsDataGroupAutomaticStyles ) = 0;
      virtual HRESULT __stdcall raw_IsDataGroupSummaryRowsBelow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataGroupSummaryRowsBelow (
        /*[in]*/ VARIANT_BOOL IsDataGroupSummaryRowsBelow ) = 0;
      virtual HRESULT __stdcall raw_IsDataGroupSummaryColumnsRight (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setDataGroupSummaryColumnsRight (
        /*[in]*/ VARIANT_BOOL IsDataGroupSummaryColumnsRight ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataGroup (
        /*[in]*/ struct IExcelDataGroup * xlsGroup ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataGroup_2 (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn,
        /*[in]*/ long groupRowsColumns,
        /*[in]*/ VARIANT_BOOL isCollapsed ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataGroup_3 (
        /*[in]*/ long firstRow,
        /*[in]*/ long firstColumn,
        /*[in]*/ long lastRow,
        /*[in]*/ long lastColumn,
        /*[in]*/ long groupRowsColumns,
        /*[in]*/ VARIANT_BOOL isCollapsed,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataGroup_4 (
        /*[in]*/ BSTR range,
        /*[in]*/ long groupRowsColumns,
        /*[in]*/ VARIANT_BOOL isCollapsed ) = 0;
      virtual HRESULT __stdcall raw_easy_addDataGroup_5 (
        /*[in]*/ BSTR range,
        /*[in]*/ long groupRowsColumns,
        /*[in]*/ VARIANT_BOOL isCollapsed,
        /*[in]*/ VARIANT xlsAutoFormat ) = 0;
      virtual HRESULT __stdcall raw_easy_removeDataGroup (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeDataGroup_2 (
        /*[in]*/ BSTR range ) = 0;
      virtual HRESULT __stdcall raw_easy_getDataGroupAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelDataGroup * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getDataGroupAt_2 (
        /*[in]*/ BSTR range,
        /*[out,retval]*/ struct IExcelDataGroup * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DataGroupCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getColumnMaxOutlineLevel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setColumnMaxOutlineLevel (
        /*[in]*/ long nOutlineLevel ) = 0;
      virtual HRESULT __stdcall raw_getRowMaxOutlineLevel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setRowMaxOutlineLevel (
        /*[in]*/ long nOutlineLevel ) = 0;
      virtual HRESULT __stdcall raw_easy_getFilter (
        /*[out,retval]*/ struct IExcelFilter * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addPivotTable (
        /*[in]*/ struct IExcelPivotTable * xlsPivotTable ) = 0;
      virtual HRESULT __stdcall raw_easy_addPivotTable_2 (
        /*[in]*/ BSTR name,
        /*[in]*/ BSTR location,
        /*[in]*/ BSTR sourceFormulaRange,
        /*[in]*/ VARIANT xls ) = 0;
      virtual HRESULT __stdcall raw_easy_removePivotTable (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_getPivotTableAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelPivotTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getPivotTable (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct IExcelPivotTable * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PivotTableCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addPivotChart (
        /*[in]*/ struct IExcelPivotChart * xlsPivotChart ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelSheet * * pRetVal ) = 0;
};

struct __declspec(uuid("c1a88436-bf12-3fed-9333-9bdf4bd8410c"))
IExcelDocument : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t easy_getError ( );
    _bstr_t easy_getWarnings ( );
    long SheetCount ( );
    VARIANT_BOOL easy_IsExcel (
        _bstr_t sPath );
    VARIANT_BOOL easy_IsExcel_2 (
        struct _Stream * f );
    IListPtr easy_ReadXLSSheet_AsList (
        _bstr_t path,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadXLSSheet_AsList_2 (
        struct _Stream * f,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadXLSSheet_AsList_3 (
        _bstr_t sPath,
        _bstr_t sheetName );
    IListPtr easy_ReadXLSSheet_AsList_4 (
        struct _Stream * f,
        _bstr_t sheetName );
    IListPtr easy_ReadXLSSheet_AsList_5 (
        _bstr_t path,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadXLSSheet_AsList_6 (
        struct _Stream * f,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSSheet_AsDataSet (
        _bstr_t path,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSSheet_AsDataSet_2 (
        struct _Stream * f,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSSheet_AsDataSet_3 (
        _bstr_t path,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXLSSheet_AsDataSet_4 (
        struct _Stream * f,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXLSSheet_AsDataSet_5 (
        _bstr_t path,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSSheet_AsDataSet_6 (
        struct _Stream * f,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadExcelWorksheet_AsList (
        const _variant_t & xlsWorksheet,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadExcelWorksheet_AsList_2 (
        const _variant_t & xlsWorksheet );
    IListPtr easy_ReadExcelWorksheet_AsList_3 (
        const _variant_t & xlsWorksheet,
        _bstr_t sRangeReference );
    IListPtr easy_ReadExcelWorksheet_AsList_4 (
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadExcelWorksheet_AsList_5 (
        _bstr_t sheetName );
    IListPtr easy_ReadExcelWorksheet_AsList_6 (
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadExcelWorksheet_AsDataSet (
        const _variant_t & xlsWorksheet,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadExcelWorksheet_AsDataSet_2 (
        const _variant_t & xlsWorksheet );
    IUnknownPtr easy_ReadExcelWorksheet_AsDataSet_3 (
        const _variant_t & xlsWorksheet,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadExcelWorksheet_AsDataSet_4 (
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadExcelWorksheet_AsDataSet_5 (
        _bstr_t sheetName );
    IUnknownPtr easy_ReadExcelWorksheet_AsDataSet_6 (
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSSheet_AsXML (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSSheet_AsXML_2 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadXLSSheet_AsXML_3 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSSheet_AsXML_4 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSSheet_AsXML_5 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadXLSSheet_AsXML_6 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadXLSActiveSheet_AsList (
        _bstr_t sPath );
    IListPtr easy_ReadXLSActiveSheet_AsList_2 (
        struct _Stream * f );
    IListPtr easy_ReadXLSActiveSheet_AsList_3 (
        _bstr_t path,
        _bstr_t rangeReference );
    IListPtr easy_ReadXLSActiveSheet_AsList_4 (
        struct _Stream * f,
        _bstr_t rangeReference );
    IListPtr easy_ReadXLSActiveSheet_AsList_5 (
        _bstr_t path,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IListPtr easy_ReadXLSActiveSheet_AsList_6 (
        struct _Stream * f,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IUnknownPtr easy_ReadXLSActiveSheet_AsDataSet (
        _bstr_t sPath );
    IUnknownPtr easy_ReadXLSActiveSheet_AsDataSet_2 (
        struct _Stream * f );
    IUnknownPtr easy_ReadXLSActiveSheet_AsDataSet_3 (
        _bstr_t path,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSActiveSheet_AsDataSet_4 (
        struct _Stream * f,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSActiveSheet_AsDataSet_5 (
        _bstr_t path,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IUnknownPtr easy_ReadXLSActiveSheet_AsDataSet_6 (
        struct _Stream * f,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    VARIANT_BOOL easy_ReadXLSActiveSheet_AsXML (
        _bstr_t XMLFilePath,
        _bstr_t XLSXFilePath );
    VARIANT_BOOL easy_ReadXLSActiveSheet_AsXML_2 (
        struct _Stream * fXML,
        struct _Stream * fXLSX );
    VARIANT_BOOL easy_ReadXLSActiveSheet_AsXML_3 (
        _bstr_t XMLFilePath,
        _bstr_t XLSXFilePath,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSActiveSheet_AsXML_4 (
        struct _Stream * fXML,
        struct _Stream * fXLSX,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSActiveSheet_AsXML_5 (
        _bstr_t XMLFilePath,
        _bstr_t XLSXFilePath,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    VARIANT_BOOL easy_ReadXLSActiveSheet_AsXML_6 (
        struct _Stream * fXML,
        struct _Stream * fXLSX,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IListPtr easy_ReadCSVFile_AsList (
        _bstr_t sPath );
    IListPtr easy_ReadCSVFile_AsList_2 (
        struct _Stream * f );
    IListPtr easy_ReadCSVFile_AsList_3 (
        struct _StreamReader * f );
    IUnknownPtr easy_ReadCSVFile_AsDataSet (
        _bstr_t sPath );
    IUnknownPtr easy_ReadCSVFile_AsDataSet_2 (
        struct _Stream * f );
    IUnknownPtr easy_ReadCSVFile_AsDataSet_3 (
        struct _StreamReader * f );
    IUnknownPtr easy_ReadXMLSpreadsheet_AsDataSet (
        struct _Stream * f,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXMLSpreadsheet_AsDataSet_2 (
        _bstr_t sPath,
        _bstr_t sheetName );
    IListPtr easy_ReadXMLSpreadsheet_AsList (
        struct _Stream * f,
        _bstr_t sheetName );
    IListPtr easy_ReadXMLSpreadsheet_AsList_2 (
        _bstr_t sPath,
        _bstr_t sheetName );
    IListPtr easy_ReadTXTFile_AsList (
        _bstr_t sPath,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    IListPtr easy_ReadTXTFile_AsList_2 (
        struct _Stream * f,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    IListPtr easy_ReadTXTFile_AsList_3 (
        struct _StreamReader * f,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    IUnknownPtr easy_ReadTXTFile_AsDataSet (
        _bstr_t sPath,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    IUnknownPtr easy_ReadTXTFile_AsDataSet_2 (
        struct _Stream * f,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    IUnknownPtr easy_ReadTXTFile_AsDataSet_3 (
        struct _StreamReader * f,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML (
        _bstr_t XMLFilePath,
        const _variant_t & xlsWorksheet,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_2 (
        _bstr_t XMLFilePath,
        const _variant_t & xlsWorksheet );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_3 (
        _bstr_t XMLFilePath,
        const _variant_t & xlsWorksheet,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_4 (
        _bstr_t XMLFilePath,
        _bstr_t sheetName,
        long startRow,
        long nStartColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_5 (
        _bstr_t XMLFilePath,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_6 (
        _bstr_t XMLFilePath,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_7 (
        struct _Stream * fXML,
        const _variant_t & xlsWorksheet,
        long nStartRow,
        long nStartColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_8 (
        struct _Stream * fXML,
        const _variant_t & xlsWorksheet );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_9 (
        struct _Stream * fXML,
        const _variant_t & xlsWorksheet,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_10 (
        struct _Stream * fXML,
        _bstr_t sheetName,
        long nStartRow,
        long nStartColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_11 (
        struct _Stream * fXML,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadExcelWorksheet_AsXML_12 (
        struct _Stream * fXML,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSXSheet_AsDataSet (
        _bstr_t path,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSXSheet_AsDataSet_2 (
        struct _Stream * f,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSXSheet_AsDataSet_3 (
        _bstr_t path,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXLSXSheet_AsDataSet_4 (
        struct _Stream * f,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXLSXSheet_AsDataSet_5 (
        _bstr_t path,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSXSheet_AsDataSet_6 (
        struct _Stream * f,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadXLSXSheet_AsList (
        _bstr_t path,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadXLSXSheet_AsList_2 (
        struct _Stream * f,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadXLSXSheet_AsList_3 (
        _bstr_t sPath,
        _bstr_t sheetName );
    IListPtr easy_ReadXLSXSheet_AsList_4 (
        struct _Stream * f,
        _bstr_t sheetName );
    IListPtr easy_ReadXLSXSheet_AsList_5 (
        _bstr_t path,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadXLSXSheet_AsList_6 (
        struct _Stream * f,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSXActiveSheet_AsDataSet (
        _bstr_t sPath );
    IUnknownPtr easy_ReadXLSXActiveSheet_AsDataSet_2 (
        struct _Stream * f );
    IUnknownPtr easy_ReadXLSXActiveSheet_AsDataSet_3 (
        _bstr_t path,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSXActiveSheet_AsDataSet_4 (
        struct _Stream * f,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSXActiveSheet_AsDataSet_5 (
        _bstr_t path,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IUnknownPtr easy_ReadXLSXActiveSheet_AsDataSet_6 (
        struct _Stream * f,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IListPtr easy_ReadXLSXActiveSheet_AsList (
        _bstr_t sPath );
    IListPtr easy_ReadXLSXActiveSheet_AsList_2 (
        struct _Stream * f );
    IListPtr easy_ReadXLSXActiveSheet_AsList_3 (
        _bstr_t sPath,
        _bstr_t rangeReference );
    IListPtr easy_ReadXLSXActiveSheet_AsList_4 (
        struct _Stream * f,
        _bstr_t rangeReference );
    IListPtr easy_ReadXLSXActiveSheet_AsList_5 (
        _bstr_t sPath,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IListPtr easy_ReadXLSXActiveSheet_AsList_6 (
        struct _Stream * f,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    VARIANT_BOOL easy_ReadXLSXSheet_AsXML (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSXSheet_AsXML_2 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadXLSXSheet_AsXML_3 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSXSheet_AsXML_4 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSXSheet_AsXML_5 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadXLSXSheet_AsXML_6 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSXActiveSheet_AsXML (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath );
    VARIANT_BOOL easy_ReadXLSXActiveSheet_AsXML_2 (
        struct _Stream * fXML,
        struct _Stream * fXLS );
    VARIANT_BOOL easy_ReadXLSXActiveSheet_AsXML_3 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSXActiveSheet_AsXML_4 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSXActiveSheet_AsXML_5 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSXActiveSheet_AsXML_6 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSBSheet_AsDataSet (
        _bstr_t path,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSBSheet_AsDataSet_2 (
        struct _Stream * f,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IUnknownPtr easy_ReadXLSBSheet_AsDataSet_3 (
        _bstr_t path,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXLSBSheet_AsDataSet_4 (
        struct _Stream * f,
        _bstr_t sheetName );
    IUnknownPtr easy_ReadXLSBSheet_AsDataSet_5 (
        _bstr_t path,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSBSheet_AsDataSet_6 (
        struct _Stream * f,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadXLSBSheet_AsList (
        _bstr_t path,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadXLSBSheet_AsList_2 (
        struct _Stream * f,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    IListPtr easy_ReadXLSBSheet_AsList_3 (
        _bstr_t sPath,
        _bstr_t sheetName );
    IListPtr easy_ReadXLSBSheet_AsList_4 (
        struct _Stream * f,
        _bstr_t sheetName );
    IListPtr easy_ReadXLSBSheet_AsList_5 (
        _bstr_t path,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IListPtr easy_ReadXLSBSheet_AsList_6 (
        struct _Stream * f,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSBActiveSheet_AsDataSet (
        _bstr_t sPath );
    IUnknownPtr easy_ReadXLSBActiveSheet_AsDataSet_2 (
        struct _Stream * f );
    IUnknownPtr easy_ReadXLSBActiveSheet_AsDataSet_3 (
        _bstr_t path,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSBActiveSheet_AsDataSet_4 (
        struct _Stream * f,
        _bstr_t sRangeReference );
    IUnknownPtr easy_ReadXLSBActiveSheet_AsDataSet_5 (
        _bstr_t path,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IUnknownPtr easy_ReadXLSBActiveSheet_AsDataSet_6 (
        struct _Stream * f,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IListPtr easy_ReadXLSBActiveSheet_AsList (
        _bstr_t sPath );
    IListPtr easy_ReadXLSBActiveSheet_AsList_2 (
        struct _Stream * f );
    IListPtr easy_ReadXLSBActiveSheet_AsList_3 (
        _bstr_t sPath,
        _bstr_t rangeReference );
    IListPtr easy_ReadXLSBActiveSheet_AsList_4 (
        struct _Stream * f,
        _bstr_t rangeReference );
    IListPtr easy_ReadXLSBActiveSheet_AsList_5 (
        _bstr_t sPath,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    IListPtr easy_ReadXLSBActiveSheet_AsList_6 (
        struct _Stream * f,
        long startRow,
        long startColumn,
        long endRow,
        long endColumn );
    VARIANT_BOOL easy_ReadXLSBSheet_AsXML (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSBSheet_AsXML_2 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadXLSBSheet_AsXML_3 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSBSheet_AsXML_4 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSBSheet_AsXML_5 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName );
    VARIANT_BOOL easy_ReadXLSBSheet_AsXML_6 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sheetName,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSBActiveSheet_AsXML (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath );
    VARIANT_BOOL easy_ReadXLSBActiveSheet_AsXML_2 (
        struct _Stream * fXML,
        struct _Stream * fXLS );
    VARIANT_BOOL easy_ReadXLSBActiveSheet_AsXML_3 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSBActiveSheet_AsXML_4 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        _bstr_t sRangeReference );
    VARIANT_BOOL easy_ReadXLSBActiveSheet_AsXML_5 (
        _bstr_t XMLFilePath,
        _bstr_t XLSFilePath,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_ReadXLSBActiveSheet_AsXML_6 (
        struct _Stream * fXML,
        struct _Stream * fXLS,
        long startRow,
        long startColumn,
        long nEndRow,
        long nEndColumn );
    VARIANT_BOOL easy_LoadTXTFile (
        _bstr_t sPath,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    VARIANT_BOOL easy_LoadTXTFile_2 (
        struct _Stream * f,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    VARIANT_BOOL easy_LoadTXTFile_3 (
        struct _StreamReader * f,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    VARIANT_BOOL easy_LoadCSVFile (
        _bstr_t sPath );
    VARIANT_BOOL easy_LoadCSVFile_2 (
        struct _Stream * f );
    VARIANT_BOOL easy_LoadCSVFile_3 (
        struct _StreamReader * f );
    VARIANT_BOOL easy_LoadXMLSpreadsheetFile (
        struct _Stream * f );
    VARIANT_BOOL easy_LoadXMLSpreadsheetFile_2 (
        _bstr_t sPath );
    VARIANT_BOOL easy_LoadHTMLFile (
        struct _Stream * f );
    VARIANT_BOOL easy_LoadHTMLFile_2 (
        _bstr_t sPath );
    VARIANT_BOOL easy_LoadHTMLFile_3 (
        struct _StreamReader * f );
    VARIANT_BOOL easy_LoadXLSFile (
        _bstr_t sPath );
    VARIANT_BOOL easy_LoadXLSFile_2 (
        struct _Stream * f );
    VARIANT_BOOL easy_LoadXLSXFile (
        _bstr_t sPath );
    VARIANT_BOOL easy_LoadXLSXFile_2 (
        struct _Stream * f );
    VARIANT_BOOL easy_LoadXLSBFile (
        _bstr_t sPath );
    VARIANT_BOOL easy_LoadXLSBFile_2 (
        struct _Stream * f );
    HRESULT easy_WriteTXTFile (
        _bstr_t sPath,
        _bstr_t sSheetName,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    HRESULT easy_WriteTXTFile_2 (
        struct _StreamWriter * f,
        _bstr_t sSheetName,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    HRESULT easy_WriteTXTFile_3 (
        struct _Stream * f,
        _bstr_t sSheetName,
        _bstr_t sRowDelimiter,
        _bstr_t sColumnDelimiter );
    HRESULT easy_WriteXMLFile (
        struct _Stream * f );
    HRESULT easy_WriteXMLFile_2 (
        _bstr_t sPath );
    HRESULT easy_WriteHTMLFile (
        struct _Stream * f,
        _bstr_t sSheetName );
    HRESULT easy_WriteHTMLFile_2 (
        struct _StreamWriter * f,
        _bstr_t sSheetName );
    HRESULT easy_WriteHTMLFile_3 (
        _bstr_t sPath,
        _bstr_t sSheetName );
    HRESULT easy_WriteCSVFile (
        _bstr_t sPath,
        _bstr_t sSheetName );
    HRESULT easy_WriteCSVFile_2 (
        struct _StreamWriter * f,
        _bstr_t sSheetName );
    HRESULT easy_WriteCSVFile_3 (
        struct _Stream * f,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile (
        _bstr_t sPath );
    HRESULT easy_WriteXLSFile_2 (
        struct _Stream * f );
    HRESULT easy_WriteXLSFile_FromDataSet (
        _bstr_t sPath,
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromDataSet_2 (
        _bstr_t sPath,
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromDataSet_3 (
        _bstr_t sPath,
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromDataSet_4 (
        struct _Stream * f,
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromDataSet_5 (
        struct _Stream * f,
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromDataSet_6 (
        struct _Stream * f,
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromList (
        _bstr_t sPath,
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromList_2 (
        _bstr_t sPath,
        const _variant_t & List,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromList_3 (
        _bstr_t sPath,
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromList_4 (
        struct _Stream * f,
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromList_5 (
        struct _Stream * f,
        const _variant_t & List,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSFile_FromList_6 (
        struct _Stream * f,
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile (
        _bstr_t sPath );
    HRESULT easy_WriteXLSXFile_2 (
        struct _Stream * f );
    HRESULT easy_WriteXLSXFile_FromDataSet (
        _bstr_t sPath,
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromDataSet_2 (
        _bstr_t sPath,
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromDataSet_3 (
        _bstr_t sPath,
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromDataSet_4 (
        struct _Stream * f,
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromDataSet_5 (
        struct _Stream * f,
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromDataSet_6 (
        struct _Stream * f,
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromList (
        _bstr_t sPath,
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromList_2 (
        _bstr_t sPath,
        const _variant_t & List,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromList_3 (
        _bstr_t sPath,
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromList_4 (
        struct _Stream * f,
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromList_5 (
        struct _Stream * f,
        const _variant_t & List,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSXFile_FromList_6 (
        struct _Stream * f,
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile (
        _bstr_t sPath );
    HRESULT easy_WriteXLSBFile_2 (
        struct _Stream * f );
    HRESULT easy_WriteXLSBFile_FromDataSet (
        _bstr_t sPath,
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromDataSet_2 (
        _bstr_t sPath,
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromDataSet_3 (
        _bstr_t sPath,
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromDataSet_4 (
        struct _Stream * f,
        IUnknown * ds,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromDataSet_5 (
        struct _Stream * f,
        IUnknown * ds,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromDataSet_6 (
        struct _Stream * f,
        IUnknown * ds,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromList (
        _bstr_t sPath,
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromList_2 (
        _bstr_t sPath,
        const _variant_t & List,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromList_3 (
        _bstr_t sPath,
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromList_4 (
        struct _Stream * f,
        const _variant_t & List,
        long startRow,
        long startCol,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromList_5 (
        struct _Stream * f,
        const _variant_t & List,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_WriteXLSBFile_FromList_6 (
        struct _Stream * f,
        const _variant_t & List,
        _bstr_t startCellReference,
        const _variant_t & xlsAutoFormat,
        _bstr_t sSheetName );
    HRESULT easy_addWorksheet (
        struct IExcelWorksheet * xlsWorksheet );
    HRESULT easy_addWorksheet_2 (
        _bstr_t sheetName );
    HRESULT easy_addWorksheet_3 (
        _bstr_t sheetName,
        VARIANT_BOOL isSelected );
    HRESULT easy_insertWorksheet (
        long index,
        const _variant_t & xlsWorksheet );
    HRESULT easy_insertWorksheet_2 (
        long index,
        _bstr_t sheetName );
    HRESULT easy_insertWorksheet_3 (
        long index,
        _bstr_t sheetName,
        VARIANT_BOOL isSelected );
    HRESULT easy_removeSheet (
        long index );
    HRESULT easy_removeSheet_2 (
        _bstr_t sheetName );
    IExcelSheetPtr easy_getSheetAt (
        long index );
    IExcelSheetPtr easy_getSheet (
        _bstr_t sheetName );
    long easy_getSheetPosition (
        _bstr_t sheetName );
    HRESULT easy_addChart (
        struct IExcelChartSheet * xlsChart );
    HRESULT easy_addChart_2 (
        _bstr_t sheetName );
    HRESULT easy_addChart_3 (
        _bstr_t sheetName,
        VARIANT_BOOL isSelected );
    HRESULT easy_addChart_4 (
        _bstr_t sheetName,
        VARIANT_BOOL isSelected,
        _bstr_t formulaDataRange,
        long seriesType );
    HRESULT easy_addChart_5 (
        _bstr_t sheetName,
        _bstr_t formulaDataRange,
        long seriesType );
    HRESULT easy_insertChart (
        long index,
        const _variant_t & xlsChart );
    HRESULT easy_insertChart_2 (
        long index,
        _bstr_t sheetName );
    HRESULT easy_insertChart_3 (
        long index,
        _bstr_t sheetName,
        VARIANT_BOOL isSelected );
    HRESULT easy_insertChart_4 (
        long index,
        _bstr_t sheetName,
        VARIANT_BOOL isSelected,
        _bstr_t formulaDataRange,
        long seriesType );
    HRESULT easy_insertChart_5 (
        long index,
        _bstr_t sheetName,
        _bstr_t formulaDataRange,
        long seriesType );
    long getCurrentSheet ( );
    HRESULT setCurrentSheet (
        long tabIndex );
    HRESULT setWorkbookProtection (
        VARIANT_BOOL protectStructure,
        VARIANT_BOOL protectWindows,
        _bstr_t password );
    VARIANT_BOOL IsStructureProtected ( );
    VARIANT_BOOL IsWindowsProtected ( );
    HRESULT setWorkbookPassword (
        _bstr_t password );
    HRESULT Dispose ( );
    IExcelOptionsPtr easy_getOptions ( );
    HRESULT easy_setOptions (
        struct IExcelOptions * xlsOptions );
    IListPtr getCircularReferences ( );
    HRESULT easy_removeVBMacros ( );
    HRESULT setDocumentSummaryInformation (
        struct IDocumentSummaryInformation * DocumentSummaryInformation );
    IDocumentSummaryInformationPtr getDocumentSummaryInformation ( );
    HRESULT setSummaryInformation (
        struct ISummaryInformation * SummaryInformation );
    ISummaryInformationPtr getSummaryInformation ( );
    IExternalLinksPtr getExternalLinks ( );
    IExcelThemePtr getTheme ( );
    HRESULT setTheme (
        struct IExcelTheme * xlsTheme );
    HRESULT setTheme_2 (
        _bstr_t builtInTheme );
    IExcelDocumentPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_easy_getError (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getWarnings (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SheetCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_IsExcel (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_IsExcel_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsList (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsList_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsDataSet (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsDataSet_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsDataSet_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsList (
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsList_2 (
        /*[in]*/ VARIANT xlsWorksheet,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsList_3 (
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsList_4 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsList_5 (
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsList_6 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsDataSet (
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsDataSet_2 (
        /*[in]*/ VARIANT xlsWorksheet,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsDataSet_3 (
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsDataSet_4 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsDataSet_5 (
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsDataSet_6 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsXML_2 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsXML_4 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsXML_5 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSSheet_AsXML_6 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsList (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsList_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR rangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR rangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsList_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsDataSet (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsDataSet_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsDataSet_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSXFilePath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsXML_2 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLSX,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSXFilePath,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsXML_4 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLSX,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsXML_5 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSXFilePath,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSActiveSheet_AsXML_6 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLSX,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadCSVFile_AsList (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadCSVFile_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadCSVFile_AsList_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadCSVFile_AsDataSet (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadCSVFile_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadCSVFile_AsDataSet_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXMLSpreadsheet_AsDataSet (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXMLSpreadsheet_AsDataSet_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXMLSpreadsheet_AsList (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXMLSpreadsheet_AsList_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadTXTFile_AsList (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadTXTFile_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadTXTFile_AsList_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadTXTFile_AsDataSet (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadTXTFile_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadTXTFile_AsDataSet_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_2 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ VARIANT xlsWorksheet,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_4 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long nStartColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_5 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_6 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_7 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ long nStartRow,
        /*[in]*/ long nStartColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_8 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ VARIANT xlsWorksheet,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_9 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ VARIANT xlsWorksheet,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_10 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long nStartRow,
        /*[in]*/ long nStartColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_11 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadExcelWorksheet_AsXML_12 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsDataSet (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsDataSet_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsDataSet_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsList (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsList_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsDataSet (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsDataSet_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsDataSet_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsList (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR rangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR rangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsList_5 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsXML_2 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsXML_4 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsXML_5 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXSheet_AsXML_6 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsXML_2 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsXML_4 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsXML_5 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSXActiveSheet_AsXML_6 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsDataSet (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsDataSet_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsDataSet_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsList (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsList_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsDataSet (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsDataSet_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsDataSet_3 (
        /*[in]*/ BSTR path,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsDataSet_5 (
        /*[in]*/ BSTR path,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsList (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsList_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR rangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR rangeReference,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsList_5 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long endRow,
        /*[in]*/ long endColumn,
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsXML_2 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsXML_4 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsXML_5 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBSheet_AsXML_6 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsXML (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsXML_2 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsXML_3 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsXML_4 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ BSTR sRangeReference,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsXML_5 (
        /*[in]*/ BSTR XMLFilePath,
        /*[in]*/ BSTR XLSFilePath,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_ReadXLSBActiveSheet_AsXML_6 (
        /*[in]*/ struct _Stream * fXML,
        /*[in]*/ struct _Stream * fXLS,
        /*[in]*/ long startRow,
        /*[in]*/ long startColumn,
        /*[in]*/ long nEndRow,
        /*[in]*/ long nEndColumn,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadTXTFile (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadTXTFile_2 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadTXTFile_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadCSVFile (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadCSVFile_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadCSVFile_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXMLSpreadsheetFile (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXMLSpreadsheetFile_2 (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadHTMLFile (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadHTMLFile_2 (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadHTMLFile_3 (
        /*[in]*/ struct _StreamReader * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXLSFile (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXLSFile_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXLSXFile (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXLSXFile_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXLSBFile (
        /*[in]*/ BSTR sPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_LoadXLSBFile_2 (
        /*[in]*/ struct _Stream * f,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteTXTFile (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sSheetName,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteTXTFile_2 (
        /*[in]*/ struct _StreamWriter * f,
        /*[in]*/ BSTR sSheetName,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteTXTFile_3 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sSheetName,
        /*[in]*/ BSTR sRowDelimiter,
        /*[in]*/ BSTR sColumnDelimiter ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXMLFile (
        /*[in]*/ struct _Stream * f ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXMLFile_2 (
        /*[in]*/ BSTR sPath ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteHTMLFile (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteHTMLFile_2 (
        /*[in]*/ struct _StreamWriter * f,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteHTMLFile_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteCSVFile (
        /*[in]*/ BSTR sPath,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteCSVFile_2 (
        /*[in]*/ struct _StreamWriter * f,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteCSVFile_3 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile (
        /*[in]*/ BSTR sPath ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_2 (
        /*[in]*/ struct _Stream * f ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromDataSet (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromDataSet_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromDataSet_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromDataSet_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromList (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromList_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromList_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSFile_FromList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile (
        /*[in]*/ BSTR sPath ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_2 (
        /*[in]*/ struct _Stream * f ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromDataSet (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromDataSet_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromDataSet_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromDataSet_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromList (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromList_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromList_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSXFile_FromList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile (
        /*[in]*/ BSTR sPath ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_2 (
        /*[in]*/ struct _Stream * f ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromDataSet (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromDataSet_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromDataSet_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromDataSet_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromDataSet_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromDataSet_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ IUnknown * ds,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromList (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromList_2 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromList_3 (
        /*[in]*/ BSTR sPath,
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromList_4 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ long startRow,
        /*[in]*/ long startCol,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromList_5 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_WriteXLSBFile_FromList_6 (
        /*[in]*/ struct _Stream * f,
        /*[in]*/ VARIANT List,
        /*[in]*/ BSTR startCellReference,
        /*[in]*/ VARIANT xlsAutoFormat,
        /*[in]*/ BSTR sSheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_addWorksheet (
        /*[in]*/ struct IExcelWorksheet * xlsWorksheet ) = 0;
      virtual HRESULT __stdcall raw_easy_addWorksheet_2 (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_addWorksheet_3 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ VARIANT_BOOL isSelected ) = 0;
      virtual HRESULT __stdcall raw_easy_insertWorksheet (
        /*[in]*/ long index,
        /*[in]*/ VARIANT xlsWorksheet ) = 0;
      virtual HRESULT __stdcall raw_easy_insertWorksheet_2 (
        /*[in]*/ long index,
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_insertWorksheet_3 (
        /*[in]*/ long index,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ VARIANT_BOOL isSelected ) = 0;
      virtual HRESULT __stdcall raw_easy_removeSheet (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_easy_removeSheet_2 (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_getSheetAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IExcelSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getSheet (
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ struct IExcelSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_getSheetPosition (
        /*[in]*/ BSTR sheetName,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart (
        /*[in]*/ struct IExcelChartSheet * xlsChart ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_2 (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_3 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ VARIANT_BOOL isSelected ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_4 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ VARIANT_BOOL isSelected,
        /*[in]*/ BSTR formulaDataRange,
        /*[in]*/ long seriesType ) = 0;
      virtual HRESULT __stdcall raw_easy_addChart_5 (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR formulaDataRange,
        /*[in]*/ long seriesType ) = 0;
      virtual HRESULT __stdcall raw_easy_insertChart (
        /*[in]*/ long index,
        /*[in]*/ VARIANT xlsChart ) = 0;
      virtual HRESULT __stdcall raw_easy_insertChart_2 (
        /*[in]*/ long index,
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall raw_easy_insertChart_3 (
        /*[in]*/ long index,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ VARIANT_BOOL isSelected ) = 0;
      virtual HRESULT __stdcall raw_easy_insertChart_4 (
        /*[in]*/ long index,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ VARIANT_BOOL isSelected,
        /*[in]*/ BSTR formulaDataRange,
        /*[in]*/ long seriesType ) = 0;
      virtual HRESULT __stdcall raw_easy_insertChart_5 (
        /*[in]*/ long index,
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR formulaDataRange,
        /*[in]*/ long seriesType ) = 0;
      virtual HRESULT __stdcall raw_getCurrentSheet (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setCurrentSheet (
        /*[in]*/ long tabIndex ) = 0;
      virtual HRESULT __stdcall raw_setWorkbookProtection (
        /*[in]*/ VARIANT_BOOL protectStructure,
        /*[in]*/ VARIANT_BOOL protectWindows,
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall raw_IsStructureProtected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsWindowsProtected (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setWorkbookPassword (
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall raw_Dispose ( ) = 0;
      virtual HRESULT __stdcall raw_easy_getOptions (
        /*[out,retval]*/ struct IExcelOptions * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_setOptions (
        /*[in]*/ struct IExcelOptions * xlsOptions ) = 0;
      virtual HRESULT __stdcall raw_getCircularReferences (
        /*[out,retval]*/ struct IList * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_easy_removeVBMacros ( ) = 0;
      virtual HRESULT __stdcall raw_setDocumentSummaryInformation (
        /*[in]*/ struct IDocumentSummaryInformation * DocumentSummaryInformation ) = 0;
      virtual HRESULT __stdcall raw_getDocumentSummaryInformation (
        /*[out,retval]*/ struct IDocumentSummaryInformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setSummaryInformation (
        /*[in]*/ struct ISummaryInformation * SummaryInformation ) = 0;
      virtual HRESULT __stdcall raw_getSummaryInformation (
        /*[out,retval]*/ struct ISummaryInformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getExternalLinks (
        /*[out,retval]*/ struct IExternalLinks * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getTheme (
        /*[out,retval]*/ struct IExcelTheme * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setTheme (
        /*[in]*/ struct IExcelTheme * xlsTheme ) = 0;
      virtual HRESULT __stdcall raw_setTheme_2 (
        /*[in]*/ BSTR builtInTheme ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IExcelDocument * * pRetVal ) = 0;
};

struct __declspec(uuid("068a8ca0-60c1-48b2-9294-3d3e426d8887"))
IExternalLinks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT addLink (
        _bstr_t link );
    _bstr_t getLinkAt (
        long index );
    long getIndexOf (
        _bstr_t link );
    IExcelDocumentPtr getExcelDocument (
        _bstr_t link );
    long count ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_addLink (
        /*[in]*/ BSTR link ) = 0;
      virtual HRESULT __stdcall raw_getLinkAt (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getIndexOf (
        /*[in]*/ BSTR link,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getExcelDocument (
        /*[in]*/ BSTR link,
        /*[out,retval]*/ struct IExcelDocument * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_count (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

//
// Wrapper method implementations
//

//
// interface IExcelValueField wrapper method implementations
//

inline _bstr_t IExcelValueField::getCustomName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCustomName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelValueField::setCustomName ( _bstr_t customName ) {
    HRESULT _hr = raw_setCustomName(customName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelValueField::getBasicField ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getBasicField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IExcelValueField::getSubtotal ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSubtotal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelValueField::setSubtotal ( long subtotal ) {
    HRESULT _hr = raw_setSubtotal(subtotal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelValueField::getFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelValueField::setFormat ( _bstr_t format ) {
    HRESULT _hr = raw_setFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelValueFieldPtr IExcelValueField::Clone ( ) {
    struct IExcelValueField * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelValueFieldPtr(_result, false);
}

//
// interface IExcelField wrapper method implementations
//

inline _bstr_t IExcelField::getCustomName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCustomName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelField::setCustomName ( _bstr_t customName ) {
    HRESULT _hr = raw_setCustomName(customName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelField::getOriginalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getOriginalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IExcelField::getArea ( ) {
    long _result = 0;
    HRESULT _hr = raw_getArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::addSubtotal ( long subtotal ) {
    HRESULT _hr = raw_addSubtotal(subtotal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelField::removeSubtotal ( long index ) {
    HRESULT _hr = raw_removeSubtotal(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelField::getSubtotalAt ( long index ) {
    long _result = 0;
    HRESULT _hr = raw_getSubtotalAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelField::SubtotalCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_SubtotalCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelField::HasNewItemsInFilter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasNewItemsInFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setNewItemsInFilter ( VARIANT_BOOL include ) {
    HRESULT _hr = raw_setNewItemsInFilter(include);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelField::ShowItemLabelsInOutlineForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowItemLabelsInOutlineForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelField::ShowCompactForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowCompactForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelField::ShowSubtotalsOnTop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowSubtotalsOnTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setShowItemLabelsInOutlineForm ( VARIANT_BOOL show, VARIANT_BOOL compact, VARIANT_BOOL subtotalsOnTop ) {
    HRESULT _hr = raw_setShowItemLabelsInOutlineForm(show, compact, subtotalsOnTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelField::ShowItemLabelsInTabularForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowItemLabelsInTabularForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setShowItemLabelsInTabularForm ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowItemLabelsInTabularForm(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelField::IsInsertBlankLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsInsertBlankLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setInsertBlankLine ( VARIANT_BOOL insertBlankLine ) {
    HRESULT _hr = raw_setInsertBlankLine(insertBlankLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelField::ShowItemsWithNoData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowItemsWithNoData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setShowItemsWithNoData ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowItemsWithNoData(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelField::IsInsertPageBreak ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsInsertPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setInsertPageBreak ( VARIANT_BOOL insertPageBreak ) {
    HRESULT _hr = raw_setInsertPageBreak(insertPageBreak);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelField::getSortOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelField::setSortOrder ( long sortOrder ) {
    HRESULT _hr = raw_setSortOrder(sortOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFieldPtr IExcelField::Clone ( ) {
    struct IExcelField * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFieldPtr(_result, false);
}

//
// interface IList wrapper method implementations
//

inline _variant_t IList::elementAt ( long index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_elementAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IList::size ( ) {
    long _result = 0;
    HRESULT _hr = raw_size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IList::addElement ( const _variant_t & value ) {
    HRESULT _hr = raw_addElement(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::insertElementAt ( const _variant_t & value, long index ) {
    HRESULT _hr = raw_insertElementAt(value, index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::removeElement ( const _variant_t & value ) {
    HRESULT _hr = raw_removeElement(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::removeElementAt ( long index ) {
    HRESULT _hr = raw_removeElementAt(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::removeRange ( long index, long count ) {
    HRESULT _hr = raw_removeRange(index, count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::setElementAt ( const _variant_t & value, long index ) {
    HRESULT _hr = raw_setElementAt(value, index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::clear ( ) {
    HRESULT _hr = raw_clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::addAll ( long index, const _variant_t & collection ) {
    HRESULT _hr = raw_addAll(index, collection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IList::addAll_2 ( struct IList * collection ) {
    HRESULT _hr = raw_addAll_2(collection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IList::contains ( const _variant_t & value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_contains(value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IList::indexOf ( const _variant_t & value ) {
    long _result = 0;
    HRESULT _hr = raw_indexOf(value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IListPtr IList::Clone ( ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline HRESULT IList::setCapacity ( long capacity ) {
    HRESULT _hr = raw_setCapacity(capacity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFormulaResult wrapper method implementations
//

inline _bstr_t IFormulaResult::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFormulaResult::getNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFormulaResult::getDataType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IFormulaResult::isHyperlink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isHyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFormulaResult::getLinkLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLinkLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IExcelEffectScheme wrapper method implementations
//

inline HRESULT IExcelEffectScheme::InitAs ( _bstr_t builtInThemeEffects ) {
    HRESULT _hr = raw_InitAs(builtInThemeEffects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelEffectScheme::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IExcelFontScheme wrapper method implementations
//

inline HRESULT IExcelFontScheme::InitAs ( _bstr_t builtInThemeFonts ) {
    HRESULT _hr = raw_InitAs(builtInThemeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFontScheme::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFontScheme::setName ( _bstr_t name ) {
    HRESULT _hr = raw_setName(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFontScheme::getHeadingFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHeadingFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFontScheme::setHeadingFont ( _bstr_t font ) {
    HRESULT _hr = raw_setHeadingFont(font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFontScheme::getBodyFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getBodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFontScheme::setBodyFont ( _bstr_t font ) {
    HRESULT _hr = raw_setBodyFont(font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelColorScheme wrapper method implementations
//

inline HRESULT IExcelColorScheme::InitAs ( _bstr_t builtInThemeColors ) {
    HRESULT _hr = raw_InitAs(builtInThemeColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelColorScheme::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelColorScheme::setName ( _bstr_t name ) {
    HRESULT _hr = raw_setName(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getTextBackgroundDark1 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextBackgroundDark1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setTextBackgroundDark1 ( long textBackgroundDark1 ) {
    HRESULT _hr = raw_setTextBackgroundDark1(textBackgroundDark1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColorScheme::IsAutomaticTextBackgroundDark1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticTextBackgroundDark1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAutomaticTextBackgroundDark1 ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticTextBackgroundDark1(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getTextBackgroundLight1 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextBackgroundLight1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setTextBackgroundLight1 ( long textBackgroundLight1 ) {
    HRESULT _hr = raw_setTextBackgroundLight1(textBackgroundLight1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColorScheme::IsAutomaticTextBackgroundLight1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticTextBackgroundLight1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAutomaticTextBackgroundLight1 ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticTextBackgroundLight1(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getTextBackgroundDark2 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextBackgroundDark2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setTextBackgroundDark2 ( long textBackgroundDark2 ) {
    HRESULT _hr = raw_setTextBackgroundDark2(textBackgroundDark2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getTextBackgroundLight2 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextBackgroundLight2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setTextBackgroundLight2 ( long textBackgroundLight2 ) {
    HRESULT _hr = raw_setTextBackgroundLight2(textBackgroundLight2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getAccent1Color ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAccent1Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAccent1Color ( long accent1 ) {
    HRESULT _hr = raw_setAccent1Color(accent1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getAccent2Color ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAccent2Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAccent2Color ( long accent2 ) {
    HRESULT _hr = raw_setAccent2Color(accent2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getAccent3Color ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAccent3Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAccent3Color ( long accent3 ) {
    HRESULT _hr = raw_setAccent3Color(accent3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getAccent4Color ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAccent4Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAccent4Color ( long accent4 ) {
    HRESULT _hr = raw_setAccent4Color(accent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getAccent5Color ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAccent5Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAccent5Color ( long accent5 ) {
    HRESULT _hr = raw_setAccent5Color(accent5);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getAccent6Color ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAccent6Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setAccent6Color ( long accent6 ) {
    HRESULT _hr = raw_setAccent6Color(accent6);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getHyperlinkColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHyperlinkColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setHyperlinkColor ( long hyperlink ) {
    HRESULT _hr = raw_setHyperlinkColor(hyperlink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColorScheme::getFollowedHyperlinkColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFollowedHyperlinkColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColorScheme::setFollowedHyperlinkColor ( long followedHyperlink ) {
    HRESULT _hr = raw_setFollowedHyperlinkColor(followedHyperlink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelTheme wrapper method implementations
//

inline _bstr_t IExcelTheme::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelTheme::setName ( _bstr_t name ) {
    HRESULT _hr = raw_setName(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelColorSchemePtr IExcelTheme::getColorScheme ( ) {
    struct IExcelColorScheme * _result = 0;
    HRESULT _hr = raw_getColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelColorSchemePtr(_result, false);
}

inline HRESULT IExcelTheme::setColorScheme ( struct IExcelColorScheme * colorScheme ) {
    HRESULT _hr = raw_setColorScheme(colorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFontSchemePtr IExcelTheme::getFontScheme ( ) {
    struct IExcelFontScheme * _result = 0;
    HRESULT _hr = raw_getFontScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFontSchemePtr(_result, false);
}

inline HRESULT IExcelTheme::setFontScheme ( struct IExcelFontScheme * fontScheme ) {
    HRESULT _hr = raw_setFontScheme(fontScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelEffectSchemePtr IExcelTheme::getEffectScheme ( ) {
    struct IExcelEffectScheme * _result = 0;
    HRESULT _hr = raw_getEffectScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelEffectSchemePtr(_result, false);
}

inline HRESULT IExcelTheme::setEffectScheme ( struct IExcelEffectScheme * effectScheme ) {
    HRESULT _hr = raw_setEffectScheme(effectScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTheme::InitAs ( _bstr_t builtInTheme ) {
    HRESULT _hr = raw_InitAs(builtInTheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IThemeColor wrapper method implementations
//

inline HRESULT IThemeColor::setColor ( long basicColor, long alterColorIndex ) {
    HRESULT _hr = raw_setColor(basicColor, alterColorIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IThemeColor::getBasicColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBasicColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IThemeColor::setBasicColor ( long basicColor ) {
    HRESULT _hr = raw_setBasicColor(basicColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IThemeColor::getTint ( ) {
    double _result = 0;
    HRESULT _hr = raw_getTint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IThemeColor::getLuminanceModulation ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLuminanceModulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IThemeColor::getLuminanceOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLuminanceOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IThemeColor::IsEqual ( struct IThemeColor * ThemeColor ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEqual(ThemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IThemeColor::getColorForTheme ( struct IExcelTheme * xlsTheme ) {
    long _result = 0;
    HRESULT _hr = raw_getColorForTheme(xlsTheme, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDocumentSummaryInformation wrapper method implementations
//

inline _bstr_t IDocumentSummaryInformation::getCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDocumentSummaryInformation::setCategory ( _bstr_t category ) {
    HRESULT _hr = raw_setCategory(category);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDocumentSummaryInformation::getCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDocumentSummaryInformation::setCompanyName ( _bstr_t companyName ) {
    HRESULT _hr = raw_setCompanyName(companyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IDocumentSummaryInformation::getScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDocumentSummaryInformation::setScale ( VARIANT_BOOL scale ) {
    HRESULT _hr = raw_setScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IDocumentSummaryInformation::getLinksDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getLinksDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDocumentSummaryInformation::setLinksDirty ( VARIANT_BOOL linksDirty ) {
    HRESULT _hr = raw_setLinksDirty(linksDirty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDocumentSummaryInformation::getManager ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDocumentSummaryInformation::setManager ( _bstr_t manager ) {
    HRESULT _hr = raw_setManager(manager);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDocumentSummaryInformation::getHyperlinkBase ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHyperlinkBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDocumentSummaryInformation::setHyperlinkBase ( _bstr_t hyperlinkBase ) {
    HRESULT _hr = raw_setHyperlinkBase(hyperlinkBase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDocumentSummaryInformation::getCustomProperty ( _bstr_t name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCustomProperty(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDocumentSummaryInformation::setCustomProperty ( _bstr_t name, __int64 type, _bstr_t value ) {
    HRESULT _hr = raw_setCustomProperty(name, type, value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IDocumentSummaryInformation::HasCustomProperties ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasCustomProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISummaryInformation wrapper method implementations
//

inline _bstr_t ISummaryInformation::getTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setTitle ( _bstr_t title ) {
    HRESULT _hr = raw_setTitle(title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setSubject ( _bstr_t subject ) {
    HRESULT _hr = raw_setSubject(subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getKeywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setKeywords ( _bstr_t keywords ) {
    HRESULT _hr = raw_setKeywords(keywords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setComments ( _bstr_t comments ) {
    HRESULT _hr = raw_setComments(comments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setAuthor ( _bstr_t author ) {
    HRESULT _hr = raw_setAuthor(author);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getLastSavedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLastSavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setLastSavedBy ( _bstr_t author ) {
    HRESULT _hr = raw_setLastSavedBy(author);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getRevisionNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getRevisionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setRevisionNumber ( _bstr_t revisionNumber ) {
    HRESULT _hr = raw_setRevisionNumber(revisionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getApplicationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setApplicationName ( _bstr_t applicationName ) {
    HRESULT _hr = raw_setApplicationName(applicationName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DATE ISummaryInformation::getLastSavedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_getLastSavedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISummaryInformation::setLastSavedDate ( DATE date ) {
    HRESULT _hr = raw_setLastSavedDate(date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DATE ISummaryInformation::getCreationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_getCreationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE ISummaryInformation::getLastPrinted ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_getLastPrinted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISummaryInformation::setLastPrinted ( DATE lastPrinted ) {
    HRESULT _hr = raw_setLastPrinted(lastPrinted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISummaryInformation::getStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISummaryInformation::setStatus ( _bstr_t status ) {
    HRESULT _hr = raw_setStatus(status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelName wrapper method implementations
//

inline _bstr_t IExcelName::getNameText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getNameText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelName::setNameText ( _bstr_t text ) {
    HRESULT _hr = raw_setNameText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelName::getRefersTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getRefersTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelName::setRefersTo ( _bstr_t Formula ) {
    HRESULT _hr = raw_setRefersTo(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelName::IsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelName::setHidden ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHidden(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelName::IsBuildInName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBuildInName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelName::getSheetIndex ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSheetIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelNamePtr IExcelName::Clone ( ) {
    struct IExcelName * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelNamePtr(_result, false);
}

//
// interface IExcelOptions wrapper method implementations
//

inline VARIANT_BOOL IExcelOptions::CalculateFormulas ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CalculateFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelOptions::setCalculateFormulas ( VARIANT_BOOL CalculateFormulas ) {
    HRESULT _hr = raw_setCalculateFormulas(CalculateFormulas);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelOptions::setIterativeCalculation ( VARIANT_BOOL enable, long maximumIterations, double maximumChange ) {
    HRESULT _hr = raw_setIterativeCalculation(enable, maximumIterations, maximumChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelOptions::IsIterativeCalculation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsIterativeCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelOptions::getMaximumIterations ( ) {
    long _result = 0;
    HRESULT _hr = raw_getMaximumIterations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IExcelOptions::getMaximumChange ( ) {
    double _result = 0;
    HRESULT _hr = raw_getMaximumChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelOptions::IsR1C1ReferenceStyle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsR1C1ReferenceStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelOptions::setR1C1ReferenceStyle ( VARIANT_BOOL IsR1C1ReferenceStyle ) {
    HRESULT _hr = raw_setR1C1ReferenceStyle(IsR1C1ReferenceStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelOptions::setEncryptionOptions ( long encryptionType, _bstr_t passwordToOpen ) {
    HRESULT _hr = raw_setEncryptionOptions(encryptionType, passwordToOpen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelOptions::getEncryptionType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getEncryptionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelOptions::setPasswordToOpen ( _bstr_t passwordToOpen ) {
    HRESULT _hr = raw_setPasswordToOpen(passwordToOpen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelOptions::getPasswordToOpen ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getPasswordToOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelOptions::setPasswordToModify ( _bstr_t passwordToModify ) {
    HRESULT _hr = raw_setPasswordToModify(passwordToModify);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelOptions::getPasswordToModify ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getPasswordToModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IExcelOptionsPtr IExcelOptions::Clone ( ) {
    struct IExcelOptions * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelOptionsPtr(_result, false);
}

//
// interface IExcelStyle wrapper method implementations
//

inline _bstr_t IExcelStyle::getFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelStyle::setFormat ( _bstr_t format ) {
    HRESULT _hr = raw_setFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelStyle::getHorizontalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelStyle::setHorizontalAlignment ( _bstr_t horizontalAlignment ) {
    HRESULT _hr = raw_setHorizontalAlignment(horizontalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelStyle::getVerticalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getVerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelStyle::setVerticalAlignment ( _bstr_t verticalAlignment ) {
    HRESULT _hr = raw_setVerticalAlignment(verticalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsJustifyDistributed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsJustifyDistributed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setJustifyDistributed ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setJustifyDistributed(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getIndent ( ) {
    long _result = 0;
    HRESULT _hr = raw_getIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setIndent ( long indent ) {
    HRESULT _hr = raw_setIndent(indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getTextRotation ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setTextRotation ( long textRotation ) {
    HRESULT _hr = raw_setTextRotation(textRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::isWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setWrap ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setWrap(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setShrink ( VARIANT_BOOL IsShrink ) {
    HRESULT _hr = raw_setShrink(IsShrink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsMergeCell ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMergeCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelStyle::getTextDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setTextDirection ( long textDirection ) {
    HRESULT _hr = raw_setTextDirection(textDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelStyle::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelStyle::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsHeadingsFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setHeadingsFont ( ) {
    HRESULT _hr = raw_setHeadingsFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsBodyFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setBodyFont ( ) {
    HRESULT _hr = raw_setBodyFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getForegroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getForegroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setForeground ( long color ) {
    HRESULT _hr = raw_setForeground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setForeground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setForeground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setBorderStyles ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderStyles(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getTopStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setTopStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setTopStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getBottomStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setBottomStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setBottomStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getLeftStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setLeftStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setLeftStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getRightStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setRightStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setRightStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setBorderColors ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderColors(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setBorderColors_2 ( const _variant_t & borderTop, const _variant_t & borderBottom, const _variant_t & borderLeft, const _variant_t & borderRight ) {
    HRESULT _hr = raw_setBorderColors_2(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getTopColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getTopThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTopThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setTopColor_Border ( long color ) {
    HRESULT _hr = raw_setTopColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setTopColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setTopColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getBottomColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getBottomThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBottomThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setBottomColor_Border ( long color ) {
    HRESULT _hr = raw_setBottomColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setBottomColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBottomColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getLeftColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getLeftThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getLeftThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setLeftColor_Border ( long color ) {
    HRESULT _hr = raw_setLeftColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setLeftColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setLeftColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getRightColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getRightThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getRightThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setRightColor_Border ( long color ) {
    HRESULT _hr = raw_setRightColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setRightColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setRightColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setDiagonalBorder ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, long borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setDiagonalBorder_2 ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, const _variant_t & borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder_2(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getDiagonalUpStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalUpStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelStyle::getDiagonalDownStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalDownStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelStyle::getDiagonalColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getDiagonalThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getDiagonalThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline long IExcelStyle::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getBackgroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBackgroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setBackground ( long color ) {
    HRESULT _hr = raw_setBackground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setBackground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBackground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getPattern ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setPattern ( long pattern ) {
    HRESULT _hr = raw_setPattern(pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getPatternColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelStyle::getPatternThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getPatternThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setPatternColor ( long patternColor ) {
    HRESULT _hr = raw_setPatternColor(patternColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setPatternColor_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setPatternColor_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getGradientColor1 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setGradientColor1 ( long color1 ) {
    HRESULT _hr = raw_setGradientColor1(color1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getGradientColor2 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setGradientColor2 ( long color2 ) {
    HRESULT _hr = raw_setGradientColor2(color2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setGradientFill ( long color1, long color2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill(color1, color2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IExcelStyle::getGradientThemeColor1 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setGradientColor1_2 ( struct IThemeColor * themeColor1 ) {
    HRESULT _hr = raw_setGradientColor1_2(themeColor1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IExcelStyle::getGradientThemeColor2 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelStyle::setGradientColor2_2 ( struct IThemeColor * themeColor2 ) {
    HRESULT _hr = raw_setGradientColor2_2(themeColor2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelStyle::setGradientFill_2 ( const _variant_t & themeColor1, const _variant_t & themeColor2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill_2(themeColor1, themeColor2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelStyle::getGradientShadingStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientShadingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setGradientShadingStyle ( long shadingStyle ) {
    HRESULT _hr = raw_setGradientShadingStyle(shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setLocked ( VARIANT_BOOL IsLocked ) {
    HRESULT _hr = raw_setLocked(IsLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelStyle::IsHiddenFormula ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHiddenFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelStyle::setHiddenFormula ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHiddenFormula(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelStyle::getDataType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelStyle::setDataType ( _bstr_t dataType ) {
    HRESULT _hr = raw_setDataType(dataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelStyle::Clone ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline VARIANT_BOOL IExcelStyle::IsEqual ( struct IExcelStyle * xlsCompare ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEqual(xlsCompare, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExcelAutoFormat wrapper method implementations
//

inline HRESULT IExcelAutoFormat::setTableStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setTableStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getTableStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getTableStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setHeaderRowStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setHeaderRowStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getHeaderRowStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getHeaderRowStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setFooterRowStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setFooterRowStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getFooterRowStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getFooterRowStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setLeftColumnStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setLeftColumnStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getLeftColumnStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getLeftColumnStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setRightColumnStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setRightColumnStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getRightColumnStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getRightColumnStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setTopLeftCellStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setTopLeftCellStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getTopLeftCellStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getTopLeftCellStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setTopRightCellStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setTopRightCellStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getTopRightCellStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getTopRightCellStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setBottomLeftCellStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setBottomLeftCellStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getBottomLeftCellStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getBottomLeftCellStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setBottomRightCellStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setBottomRightCellStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getBottomRightCellStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getBottomRightCellStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setEvenRowStripesStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setEvenRowStripesStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getEvenRowStripesStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getEvenRowStripesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setEvenColumnStripesStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setEvenColumnStripesStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getEvenColumnStripesStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getEvenColumnStripesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setOddRowStripesStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setOddRowStripesStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getOddRowStripesStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getOddRowStripesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::setOddColumnStripesStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setOddColumnStripesStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelAutoFormat::getOddColumnStripesStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getOddColumnStripesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelAutoFormat::InitAs ( long autoformat ) {
    HRESULT _hr = raw_InitAs(autoformat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAutoFormat::getAutoFormatType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getAutoFormatType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelAutoFormatPtr IExcelAutoFormat::Clone ( ) {
    struct IExcelAutoFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAutoFormatPtr(_result, false);
}

//
// interface IExcelColumn wrapper method implementations
//

inline long IExcelColumn::count ( ) {
    long _result = 0;
    HRESULT _hr = raw_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelColumn::getWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setWidth ( long width ) {
    HRESULT _hr = raw_setWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsHiddenColumn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHiddenColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setHiddenColumn ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHiddenColumn(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelColumn::getDataType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelColumn::setDataType ( _bstr_t dataType ) {
    HRESULT _hr = raw_setDataType(dataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelColumn::getStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelColumn::setStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelColumn::getFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelColumn::setFormat ( _bstr_t format ) {
    HRESULT _hr = raw_setFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelColumn::getHorizontalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelColumn::setHorizontalAlignment ( _bstr_t horizontalAlignment ) {
    HRESULT _hr = raw_setHorizontalAlignment(horizontalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelColumn::getVerticalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getVerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelColumn::setVerticalAlignment ( _bstr_t verticalAlignment ) {
    HRESULT _hr = raw_setVerticalAlignment(verticalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsJustifyDistributed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsJustifyDistributed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setJustifyDistributed ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setJustifyDistributed(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getIndent ( ) {
    long _result = 0;
    HRESULT _hr = raw_getIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setIndent ( long indent ) {
    HRESULT _hr = raw_setIndent(indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getTextRotation ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setTextRotation ( long textRotation ) {
    HRESULT _hr = raw_setTextRotation(textRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::isWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setWrap ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setWrap(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setShrink ( VARIANT_BOOL IsShrink ) {
    HRESULT _hr = raw_setShrink(IsShrink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getTextDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setTextDirection ( long textDirection ) {
    HRESULT _hr = raw_setTextDirection(textDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelColumn::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelColumn::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsHeadingsFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setHeadingsFont ( ) {
    HRESULT _hr = raw_setHeadingsFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsBodyFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setBodyFont ( ) {
    HRESULT _hr = raw_setBodyFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getForegroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getForegroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setForeground ( long color ) {
    HRESULT _hr = raw_setForeground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setForeground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setForeground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setBorderStyles ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderStyles(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getTopStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setTopStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setTopStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getBottomStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setBottomStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setBottomStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getLeftStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setLeftStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setLeftStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getRightStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setRightStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setRightStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setBorderColors ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderColors(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setBorderColors_2 ( const _variant_t & borderTop, const _variant_t & borderBottom, const _variant_t & borderLeft, const _variant_t & borderRight ) {
    HRESULT _hr = raw_setBorderColors_2(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getTopColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getTopThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTopThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setTopColor_Border ( long color ) {
    HRESULT _hr = raw_setTopColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setTopColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setTopColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getBottomColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getBottomThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBottomThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setBottomColor_Border ( long color ) {
    HRESULT _hr = raw_setBottomColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setBottomColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBottomColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getLeftColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getLeftThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getLeftThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setLeftColor_Border ( long color ) {
    HRESULT _hr = raw_setLeftColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setLeftColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setLeftColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getRightColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getRightThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getRightThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setRightColor_Border ( long color ) {
    HRESULT _hr = raw_setRightColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setRightColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setRightColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setDiagonalBorder ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, long borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setDiagonalBorder_2 ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, const _variant_t & borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder_2(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getDiagonalUpStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalUpStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelColumn::getDiagonalDownStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalDownStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelColumn::getDiagonalColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getDiagonalThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getDiagonalThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline long IExcelColumn::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getBackgroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBackgroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setBackground ( long color ) {
    HRESULT _hr = raw_setBackground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setBackground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBackground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getPattern ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setPattern ( long pattern ) {
    HRESULT _hr = raw_setPattern(pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getPatternColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelColumn::getPatternThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getPatternThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setPatternColor ( long patternColor ) {
    HRESULT _hr = raw_setPatternColor(patternColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelColumn::setPatternColor_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setPatternColor_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getGradientColor1 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelColumn::getGradientColor2 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setGradientFill ( long color1, long color2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill(color1, color2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IExcelColumn::getGradientThemeColor1 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline IThemeColorPtr IExcelColumn::getGradientThemeColor2 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelColumn::setGradientFill_2 ( const _variant_t & themeColor1, const _variant_t & themeColor2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill_2(themeColor1, themeColor2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelColumn::getGradientShadingStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientShadingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelColumn::IsLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setLocked ( VARIANT_BOOL IsLocked ) {
    HRESULT _hr = raw_setLocked(IsLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelColumn::IsHiddenFormula ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHiddenFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelColumn::setHiddenFormula ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHiddenFormula(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelColumnPtr IExcelColumn::Clone ( ) {
    struct IExcelColumn * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelColumnPtr(_result, false);
}

//
// interface IExcelFooter wrapper method implementations
//

inline _bstr_t IExcelFooter::getFooterString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFooterString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFooter::setFooterString ( _bstr_t text ) {
    HRESULT _hr = raw_setFooterString(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFooter::getPosition ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFooter::setPosition ( _bstr_t position ) {
    HRESULT _hr = raw_setPosition(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertValue ( _bstr_t value ) {
    HRESULT _hr = raw_InsertValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertFont ( _bstr_t fontType ) {
    HRESULT _hr = raw_InsertFont(fontType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertFontSize ( long fontSize ) {
    HRESULT _hr = raw_InsertFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertSingleUnderline ( ) {
    HRESULT _hr = raw_InsertSingleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveSingleUnderline ( ) {
    HRESULT _hr = raw_RemoveSingleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertDoubleUnderline ( ) {
    HRESULT _hr = raw_InsertDoubleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveDoubleUnderline ( ) {
    HRESULT _hr = raw_RemoveDoubleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertStrikethrough ( ) {
    HRESULT _hr = raw_InsertStrikethrough();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveStrikethrough ( ) {
    HRESULT _hr = raw_RemoveStrikethrough();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertSuperscript ( ) {
    HRESULT _hr = raw_InsertSuperscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveSuperscript ( ) {
    HRESULT _hr = raw_RemoveSuperscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertSubscript ( ) {
    HRESULT _hr = raw_InsertSubscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveSubscript ( ) {
    HRESULT _hr = raw_RemoveSubscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertBold ( ) {
    HRESULT _hr = raw_InsertBold();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveBold ( ) {
    HRESULT _hr = raw_RemoveBold();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertItalic ( ) {
    HRESULT _hr = raw_InsertItalic();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::RemoveItalic ( ) {
    HRESULT _hr = raw_RemoveItalic();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertPage ( ) {
    HRESULT _hr = raw_InsertPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertPages ( ) {
    HRESULT _hr = raw_InsertPages();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertDate ( ) {
    HRESULT _hr = raw_InsertDate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertTime ( ) {
    HRESULT _hr = raw_InsertTime();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertFile ( ) {
    HRESULT _hr = raw_InsertFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertTab ( ) {
    HRESULT _hr = raw_InsertTab();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::InsertEnter ( ) {
    HRESULT _hr = raw_InsertEnter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFooter::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFooterPtr IExcelFooter::Clone ( ) {
    struct IExcelFooter * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFooterPtr(_result, false);
}

//
// interface IExcelCondition wrapper method implementations
//

inline VARIANT_BOOL IExcelCondition::IsFontUnderlineModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFontUnderlineModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCondition::IsFontBoldItalicModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFontBoldItalicModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCondition::IsFontStrikethroughModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFontStrikethroughModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCondition::IsFontColorModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFontColorModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::clearFontSettings ( ) {
    HRESULT _hr = raw_clearFontSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCondition::IsLeftBorderModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLeftBorderModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCondition::IsRightBorderModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRightBorderModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCondition::IsTopBorderModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTopBorderModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCondition::IsBottomBorderModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBottomBorderModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::clearBorderSettings ( ) {
    HRESULT _hr = raw_clearBorderSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCondition::IsBackgroundModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBackgroundModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::clearBackgroundSettings ( ) {
    HRESULT _hr = raw_clearBackgroundSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getConditionType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setConditionType ( long type ) {
    HRESULT _hr = raw_setConditionType(type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getOperator ( ) {
    long _result = 0;
    HRESULT _hr = raw_getOperator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setOperator ( long nOperator ) {
    HRESULT _hr = raw_setOperator(nOperator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCondition::getFirstFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFirstFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCondition::setFirstFormula ( _bstr_t firstFormula ) {
    HRESULT _hr = raw_setFirstFormula(firstFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCondition::getSecondFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSecondFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCondition::setSecondFormula ( _bstr_t secondFormula ) {
    HRESULT _hr = raw_setSecondFormula(secondFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCondition::getForegroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getForegroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCondition::setForeground ( long color ) {
    HRESULT _hr = raw_setForeground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setForeground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setForeground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCondition::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCondition::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCondition::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setBorderStyles ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderStyles(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getTopStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setTopStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setTopStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getBottomStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setBottomStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setBottomStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getLeftStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setLeftStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setLeftStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getRightStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCondition::setRightStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setRightStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setBorderColors ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderColors(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setBorderColors_2 ( const _variant_t & borderTop, const _variant_t & borderBottom, const _variant_t & borderLeft, const _variant_t & borderRight ) {
    HRESULT _hr = raw_setBorderColors_2(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getTopColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCondition::getTopThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTopThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCondition::setTopColor_Border ( long color ) {
    HRESULT _hr = raw_setTopColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setTopColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setTopColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getBottomColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCondition::getBottomThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBottomThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCondition::setBottomColor_Border ( long color ) {
    HRESULT _hr = raw_setBottomColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setBottomColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBottomColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getLeftColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCondition::getLeftThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getLeftThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCondition::setLeftColor_Border ( long color ) {
    HRESULT _hr = raw_setLeftColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setLeftColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setLeftColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getRightColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCondition::getRightThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getRightThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCondition::setRightColor_Border ( long color ) {
    HRESULT _hr = raw_setRightColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setRightColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setRightColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCondition::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCondition::getBackgroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBackgroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCondition::setBackground ( long color ) {
    HRESULT _hr = raw_setBackground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCondition::setBackground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBackground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelConditionPtr IExcelCondition::Clone ( ) {
    struct IExcelCondition * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelConditionPtr(_result, false);
}

//
// interface IExcelConditionalFormatting wrapper method implementations
//

inline HRESULT IExcelConditionalFormatting::setFirstRow ( long firstRow ) {
    HRESULT _hr = raw_setFirstRow(firstRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::setFirstColumn ( long firstColumn ) {
    HRESULT _hr = raw_setFirstColumn(firstColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::setLastRow ( long lastRow ) {
    HRESULT _hr = raw_setLastRow(lastRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::setLastColumn ( long lastColumn ) {
    HRESULT _hr = raw_setLastColumn(lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelConditionalFormatting::getFirstRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelConditionalFormatting::getLastRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelConditionalFormatting::getFirstColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelConditionalFormatting::getLastColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelConditionalFormatting::setRange ( long firstRow, long firstColumn, long lastRow, long lastColumn ) {
    HRESULT _hr = raw_setRange(firstRow, firstColumn, lastRow, lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::setRange_2 ( _bstr_t range ) {
    HRESULT _hr = raw_setRange_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::addCondition ( struct IExcelCondition * condition ) {
    HRESULT _hr = raw_addCondition(condition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::addCondition_2 ( long nOperator, _bstr_t firstFormula, _bstr_t secondFormula ) {
    HRESULT _hr = raw_addCondition_2(nOperator, firstFormula, secondFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::addCondition_3 ( long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_addCondition_3(nOperator, firstFormula, secondFormula, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::addCondition_4 ( long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground, long background ) {
    HRESULT _hr = raw_addCondition_4(nOperator, firstFormula, secondFormula, isBold, isItalic, foreground, background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::addCondition_5 ( long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, long background ) {
    HRESULT _hr = raw_addCondition_5(nOperator, firstFormula, secondFormula, background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelConditionalFormatting::insertCondition ( long index, struct IExcelCondition * condition ) {
    HRESULT _hr = raw_insertCondition(index, condition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelConditionalFormatting::ConditionCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ConditionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelConditionalFormatting::removeCondition ( long index ) {
    HRESULT _hr = raw_removeCondition(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelConditionPtr IExcelConditionalFormatting::getConditionAt ( long index ) {
    struct IExcelCondition * _result = 0;
    HRESULT _hr = raw_getConditionAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelConditionPtr(_result, false);
}

inline _bstr_t IExcelConditionalFormatting::getRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IExcelConditionalFormattingPtr IExcelConditionalFormatting::Clone ( ) {
    struct IExcelConditionalFormatting * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelConditionalFormattingPtr(_result, false);
}

//
// interface IExcelArrayFormula wrapper method implementations
//

inline long IExcelArrayFormula::getFirstRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelArrayFormula::getLastRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelArrayFormula::getFirstColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelArrayFormula::getLastColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelArrayFormula::getRowsNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRowsNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelArrayFormula::getColsNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_getColsNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelArrayFormula::getFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelArrayFormula::setFormula ( _bstr_t Formula ) {
    HRESULT _hr = raw_setFormula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelArrayFormulaPtr IExcelArrayFormula::Clone ( ) {
    struct IExcelArrayFormula * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelArrayFormulaPtr(_result, false);
}

//
// interface IFormula wrapper method implementations
//

inline VARIANT_BOOL IFormula::IsFunction ( _bstr_t token ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFunction(token, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFormula::IsArray ( _bstr_t sValue ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsArray(sValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IFormula::get3DCellElements ( _bstr_t sCellReference ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_get3DCellElements(sCellReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IFormula::get3DCellElementsR1C1style ( _bstr_t sCellReference, long formulaRow, long formulaColumn ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_get3DCellElementsR1C1style(sCellReference, formulaRow, formulaColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IFormula::get3DRangeElements ( _bstr_t sRange ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_get3DRangeElements(sRange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IFormula::get3DRangeElementsR1C1style ( _bstr_t sRange, long formulaRow, long formulaColumn ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_get3DRangeElementsR1C1style(sRange, formulaRow, formulaColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IFormula::get3DColumnRangeElementsR1C1style ( _bstr_t sRange, long formulaRow, long formulaColumn ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_get3DColumnRangeElementsR1C1style(sRange, formulaRow, formulaColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IFormula::get3DRowRangeElementsR1C1style ( _bstr_t sRange, long formulaRow, long formulaColumn ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_get3DRowRangeElementsR1C1style(sRange, formulaRow, formulaColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFormulaResultPtr IFormula::computeFormula ( _bstr_t sFormula, const _variant_t & currentWorksheet_arg, const _variant_t & formulaWorksheet_arg, long formulaRow, long formulaColumn ) {
    struct IFormulaResult * _result = 0;
    HRESULT _hr = raw_computeFormula(sFormula, currentWorksheet_arg, formulaWorksheet_arg, formulaRow, formulaColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormulaResultPtr(_result, false);
}

inline VARIANT_BOOL IFormula::IsName ( _bstr_t sValue ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsName(sValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFormula::Is3DName ( _bstr_t value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Is3DName(value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelNamePtr IFormula::getExcelName ( _bstr_t sName ) {
    struct IExcelName * _result = 0;
    HRESULT _hr = raw_getExcelName(sName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelNamePtr(_result, false);
}

//
// interface IExcelHeader wrapper method implementations
//

inline _bstr_t IExcelHeader::getHeaderString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHeaderString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHeader::setHeaderString ( _bstr_t text ) {
    HRESULT _hr = raw_setHeaderString(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelHeader::getPosition ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHeader::setPosition ( _bstr_t position ) {
    HRESULT _hr = raw_setPosition(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertValue ( _bstr_t value ) {
    HRESULT _hr = raw_InsertValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertFont ( _bstr_t fontType ) {
    HRESULT _hr = raw_InsertFont(fontType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertFontSize ( long fontSize ) {
    HRESULT _hr = raw_InsertFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertSingleUnderline ( ) {
    HRESULT _hr = raw_InsertSingleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveSingleUnderline ( ) {
    HRESULT _hr = raw_RemoveSingleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertDoubleUnderline ( ) {
    HRESULT _hr = raw_InsertDoubleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveDoubleUnderline ( ) {
    HRESULT _hr = raw_RemoveDoubleUnderline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertStrikethrough ( ) {
    HRESULT _hr = raw_InsertStrikethrough();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveStrikethrough ( ) {
    HRESULT _hr = raw_RemoveStrikethrough();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertSuperscript ( ) {
    HRESULT _hr = raw_InsertSuperscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveSuperscript ( ) {
    HRESULT _hr = raw_RemoveSuperscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertSubscript ( ) {
    HRESULT _hr = raw_InsertSubscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveSubscript ( ) {
    HRESULT _hr = raw_RemoveSubscript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertBold ( ) {
    HRESULT _hr = raw_InsertBold();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveBold ( ) {
    HRESULT _hr = raw_RemoveBold();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertItalic ( ) {
    HRESULT _hr = raw_InsertItalic();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::RemoveItalic ( ) {
    HRESULT _hr = raw_RemoveItalic();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertPage ( ) {
    HRESULT _hr = raw_InsertPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertPages ( ) {
    HRESULT _hr = raw_InsertPages();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertDate ( ) {
    HRESULT _hr = raw_InsertDate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertTime ( ) {
    HRESULT _hr = raw_InsertTime();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertFile ( ) {
    HRESULT _hr = raw_InsertFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertTab ( ) {
    HRESULT _hr = raw_InsertTab();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::InsertEnter ( ) {
    HRESULT _hr = raw_InsertEnter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHeader::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelHeaderPtr IExcelHeader::Clone ( ) {
    struct IExcelHeader * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHeaderPtr(_result, false);
}

//
// interface IExcelDataGroup wrapper method implementations
//

inline HRESULT IExcelDataGroup::setFirstRow ( long firstRow ) {
    HRESULT _hr = raw_setFirstRow(firstRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataGroup::getFirstRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataGroup::setLastRow ( long lastRow ) {
    HRESULT _hr = raw_setLastRow(lastRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataGroup::getLastRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataGroup::setFirstColumn ( long firstColumn ) {
    HRESULT _hr = raw_setFirstColumn(firstColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataGroup::getFirstColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataGroup::setLastColumn ( long lastColumn ) {
    HRESULT _hr = raw_setLastColumn(lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataGroup::getLastColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataGroup::setRange ( long firstRow, long firstColumn, long lastRow, long lastColumn ) {
    HRESULT _hr = raw_setRange(firstRow, firstColumn, lastRow, lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataGroup::setRange_2 ( _bstr_t range ) {
    HRESULT _hr = raw_setRange_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataGroup::getGroupType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGroupType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataGroup::setGroupType ( long groupRowsColumns ) {
    HRESULT _hr = raw_setGroupType(groupRowsColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataGroup::isCollapsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isCollapsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataGroup::setCollapsed ( VARIANT_BOOL isCollapsed ) {
    HRESULT _hr = raw_setCollapsed(isCollapsed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelAutoFormatPtr IExcelDataGroup::getAutoFormat ( ) {
    struct IExcelAutoFormat * _result = 0;
    HRESULT _hr = raw_getAutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAutoFormatPtr(_result, false);
}

inline HRESULT IExcelDataGroup::setAutoFormat ( struct IExcelAutoFormat * xlsAutoFormat ) {
    HRESULT _hr = raw_setAutoFormat(xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataGroupPtr IExcelDataGroup::Clone ( ) {
    struct IExcelDataGroup * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataGroupPtr(_result, false);
}

//
// interface IExcelDataValidator wrapper method implementations
//

inline long IExcelDataValidator::getValidationType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getValidationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setValidationType ( long validationType ) {
    HRESULT _hr = raw_setValidationType(validationType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataValidator::getErrorStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getErrorStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setErrorStyle ( long errorStyle ) {
    HRESULT _hr = raw_setErrorStyle(errorStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataValidator::IgnoreBlank ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IgnoreBlank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setIgnoreBlank ( VARIANT_BOOL IgnoreBlank ) {
    HRESULT _hr = raw_setIgnoreBlank(IgnoreBlank);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataValidator::IsShowInputBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShowInputBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setIsShowInputBox ( VARIANT_BOOL showInputBox ) {
    HRESULT _hr = raw_setIsShowInputBox(showInputBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataValidator::IsShowErrorBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShowErrorBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setIsShowErrorBox ( VARIANT_BOOL showErrorBox ) {
    HRESULT _hr = raw_setIsShowErrorBox(showErrorBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataValidator::getOperatorType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getOperatorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setOperatorType ( long operatorType ) {
    HRESULT _hr = raw_setOperatorType(operatorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataValidator::getFirstRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setFirstRow ( long firstRow ) {
    HRESULT _hr = raw_setFirstRow(firstRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataValidator::getLastRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setLastRow ( long lastRow ) {
    HRESULT _hr = raw_setLastRow(lastRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataValidator::getFirstColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setFirstColumn ( long firstColumn ) {
    HRESULT _hr = raw_setFirstColumn(firstColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataValidator::getLastColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataValidator::setLastColumn ( long lastColumn ) {
    HRESULT _hr = raw_setLastColumn(lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataValidator::ApplyToRange ( long firstRow, long firstColumn, long lastRow, long lastColumn ) {
    HRESULT _hr = raw_ApplyToRange(firstRow, firstColumn, lastRow, lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataValidator::ApplyToRange_2 ( _bstr_t range ) {
    HRESULT _hr = raw_ApplyToRange_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataValidator::getFirstFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFirstFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataValidator::setFirstFormula ( _bstr_t Formula ) {
    HRESULT _hr = raw_setFirstFormula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataValidator::getSecondFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSecondFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataValidator::setSecondFormula ( _bstr_t Formula ) {
    HRESULT _hr = raw_setSecondFormula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataValidator::setInputTitle ( _bstr_t inputTitle ) {
    HRESULT _hr = raw_setInputTitle(inputTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataValidator::getInputTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getInputTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataValidator::setErrorTitle ( _bstr_t errorTitle ) {
    HRESULT _hr = raw_setErrorTitle(errorTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataValidator::getErrorTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getErrorTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataValidator::setInputText ( _bstr_t inputText ) {
    HRESULT _hr = raw_setInputText(inputText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataValidator::getInputText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getInputText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataValidator::setErrorText ( _bstr_t textError ) {
    HRESULT _hr = raw_setErrorText(textError);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataValidator::getErrorText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getErrorText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataValidator::setInputMessage ( _bstr_t title, _bstr_t text ) {
    HRESULT _hr = raw_setInputMessage(title, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataValidator::setErrorAlert ( _bstr_t title, _bstr_t text ) {
    HRESULT _hr = raw_setErrorAlert(title, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataValidatorPtr IExcelDataValidator::Clone ( ) {
    struct IExcelDataValidator * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataValidatorPtr(_result, false);
}

//
// interface IExcelPageSetup wrapper method implementations
//

inline HRESULT IExcelPageSetup::easy_setPrintArea ( long startRow, long startColumn, long endRow, long endColumn ) {
    HRESULT _hr = raw_easy_setPrintArea(startRow, startColumn, endRow, endColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setPrintArea_2 ( long startRow, long startColumn, long endRow, long endColumn, VARIANT_BOOL IsR1C1ReferenceStyle ) {
    HRESULT _hr = raw_easy_setPrintArea_2(startRow, startColumn, endRow, endColumn, IsR1C1ReferenceStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setPrintArea_3 ( _bstr_t range ) {
    HRESULT _hr = raw_easy_setPrintArea_3(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPageSetup::easy_getPrintArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getPrintArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPageSetup::easy_removePrintArea ( ) {
    HRESULT _hr = raw_easy_removePrintArea();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setRowsToRepeatAtTop ( long startRow, long endRow ) {
    HRESULT _hr = raw_easy_setRowsToRepeatAtTop(startRow, endRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setRowsToRepeatAtTop_2 ( long startRow, long endRow, VARIANT_BOOL IsR1C1ReferenceStyle ) {
    HRESULT _hr = raw_easy_setRowsToRepeatAtTop_2(startRow, endRow, IsR1C1ReferenceStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setRowsToRepeatAtTop_3 ( _bstr_t rowRange ) {
    HRESULT _hr = raw_easy_setRowsToRepeatAtTop_3(rowRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPageSetup::easy_getRowsToRepeatAtTop ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getRowsToRepeatAtTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IExcelPageSetup::easy_getColumnsToRepeatAtLeft ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getColumnsToRepeatAtLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPageSetup::easy_setColumnsToRepeatAtLeft ( long startColumn, long endColumn ) {
    HRESULT _hr = raw_easy_setColumnsToRepeatAtLeft(startColumn, endColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setColumnsToRepeatAtLeft_2 ( long startColumn, long endColumn, VARIANT_BOOL IsR1C1ReferenceStyle ) {
    HRESULT _hr = raw_easy_setColumnsToRepeatAtLeft_2(startColumn, endColumn, IsR1C1ReferenceStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPageSetup::easy_setColumnsToRepeatAtLeft_3 ( _bstr_t columnRange ) {
    HRESULT _hr = raw_easy_setColumnsToRepeatAtLeft_3(columnRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPageSetup::getOrientation ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPageSetup::setOrientation ( _bstr_t orientation ) {
    HRESULT _hr = raw_setOrientation(orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPaperSize ( long paperSize ) {
    HRESULT _hr = raw_setPaperSize(paperSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getScalingFactor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getScalingFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setScalingFactor ( long scalingFactor ) {
    HRESULT _hr = raw_setScalingFactor(scalingFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getFitToPagesWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFitToPagesWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setFitToPagesWidth ( long value ) {
    HRESULT _hr = raw_setFitToPagesWidth(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getFitToPagesHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFitToPagesHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setFitToPagesHeight ( long value ) {
    HRESULT _hr = raw_setFitToPagesHeight(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getFirstPageNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setFirstPageNumber ( long firstPageNumber ) {
    HRESULT _hr = raw_setFirstPageNumber(firstPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPageSetup::getTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = raw_getTopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setTopMargin ( double topMargin ) {
    HRESULT _hr = raw_setTopMargin(topMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPageSetup::getBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = raw_getBottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setBottomMargin ( double bottomMargin ) {
    HRESULT _hr = raw_setBottomMargin(bottomMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPageSetup::getLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = raw_getLeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setLeftMargin ( double leftMargin ) {
    HRESULT _hr = raw_setLeftMargin(leftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPageSetup::getRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = raw_getRightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setRightMargin ( double rightMargin ) {
    HRESULT _hr = raw_setRightMargin(rightMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPageSetup::getHeaderMargin ( ) {
    double _result = 0;
    HRESULT _hr = raw_getHeaderMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setHeaderMargin ( double headerMargin ) {
    HRESULT _hr = raw_setHeaderMargin(headerMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPageSetup::getFooterMargin ( ) {
    double _result = 0;
    HRESULT _hr = raw_getFooterMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setFooterMargin ( double footerMargin ) {
    HRESULT _hr = raw_setFooterMargin(footerMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPageSetup::CenterHorizontally ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CenterHorizontally(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setCenterHorizontally ( VARIANT_BOOL isCenterHorizontally ) {
    HRESULT _hr = raw_setCenterHorizontally(isCenterHorizontally);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPageSetup::CenterVertically ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CenterVertically(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setCenterVertically ( VARIANT_BOOL isCenterVertically ) {
    HRESULT _hr = raw_setCenterVertically(isCenterVertically);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPageSetup::PrintGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPrintGridlines ( VARIANT_BOOL PrintGridlines ) {
    HRESULT _hr = raw_setPrintGridlines(PrintGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPageSetup::PrintBlackAndWhite ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintBlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPrintBlackAndWhite ( VARIANT_BOOL PrintBlackAndWhite ) {
    HRESULT _hr = raw_setPrintBlackAndWhite(PrintBlackAndWhite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPageSetup::PrintDraftQuality ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintDraftQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPrintDraftQuality ( VARIANT_BOOL PrintDraftQuality ) {
    HRESULT _hr = raw_setPrintDraftQuality(PrintDraftQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPageSetup::PrintRowAndColumnHeadings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintRowAndColumnHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPrintRowAndColumnHeadings ( VARIANT_BOOL PrintRowAndColumnHeadings ) {
    HRESULT _hr = raw_setPrintRowAndColumnHeadings(PrintRowAndColumnHeadings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getPrintComments ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPrintComments ( long position ) {
    HRESULT _hr = raw_setPrintComments(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPageSetup::getPageOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPageOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPageSetup::setPageOrder ( long pageOrder ) {
    HRESULT _hr = raw_setPageOrder(pageOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelFilter wrapper method implementations
//

inline HRESULT IExcelFilter::setAutoFilter ( VARIANT_BOOL isAutoFilter ) {
    HRESULT _hr = raw_setAutoFilter(isAutoFilter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFilter::setAutoFilter_2 ( _bstr_t listRange ) {
    HRESULT _hr = raw_setAutoFilter_2(listRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelFilter::isAutoFilter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isAutoFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelFilter::setAdvancedFilter ( _bstr_t listRange, _bstr_t criteriaRange, _bstr_t copyTo ) {
    HRESULT _hr = raw_setAdvancedFilter(listRange, criteriaRange, copyTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelFilter::setListRange ( _bstr_t listRange ) {
    HRESULT _hr = raw_setListRange(listRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFilter::getListRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getListRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFilter::setCriteriaRange ( _bstr_t criteriaRange ) {
    HRESULT _hr = raw_setCriteriaRange(criteriaRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFilter::getCriteriaRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCriteriaRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFilter::setCopyTo ( _bstr_t copyTo ) {
    HRESULT _hr = raw_setCopyTo(copyTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelFilter::getCopyTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCopyTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelFilter::removeFilter ( ) {
    HRESULT _hr = raw_removeFilter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelHyperlink wrapper method implementations
//

inline HRESULT IExcelHyperlink::setPosition ( long firstRow, long firstColumn, long lastRow, long lastColumn ) {
    HRESULT _hr = raw_setPosition(firstRow, firstColumn, lastRow, lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHyperlink::setPosition_2 ( _bstr_t position ) {
    HRESULT _hr = raw_setPosition_2(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelHyperlink::getFirstRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelHyperlink::setFirstRow ( long value ) {
    HRESULT _hr = raw_setFirstRow(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelHyperlink::getLastRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelHyperlink::setLastRow ( long value ) {
    HRESULT _hr = raw_setLastRow(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelHyperlink::getFirstColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelHyperlink::setFirstColumn ( long value ) {
    HRESULT _hr = raw_setFirstColumn(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelHyperlink::getLastColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLastColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelHyperlink::setLastColumn ( long value ) {
    HRESULT _hr = raw_setLastColumn(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelHyperlink::getDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHyperlink::setDescription ( _bstr_t value ) {
    HRESULT _hr = raw_setDescription(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelHyperlink::getURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHyperlink::setURL ( _bstr_t value ) {
    HRESULT _hr = raw_setURL(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelHyperlink::getTextMark ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTextMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHyperlink::setTextMark ( _bstr_t value ) {
    HRESULT _hr = raw_setTextMark(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelHyperlink::getToolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHyperlink::setToolTip ( _bstr_t value ) {
    HRESULT _hr = raw_setToolTip(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelHyperlink::getHyperlinkType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelHyperlink::setHyperlinkType ( _bstr_t hyperlinkType ) {
    HRESULT _hr = raw_setHyperlinkType(hyperlinkType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelHyperlink::setHyperlink ( _bstr_t hyperlinkType, _bstr_t hyperlink ) {
    HRESULT _hr = raw_setHyperlink(hyperlinkType, hyperlink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelHyperlinkPtr IExcelHyperlink::Clone ( ) {
    struct IExcelHyperlink * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHyperlinkPtr(_result, false);
}

//
// interface IFormat3D wrapper method implementations
//

inline _bstr_t IFormat3D::getTopBevel ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTopBevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFormat3D::setTopBevel ( _bstr_t bevel ) {
    HRESULT _hr = raw_setTopBevel(bevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFormat3D::getTopBevelWidth ( ) {
    float _result = 0;
    HRESULT _hr = raw_getTopBevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFormat3D::setTopBevelWidth ( float width ) {
    HRESULT _hr = raw_setTopBevelWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFormat3D::getTopBevelHeight ( ) {
    float _result = 0;
    HRESULT _hr = raw_getTopBevelHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFormat3D::setTopBevelHeight ( float height ) {
    HRESULT _hr = raw_setTopBevelHeight(height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFormat3D::getBottomBevel ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getBottomBevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFormat3D::setBottomBevel ( _bstr_t bevel ) {
    HRESULT _hr = raw_setBottomBevel(bevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFormat3D::getBottomBevelWidth ( ) {
    float _result = 0;
    HRESULT _hr = raw_getBottomBevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFormat3D::setBottomBevelWidth ( float width ) {
    HRESULT _hr = raw_setBottomBevelWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFormat3D::getBottomBevelHeight ( ) {
    float _result = 0;
    HRESULT _hr = raw_getBottomBevelHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFormat3D::setBottomBevelHeight ( float height ) {
    HRESULT _hr = raw_setBottomBevelHeight(height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFormat3D::getMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFormat3D::setMaterial ( _bstr_t material ) {
    HRESULT _hr = raw_setMaterial(material);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFormat3D::getLighting ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFormat3D::setLighting ( _bstr_t lighting ) {
    HRESULT _hr = raw_setLighting(lighting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFormat3D::getLightAngle ( ) {
    float _result = 0;
    HRESULT _hr = raw_getLightAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFormat3D::setLightAngle ( float angle ) {
    HRESULT _hr = raw_setLightAngle(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IFormat3D::Clone ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

//
// interface IAlignmentFormat wrapper method implementations
//

inline HRESULT IAlignmentFormat::setTextDirectionHorizontal ( _bstr_t verticalAlignment, long angle ) {
    HRESULT _hr = raw_setTextDirectionHorizontal(verticalAlignment, angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAlignmentFormat::setTextDirectionRotate90Degrees ( _bstr_t horizontalAlignment ) {
    HRESULT _hr = raw_setTextDirectionRotate90Degrees(horizontalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAlignmentFormat::setTextDirectionRotate270Degrees ( _bstr_t horizontalAlignment ) {
    HRESULT _hr = raw_setTextDirectionRotate270Degrees(horizontalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAlignmentFormat::setTextDirectionStacked ( _bstr_t horizontalAlignment, VARIANT_BOOL isLeftToRight ) {
    HRESULT _hr = raw_setTextDirectionStacked(horizontalAlignment, isLeftToRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAlignmentFormat::getHorizontalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAlignmentFormat::getVerticalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getVerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IAlignmentFormat::getTextAngle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IAlignmentFormat::isLeftToRight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isLeftToRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAlignmentFormatPtr IAlignmentFormat::Clone ( ) {
    struct IAlignmentFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlignmentFormatPtr(_result, false);
}

//
// interface IFontFormat wrapper method implementations
//

inline _bstr_t IFontFormat::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFontFormat::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsHeadingsFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setHeadingsFont ( ) {
    HRESULT _hr = raw_setHeadingsFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsBodyFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setBodyFont ( ) {
    HRESULT _hr = raw_setBodyFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticFontStyle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticFontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFontFormat::getFontSize ( ) {
    float _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setFontSize ( float fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticFontSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setFontSettings ( _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_setFontSettings(fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFontFormat::setFontSettings_2 ( _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, const _variant_t & foreground ) {
    HRESULT _hr = raw_setFontSettings_2(fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFontFormat::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setForeground ( long foreground ) {
    HRESULT _hr = raw_setForeground(foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IFontFormat::getForegroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getForegroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IFontFormat::setForeground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setForeground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticForeground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setAutomaticForeground ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticForeground(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFontFormat::getUnderlineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IFontFormat::getUnderlineColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IFontFormat::getUnderlineThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getUnderlineThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline VARIANT_BOOL IFontFormat::IsAutomaticUnderlineColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticUnderlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setUnderlineSettings ( _bstr_t UnderlineStyle, VARIANT_BOOL isAutomaticColor ) {
    HRESULT _hr = raw_setUnderlineSettings(UnderlineStyle, isAutomaticColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFontFormat::setUnderlineSettings_2 ( _bstr_t UnderlineStyle, long color ) {
    HRESULT _hr = raw_setUnderlineSettings_2(UnderlineStyle, color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFontFormat::setUnderlineSettings_3 ( _bstr_t UnderlineStyle, const _variant_t & color ) {
    HRESULT _hr = raw_setUnderlineSettings_3(UnderlineStyle, color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::IsDoubleStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDoubleStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setDoubleStrikethrough ( VARIANT_BOOL IsDoubleStrikethrough ) {
    HRESULT _hr = raw_setDoubleStrikethrough(IsDoubleStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFontFormat::setSuperscript_2 ( VARIANT_BOOL IsSuperscript, long offset ) {
    HRESULT _hr = raw_setSuperscript_2(IsSuperscript, offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFontFormat::setSubscript_2 ( VARIANT_BOOL IsSubscript, long offset ) {
    HRESULT _hr = raw_setSubscript_2(IsSubscript, offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFontFormat::getOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticSuperscriptSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticSuperscriptSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::IsSmallCaps ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSmallCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setSmallCaps ( VARIANT_BOOL IsSmallCaps ) {
    HRESULT _hr = raw_setSmallCaps(IsSmallCaps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAllCaps ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAllCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setAllCaps ( VARIANT_BOOL IsAllCaps ) {
    HRESULT _hr = raw_setAllCaps(IsAllCaps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticCaps ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::IsEqualizeCharacterHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEqualizeCharacterHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setEqualizeCharacterHeight ( VARIANT_BOOL IsEqualizeCharacterHeight ) {
    HRESULT _hr = raw_setEqualizeCharacterHeight(IsEqualizeCharacterHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticEqualizeCharacterHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticEqualizeCharacterHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFontFormat::getSpacingType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSpacingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFontFormat::setCharacterSpacing ( _bstr_t type, float spacingBy ) {
    HRESULT _hr = raw_setCharacterSpacing(type, spacingBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFontFormat::getSpacingBy ( ) {
    float _result = 0;
    HRESULT _hr = raw_getSpacingBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticCharacterSpacing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticCharacterSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFontFormat::getKerningForFonts ( ) {
    float _result = 0;
    HRESULT _hr = raw_getKerningForFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFontFormat::setKerningForFonts ( float points ) {
    HRESULT _hr = raw_setKerningForFonts(points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFontFormat::IsAutomaticKerningForFonts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticKerningForFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFontFormatPtr IFontFormat::Clone ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

//
// interface IShadowFormat wrapper method implementations
//

inline long IShadowFormat::getShadowType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IShadowFormat::HasShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setNoShadow ( VARIANT_BOOL HasShadow ) {
    HRESULT _hr = raw_setNoShadow(HasShadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShadowFormat::setOuterShadow ( long transparency, float size, float blur, float angle, float distance, _bstr_t alignment ) {
    HRESULT _hr = raw_setOuterShadow(transparency, size, blur, angle, distance, alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShadowFormat::setInnerShadow ( long transparency, float blur, float angle, float distance ) {
    HRESULT _hr = raw_setInnerShadow(transparency, blur, angle, distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IShadowFormat::setPerspectiveShadow ( long transparency, float size, float blur, float angle, float distance, _bstr_t alignment, VARIANT_BOOL isLower ) {
    HRESULT _hr = raw_setPerspectiveShadow(transparency, size, blur, angle, distance, alignment, isLower);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IShadowFormat::IsLowerPerspective ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLowerPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setShadow ( long presetShadows ) {
    HRESULT _hr = raw_setShadow(presetShadows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IShadowFormat::getColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setColor ( long color ) {
    HRESULT _hr = raw_setColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IShadowFormat::getThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IShadowFormat::setColor_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setColor_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IShadowFormat::getTransparency ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setTransparency ( long transparency ) {
    HRESULT _hr = raw_setTransparency(transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IShadowFormat::getSize ( ) {
    float _result = 0;
    HRESULT _hr = raw_getSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setSize ( float size ) {
    HRESULT _hr = raw_setSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IShadowFormat::getBlur ( ) {
    float _result = 0;
    HRESULT _hr = raw_getBlur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setBlur ( float blur ) {
    HRESULT _hr = raw_setBlur(blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IShadowFormat::getAngle ( ) {
    float _result = 0;
    HRESULT _hr = raw_getAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setAngle ( float angle ) {
    HRESULT _hr = raw_setAngle(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IShadowFormat::getDistance ( ) {
    float _result = 0;
    HRESULT _hr = raw_getDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IShadowFormat::setDistance ( float distance ) {
    HRESULT _hr = raw_setDistance(distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IShadowFormat::getAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IShadowFormatPtr IShadowFormat::Clone ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

//
// interface ILineStyleFormat wrapper method implementations
//

inline float ILineStyleFormat::getWidth ( ) {
    float _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineStyleFormat::setWidth ( float width ) {
    HRESULT _hr = raw_setWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ILineStyleFormat::getCompoundType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCompoundType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ILineStyleFormat::setCompoundType ( _bstr_t compoundType ) {
    HRESULT _hr = raw_setCompoundType(compoundType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ILineStyleFormat::getDashType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDashType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ILineStyleFormat::setDashType ( _bstr_t dashType ) {
    HRESULT _hr = raw_setDashType(dashType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ILineStyleFormat::getCapType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCapType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ILineStyleFormat::setCapType ( _bstr_t capType ) {
    HRESULT _hr = raw_setCapType(capType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ILineStyleFormat::getJoinType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getJoinType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ILineStyleFormat::setJoinType ( _bstr_t joinType ) {
    HRESULT _hr = raw_setJoinType(joinType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ILineStyleFormat::setArrowSettings ( _bstr_t arrowBeginType, long arrowBeginSize, _bstr_t arrowEndType, long arrowEndSize ) {
    HRESULT _hr = raw_setArrowSettings(arrowBeginType, arrowBeginSize, arrowEndType, arrowEndSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ILineStyleFormat::getArrowBeginType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getArrowBeginType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ILineStyleFormat::getArrowBeginSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getArrowBeginSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ILineStyleFormat::getArrowEndType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getArrowEndType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ILineStyleFormat::getArrowEndSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getArrowEndSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ILineStyleFormatPtr ILineStyleFormat::Clone ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

//
// interface ILineColorFormat wrapper method implementations
//

inline VARIANT_BOOL ILineColorFormat::IsNoLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNoLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setNoLine ( VARIANT_BOOL noLine ) {
    HRESULT _hr = raw_setNoLine(noLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ILineColorFormat::IsSolidLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSolidLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setSolidLine ( long color, long transparency ) {
    HRESULT _hr = raw_setSolidLine(color, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ILineColorFormat::setSolidLine_2 ( const _variant_t & color, long transparency ) {
    HRESULT _hr = raw_setSolidLine_2(color, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ILineColorFormat::getTransparency ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ILineColorFormat::getLineColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setLineColor ( long color ) {
    HRESULT _hr = raw_setLineColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr ILineColorFormat::getLineThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getLineThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT ILineColorFormat::setLineColor_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setLineColor_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ILineColorFormat::IsPatternLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPatternLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ILineColorFormat::getLinePattern ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLinePattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setPatternLine ( long linePattern, long color ) {
    HRESULT _hr = raw_setPatternLine(linePattern, color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ILineColorFormat::IsGradientLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGradientLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setGradientLine ( long presetColors ) {
    HRESULT _hr = raw_setGradientLine(presetColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ILineColorFormat::getGradientType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setGradientType ( long type ) {
    HRESULT _hr = raw_setGradientType(type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float ILineColorFormat::getGradientAngle ( ) {
    float _result = 0;
    HRESULT _hr = raw_getGradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setGradientAngle ( float angle ) {
    HRESULT _hr = raw_setGradientAngle(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ILineColorFormat::getGradientDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setGradientDirection ( long direction ) {
    HRESULT _hr = raw_setGradientDirection(direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ILineColorFormat::addGradientStop ( long position, long color, long transparency ) {
    HRESULT _hr = raw_addGradientStop(position, color, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ILineColorFormat::addGradientStop_2 ( long position, const _variant_t & color, long transparency ) {
    HRESULT _hr = raw_addGradientStop_2(position, color, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ILineColorFormat::addGradientStop_3 ( struct IGradientStop * stop ) {
    HRESULT _hr = raw_addGradientStop_3(stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IGradientStopPtr ILineColorFormat::getGradientStopAt ( long stop ) {
    struct IGradientStop * _result = 0;
    HRESULT _hr = raw_getGradientStopAt(stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientStopPtr(_result, false);
}

inline HRESULT ILineColorFormat::removeGradientStopAt ( long stop ) {
    HRESULT _hr = raw_removeGradientStopAt(stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ILineColorFormat::GradientStopCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GradientStopCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ILineColorFormat::isAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isAutomatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ILineColorFormat::setAutomatic ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomatic(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr ILineColorFormat::Clone ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

//
// interface IExcelChartGridlines wrapper method implementations
//

inline ILineColorFormatPtr IExcelChartGridlines::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelChartGridlines::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelChartGridlines::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelChartGridlines::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelChartGridlines::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelChartGridlines::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartGridlines::IsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartGridlines::setVisible ( VARIANT_BOOL IsVisible ) {
    HRESULT _hr = raw_setVisible(IsVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartGridlines::getLineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartGridlines::setLineStyle ( long lineStyle ) {
    HRESULT _hr = raw_setLineStyle(lineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartGridlines::getLineWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartGridlines::setLineWeight ( long lineWeight ) {
    HRESULT _hr = raw_setLineWeight(lineWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartGridlines::getLineColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartGridlines::setLineColor ( long lineColor ) {
    HRESULT _hr = raw_setLineColor(lineColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelChartGridlines::Clone ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

//
// interface IDrawingObject wrapper method implementations
//

inline HRESULT IDrawingObject::setLeftUpperOffset ( long horizontalOffset, long verticalOffset ) {
    HRESULT _hr = raw_setLeftUpperOffset(horizontalOffset, verticalOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDrawingObject::getHorizontalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHorizontalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IDrawingObject::getVerticalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getVerticalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDrawingObject::setSize ( long width, long height ) {
    HRESULT _hr = raw_setSize(width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDrawingObject::getHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IDrawingObject::getWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILineDrawingObject wrapper method implementations
//

inline ILineColorFormatPtr ILineDrawingObject::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT ILineDrawingObject::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr ILineDrawingObject::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT ILineDrawingObject::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr ILineDrawingObject::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT ILineDrawingObject::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDrawingObject2D wrapper method implementations
//

inline HRESULT IDrawingObject2D::setLeftUpperCorner ( long row, long column ) {
    HRESULT _hr = raw_setLeftUpperCorner(row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDrawingObject2D::setLeftUpperCorner_2 ( _bstr_t cellReference ) {
    HRESULT _hr = raw_setLeftUpperCorner_2(cellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDrawingObject2D::getLeftUpperCornerRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IDrawingObject2D::getLeftUpperCornerColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEffectDrawingObject wrapper method implementations
//

inline IFormat3DPtr IEffectDrawingObject::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IEffectDrawingObject::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFontDrawingObject wrapper method implementations
//

inline IFontFormatPtr IFontDrawingObject::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IFontDrawingObject::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelComment wrapper method implementations
//

inline HRESULT IExcelComment::setLeftUpperCorner ( long row, long column ) {
    HRESULT _hr = raw_setLeftUpperCorner(row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelComment::setLeftUpperCorner_2 ( _bstr_t cellReference ) {
    HRESULT _hr = raw_setLeftUpperCorner_2(cellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelComment::getLeftUpperCornerRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelComment::getLeftUpperCornerColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setLeftUpperOffset ( long horizontalOffset, long verticalOffset ) {
    HRESULT _hr = raw_setLeftUpperOffset(horizontalOffset, verticalOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelComment::getHorizontalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHorizontalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelComment::getVerticalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getVerticalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setSize ( long commentWidth, long commentHeight ) {
    HRESULT _hr = raw_setSize(commentWidth, commentHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelComment::getHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelComment::getWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelComment::getText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelComment::setText ( _bstr_t text ) {
    HRESULT _hr = raw_setText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelComment::getHTMLText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHTMLText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelComment::setHTMLText ( _bstr_t text ) {
    HRESULT _hr = raw_setHTMLText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelComment::IsHTMLUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHTMLUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelComment::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelComment::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelComment::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelComment::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setForeground ( long color ) {
    HRESULT _hr = raw_setForeground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelComment::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelComment::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelComment::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelComment::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelComment::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelComment::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelComment::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelCommentPtr IExcelComment::Clone ( ) {
    struct IExcelComment * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCommentPtr(_result, false);
}

//
// interface IExcelCell wrapper method implementations
//

inline IExcelStylePtr IExcelCell::getStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelCell::setStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCell::getFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setFormat ( _bstr_t format ) {
    HRESULT _hr = raw_setFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCell::getHorizontalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setHorizontalAlignment ( _bstr_t horizontalAlignment ) {
    HRESULT _hr = raw_setHorizontalAlignment(horizontalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCell::getVerticalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getVerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setVerticalAlignment ( _bstr_t verticalAlignment ) {
    HRESULT _hr = raw_setVerticalAlignment(verticalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsJustifyDistributed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsJustifyDistributed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setJustifyDistributed ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setJustifyDistributed(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getIndent ( ) {
    long _result = 0;
    HRESULT _hr = raw_getIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setIndent ( long indent ) {
    HRESULT _hr = raw_setIndent(indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getTextRotation ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setTextRotation ( long textRotation ) {
    HRESULT _hr = raw_setTextRotation(textRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::isWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setWrap ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setWrap(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setShrink ( VARIANT_BOOL IsShrink ) {
    HRESULT _hr = raw_setShrink(IsShrink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsMergeCell ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMergeCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelCell::getTextDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setTextDirection ( long textDirection ) {
    HRESULT _hr = raw_setTextDirection(textDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCell::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsHeadingsFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setHeadingsFont ( ) {
    HRESULT _hr = raw_setHeadingsFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsBodyFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setBodyFont ( ) {
    HRESULT _hr = raw_setBodyFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getForegroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getForegroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setForeground ( long color ) {
    HRESULT _hr = raw_setForeground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setForeground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setForeground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setBorderStyles ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderStyles(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getTopStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setTopStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setTopStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getBottomStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setBottomStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setBottomStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getLeftStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setLeftStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setLeftStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getRightStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setRightStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setRightStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setBorderColors ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderColors(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setBorderColors_2 ( const _variant_t & borderTop, const _variant_t & borderBottom, const _variant_t & borderLeft, const _variant_t & borderRight ) {
    HRESULT _hr = raw_setBorderColors_2(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getTopColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getTopThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTopThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setTopColor_Border ( long color ) {
    HRESULT _hr = raw_setTopColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setTopColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setTopColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getBottomColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getBottomThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBottomThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setBottomColor_Border ( long color ) {
    HRESULT _hr = raw_setBottomColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setBottomColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBottomColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getLeftColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getLeftThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getLeftThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setLeftColor_Border ( long color ) {
    HRESULT _hr = raw_setLeftColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setLeftColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setLeftColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getRightColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getRightThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getRightThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setRightColor_Border ( long color ) {
    HRESULT _hr = raw_setRightColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setRightColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setRightColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setDiagonalBorder ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, long borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setDiagonalBorder_2 ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, const _variant_t & borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder_2(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getDiagonalUpStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalUpStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelCell::getDiagonalDownStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalDownStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelCell::getDiagonalColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getDiagonalThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getDiagonalThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline long IExcelCell::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getBackgroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBackgroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setBackground ( long color ) {
    HRESULT _hr = raw_setBackground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setBackground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBackground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getPattern ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setPattern ( long pattern ) {
    HRESULT _hr = raw_setPattern(pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getPatternColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelCell::getPatternThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getPatternThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setPatternColor ( long patternColor ) {
    HRESULT _hr = raw_setPatternColor(patternColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setPatternColor_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setPatternColor_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getGradientColor1 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelCell::getGradientColor2 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setGradientFill ( long color1, long color2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill(color1, color2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IExcelCell::getGradientThemeColor1 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline IThemeColorPtr IExcelCell::getGradientThemeColor2 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelCell::setGradientFill_2 ( const _variant_t & themeColor1, const _variant_t & themeColor2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill_2(themeColor1, themeColor2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelCell::getGradientShadingStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientShadingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCell::IsLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setLocked ( VARIANT_BOOL IsLocked ) {
    HRESULT _hr = raw_setLocked(IsLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsHiddenFormula ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHiddenFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelCell::setHiddenFormula ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHiddenFormula(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCell::getValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setValue ( _bstr_t value ) {
    HRESULT _hr = raw_setValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelCell::getHTMLValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHTMLValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setHTMLValue ( _bstr_t value ) {
    HRESULT _hr = raw_setHTMLValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelCell::IsHTMLUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHTMLUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelCell::IsArrayFormula ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsArrayFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelCell::getFormulaResultValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormulaResultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IExcelCell::containsFormula ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_containsFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IExcelCell::calculateFormula ( const _variant_t & excel, const _variant_t & cellWorksheet, const _variant_t & formulaWorksheet, long nCellRow, long nCellColumn, long nFormulaRow, long nFormulaColumn, VARIANT_BOOL bRecalculate ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_calculateFormula(excel, cellWorksheet, formulaWorksheet, nCellRow, nCellColumn, nFormulaRow, nFormulaColumn, bRecalculate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _bstr_t IExcelCell::getFormattedValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormattedValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IExcelCell::getDataType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelCell::setDataType ( _bstr_t dataType ) {
    HRESULT _hr = raw_setDataType(dataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelCommentPtr IExcelCell::getComment ( ) {
    struct IExcelComment * _result = 0;
    HRESULT _hr = raw_getComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCommentPtr(_result, false);
}

inline HRESULT IExcelCell::setComment ( struct IExcelComment * xlsComment ) {
    HRESULT _hr = raw_setComment(xlsComment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setComment_2 ( _bstr_t text ) {
    HRESULT _hr = raw_setComment_2(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setComment_3 ( _bstr_t text, long width, long height ) {
    HRESULT _hr = raw_setComment_3(text, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelCell::setComment_4 ( _bstr_t text, _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_setComment_4(text, fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelCellPtr IExcelCell::Clone ( ) {
    struct IExcelCell * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCellPtr(_result, false);
}

//
// interface IExcelRow wrapper method implementations
//

inline IExcelCellPtr IExcelRow::easy_getCellAt ( long index ) {
    struct IExcelCell * _result = 0;
    HRESULT _hr = raw_easy_getCellAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCellPtr(_result, false);
}

inline HRESULT IExcelRow::easy_setCellAt ( const _variant_t & Cell, long index ) {
    HRESULT _hr = raw_easy_setCellAt(Cell, index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::easy_removeCellAt ( long index ) {
    HRESULT _hr = raw_easy_removeCellAt(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::easy_removeCellRange ( long startIndex, long count ) {
    HRESULT _hr = raw_easy_removeCellRange(startIndex, count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::easy_insertCellAt ( const _variant_t & Cell, long index ) {
    HRESULT _hr = raw_easy_insertCellAt(Cell, index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::easy_addCell ( struct IExcelCell * Cell ) {
    HRESULT _hr = raw_easy_addCell(Cell);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelCellPtr IExcelRow::easy_getCell ( long index ) {
    struct IExcelCell * _result = 0;
    HRESULT _hr = raw_easy_getCell(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCellPtr(_result, false);
}

inline long IExcelRow::count ( ) {
    long _result = 0;
    HRESULT _hr = raw_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelRow::getHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setHeight ( long height ) {
    HRESULT _hr = raw_setHeight(height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsHiddenRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHiddenRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setHiddenRow ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHiddenRow(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::AutoResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AutoResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setAutoResize ( VARIANT_BOOL isAutoResize ) {
    HRESULT _hr = raw_setAutoResize(isAutoResize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelRow::getDataType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelRow::setDataType ( _bstr_t dataType ) {
    HRESULT _hr = raw_setDataType(dataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelStylePtr IExcelRow::getStyle ( ) {
    struct IExcelStyle * _result = 0;
    HRESULT _hr = raw_getStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelStylePtr(_result, false);
}

inline HRESULT IExcelRow::setStyle ( struct IExcelStyle * xlsStyle ) {
    HRESULT _hr = raw_setStyle(xlsStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelRow::getFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelRow::setFormat ( _bstr_t format ) {
    HRESULT _hr = raw_setFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelRow::getHorizontalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelRow::setHorizontalAlignment ( _bstr_t horizontalAlignment ) {
    HRESULT _hr = raw_setHorizontalAlignment(horizontalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelRow::getVerticalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getVerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelRow::setVerticalAlignment ( _bstr_t verticalAlignment ) {
    HRESULT _hr = raw_setVerticalAlignment(verticalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsJustifyDistributed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsJustifyDistributed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setJustifyDistributed ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setJustifyDistributed(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getIndent ( ) {
    long _result = 0;
    HRESULT _hr = raw_getIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setIndent ( long indent ) {
    HRESULT _hr = raw_setIndent(indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getTextRotation ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setTextRotation ( long textRotation ) {
    HRESULT _hr = raw_setTextRotation(textRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::isWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setWrap ( VARIANT_BOOL isWrap ) {
    HRESULT _hr = raw_setWrap(isWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setShrink ( VARIANT_BOOL IsShrink ) {
    HRESULT _hr = raw_setShrink(IsShrink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getTextDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setTextDirection ( long textDirection ) {
    HRESULT _hr = raw_setTextDirection(textDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelRow::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelRow::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsHeadingsFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setHeadingsFont ( ) {
    HRESULT _hr = raw_setHeadingsFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsBodyFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsBodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setBodyFont ( ) {
    HRESULT _hr = raw_setBodyFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getForegroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getForegroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setForeground ( long color ) {
    HRESULT _hr = raw_setForeground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setForeground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setForeground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setBorderStyles ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderStyles(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getTopStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setTopStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setTopStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getBottomStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setBottomStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setBottomStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getLeftStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setLeftStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setLeftStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getRightStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setRightStyle_Border ( long borderStyle ) {
    HRESULT _hr = raw_setRightStyle_Border(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setBorderColors ( long borderTop, long borderBottom, long borderLeft, long borderRight ) {
    HRESULT _hr = raw_setBorderColors(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setBorderColors_2 ( const _variant_t & borderTop, const _variant_t & borderBottom, const _variant_t & borderLeft, const _variant_t & borderRight ) {
    HRESULT _hr = raw_setBorderColors_2(borderTop, borderBottom, borderLeft, borderRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getTopColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTopColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getTopThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTopThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setTopColor_Border ( long color ) {
    HRESULT _hr = raw_setTopColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setTopColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setTopColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getBottomColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBottomColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getBottomThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBottomThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setBottomColor_Border ( long color ) {
    HRESULT _hr = raw_setBottomColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setBottomColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBottomColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getLeftColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getLeftThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getLeftThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setLeftColor_Border ( long color ) {
    HRESULT _hr = raw_setLeftColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setLeftColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setLeftColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getRightColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRightColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getRightThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getRightThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setRightColor_Border ( long color ) {
    HRESULT _hr = raw_setRightColor_Border(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setRightColor_Border_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setRightColor_Border_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setDiagonalBorder ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, long borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setDiagonalBorder_2 ( VARIANT_BOOL borderDiagonalUp, VARIANT_BOOL borderDiagonalDown, long borderStyle, const _variant_t & borderColor ) {
    HRESULT _hr = raw_setDiagonalBorder_2(borderDiagonalUp, borderDiagonalDown, borderStyle, borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getDiagonalUpStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalUpStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelRow::getDiagonalDownStyle_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalDownStyle_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelRow::getDiagonalColor_Border ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDiagonalColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getDiagonalThemeColor_Border ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getDiagonalThemeColor_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline long IExcelRow::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getBackgroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBackgroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setBackground ( long color ) {
    HRESULT _hr = raw_setBackground(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setBackground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBackground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getPattern ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setPattern ( long pattern ) {
    HRESULT _hr = raw_setPattern(pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getPatternColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelRow::getPatternThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getPatternThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setPatternColor ( long patternColor ) {
    HRESULT _hr = raw_setPatternColor(patternColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelRow::setPatternColor_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setPatternColor_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getGradientColor1 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelRow::getGradientColor2 ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setGradientFill ( long color1, long color2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill(color1, color2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IExcelRow::getGradientThemeColor1 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline IThemeColorPtr IExcelRow::getGradientThemeColor2 ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getGradientThemeColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelRow::setGradientFill_2 ( const _variant_t & themeColor1, const _variant_t & themeColor2, long shadingStyle ) {
    HRESULT _hr = raw_setGradientFill_2(themeColor1, themeColor2, shadingStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelRow::getGradientShadingStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientShadingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelRow::IsLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setLocked ( VARIANT_BOOL IsLocked ) {
    HRESULT _hr = raw_setLocked(IsLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelRow::IsHiddenFormula ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHiddenFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelRow::setHiddenFormula ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHiddenFormula(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelRowPtr IExcelRow::Clone ( ) {
    struct IExcelRow * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelRowPtr(_result, false);
}

//
// interface IExcelTable wrapper method implementations
//

inline long IExcelTable::RowCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::setRowCount ( long count ) {
    HRESULT _hr = raw_setRowCount(count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_addRow ( ) {
    HRESULT _hr = raw_easy_addRow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_addRow_2 ( struct IExcelRow * rowData ) {
    HRESULT _hr = raw_easy_addRow_2(rowData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_insertRow ( long row, const _variant_t & rowData ) {
    HRESULT _hr = raw_easy_insertRow(row, rowData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_removeRow ( long row ) {
    HRESULT _hr = raw_easy_removeRow(row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_removeRowRange ( long startRow, long count ) {
    HRESULT _hr = raw_easy_removeRowRange(startRow, count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelTable::getRowHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::setRowHeight ( long height ) {
    HRESULT _hr = raw_setRowHeight(height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelTable::getRowHeight_2 ( long row ) {
    long _result = 0;
    HRESULT _hr = raw_getRowHeight_2(row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::setRowHeight_2 ( long row, long rowHeight ) {
    HRESULT _hr = raw_setRowHeight_2(row, rowHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelTable::IsRowHeightSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRowHeightSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelRowPtr IExcelTable::easy_getRowAt ( long row ) {
    struct IExcelRow * _result = 0;
    HRESULT _hr = raw_easy_getRowAt(row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelRowPtr(_result, false);
}

inline long IExcelTable::ColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::setColumnCount ( long count ) {
    HRESULT _hr = raw_setColumnCount(count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_addColumn ( ) {
    HRESULT _hr = raw_easy_addColumn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_addColumn_2 ( struct IExcelColumn * columnData ) {
    HRESULT _hr = raw_easy_addColumn_2(columnData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_insertColumn ( long column, const _variant_t & columnData ) {
    HRESULT _hr = raw_easy_insertColumn(column, columnData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_removeColumn ( long column ) {
    HRESULT _hr = raw_easy_removeColumn(column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_removeColumnRange ( long startColumn, long count ) {
    HRESULT _hr = raw_easy_removeColumnRange(startColumn, count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelTable::getColumnWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::setColumnWidth ( long width ) {
    HRESULT _hr = raw_setColumnWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelTable::getColumnWidth_2 ( long column ) {
    long _result = 0;
    HRESULT _hr = raw_getColumnWidth_2(column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::setColumnWidth_2 ( long column, long columnWidth ) {
    HRESULT _hr = raw_setColumnWidth_2(column, columnWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelColumnPtr IExcelTable::easy_getColumnAt ( long column ) {
    struct IExcelColumn * _result = 0;
    HRESULT _hr = raw_easy_getColumnAt(column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelColumnPtr(_result, false);
}

inline IExcelCellPtr IExcelTable::easy_getCellAt ( long row, long column ) {
    struct IExcelCell * _result = 0;
    HRESULT _hr = raw_easy_getCellAt(row, column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCellPtr(_result, false);
}

inline IExcelCellPtr IExcelTable::easy_getCell ( long row, long column ) {
    struct IExcelCell * _result = 0;
    HRESULT _hr = raw_easy_getCell(row, column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCellPtr(_result, false);
}

inline IExcelCellPtr IExcelTable::easy_getCell_2 ( _bstr_t cellReference ) {
    struct IExcelCell * _result = 0;
    HRESULT _hr = raw_easy_getCell_2(cellReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelCellPtr(_result, false);
}

inline HRESULT IExcelTable::easy_setCellAt ( const _variant_t & Cell, long row, long column ) {
    HRESULT _hr = raw_easy_setCellAt(Cell, row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_setRangeStyle ( long startRow, long startColumn, long endRow, long endColumn, const _variant_t & style ) {
    HRESULT _hr = raw_easy_setRangeStyle(startRow, startColumn, endRow, endColumn, style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_setRangeStyle_2 ( _bstr_t range, const _variant_t & style ) {
    HRESULT _hr = raw_easy_setRangeStyle_2(range, style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_setRangeStyle_3 ( _bstr_t startCellReference, _bstr_t endCellReference, const _variant_t & style ) {
    HRESULT _hr = raw_easy_setRangeStyle_3(startCellReference, endCellReference, style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_setRangeAutoFormat ( long startRow, long startColumn, long endRow, long endColumn, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_setRangeAutoFormat(startRow, startColumn, endRow, endColumn, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_setRangeAutoFormat_2 ( _bstr_t range, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_setRangeAutoFormat_2(range, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_setRangeAutoFormat_3 ( _bstr_t startCellReference, _bstr_t endCellReference, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_setRangeAutoFormat_3(startCellReference, endCellReference, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_mergeCells ( long startRow, long startColumn, long endRow, long endColumn ) {
    HRESULT _hr = raw_easy_mergeCells(startRow, startColumn, endRow, endColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_mergeCells_2 ( _bstr_t range ) {
    HRESULT _hr = raw_easy_mergeCells_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_mergeCells_3 ( _bstr_t startCellReference, _bstr_t endCellReference ) {
    HRESULT _hr = raw_easy_mergeCells_3(startCellReference, endCellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelTable::easy_getCellMergingFirstRow ( long nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getCellMergingFirstRow(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelTable::easy_getCellMergingLastRow ( long nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getCellMergingLastRow(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelTable::easy_getCellMergingFirstCol ( long nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getCellMergingFirstCol(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelTable::easy_getCellMergingLastCol ( long nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getCellMergingLastCol(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelTable::MergeCellRangesCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_MergeCellRangesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelTable::easy_removeCellMerging ( long nIndex ) {
    HRESULT _hr = raw_easy_removeCellMerging(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_insertPageBreakAtRow ( long row ) {
    HRESULT _hr = raw_easy_insertPageBreakAtRow(row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_insertPageBreakAtColumn ( long column ) {
    HRESULT _hr = raw_easy_insertPageBreakAtColumn(column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_resetAllPageBreaks ( ) {
    HRESULT _hr = raw_easy_resetAllPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IListPtr IExcelTable::getHorizontalPageBreaks ( ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_getHorizontalPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelTable::getVerticalPageBreaks ( ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_getVerticalPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline HRESULT IExcelTable::easy_freezePanes ( long splitRow, long splitColumn ) {
    HRESULT _hr = raw_easy_freezePanes(splitRow, splitColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_freezePanes_2 ( long splitRow, long splitColumn, long topVisibleRow_BottomPane, long leftVisibleColumn_RightPane ) {
    HRESULT _hr = raw_easy_freezePanes_2(splitRow, splitColumn, topVisibleRow_BottomPane, leftVisibleColumn_RightPane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_unfreezePanes ( ) {
    HRESULT _hr = raw_easy_unfreezePanes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_split ( long splitRow, long splitColumn ) {
    HRESULT _hr = raw_easy_split(splitRow, splitColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_split_2 ( long splitRow, long splitColumn, long topVisibleRow_BottomPane, long leftVisibleColumn_RightPane ) {
    HRESULT _hr = raw_easy_split_2(splitRow, splitColumn, topVisibleRow_BottomPane, leftVisibleColumn_RightPane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTable::easy_removeSplit ( ) {
    HRESULT _hr = raw_easy_removeSplit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelTable::IsSplitSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSplitSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelTable::IsFreezePaneSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFreezePaneSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ICellPtr IExcelTable::findFirst ( _bstr_t value, long lookIn, VARIANT_BOOL matchCase, VARIANT_BOOL matchEntireCellContents ) {
    struct ICell * _result = 0;
    HRESULT _hr = raw_findFirst(value, lookIn, matchCase, matchEntireCellContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICellPtr(_result, false);
}

inline IListPtr IExcelTable::findAll ( _bstr_t value, long lookIn, VARIANT_BOOL matchCase, VARIANT_BOOL matchEntireCellContents ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_findAll(value, lookIn, matchCase, matchEntireCellContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IExcelTablePtr IExcelTable::Clone ( ) {
    struct IExcelTable * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelTablePtr(_result, false);
}

inline HRESULT IExcelTable::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAlignDrawingObject wrapper method implementations
//

inline IAlignmentFormatPtr IAlignDrawingObject::getAlignmentFormat ( ) {
    struct IAlignmentFormat * _result = 0;
    HRESULT _hr = raw_getAlignmentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlignmentFormatPtr(_result, false);
}

inline HRESULT IAlignDrawingObject::setAlignmentFormat ( struct IAlignmentFormat * AlignmentFormat ) {
    HRESULT _hr = raw_setAlignmentFormat(AlignmentFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelImage wrapper method implementations
//

inline HRESULT IExcelImage::setLeftUpperCorner ( long row, long column ) {
    HRESULT _hr = raw_setLeftUpperCorner(row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelImage::setLeftUpperCorner_2 ( _bstr_t cellReference ) {
    HRESULT _hr = raw_setLeftUpperCorner_2(cellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelImage::getLeftUpperCornerRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelImage::getLeftUpperCornerColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelImage::setLeftUpperOffset ( long horizontalOffset, long verticalOffset ) {
    HRESULT _hr = raw_setLeftUpperOffset(horizontalOffset, verticalOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelImage::setSize ( long imageWidth, long imageHeight ) {
    HRESULT _hr = raw_setSize(imageWidth, imageHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelImage::getHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelImage::getWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelImage::getHorizontalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHorizontalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelImage::getVerticalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getVerticalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelImage::getImagePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getImagePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelImage::setImagePath ( _bstr_t path ) {
    HRESULT _hr = raw_setImagePath(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SAFEARRAY * IExcelImage::getImageBytes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_getImageBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelImagePtr IExcelImage::Clone ( ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

//
// interface IExcelSheet wrapper method implementations
//

inline VARIANT_BOOL IExcelSheet::IsSheetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSheetSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSheet::setSheetSelected ( VARIANT_BOOL IsSheetSelected ) {
    HRESULT _hr = raw_setSheetSelected(IsSheetSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSheet::IsSheetProtected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSheetProtected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSheet::setSheetProtected ( VARIANT_BOOL IsSheetProtected ) {
    HRESULT _hr = raw_setSheetProtected(IsSheetProtected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSheet::setProtectionPassword ( _bstr_t sPassword ) {
    HRESULT _hr = raw_setProtectionPassword(sPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSheet::IsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSheet::setHidden ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHidden(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelSheet::getSheetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSheetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelSheet::setSheetName ( _bstr_t sheetName ) {
    HRESULT _hr = raw_setSheetName(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSheet::getZoom ( ) {
    long _result = 0;
    HRESULT _hr = raw_getZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSheet::setZoom ( long zoom ) {
    HRESULT _hr = raw_setZoom(zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSheet::getTabColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTabColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelSheet::getTabThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTabThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelSheet::setTabColor ( long colorTab ) {
    HRESULT _hr = raw_setTabColor(colorTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSheet::setTabColor_2 ( struct IThemeColor * colorTab ) {
    HRESULT _hr = raw_setTabColor_2(colorTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSheet::easy_addImage ( struct IExcelImage * xlsImage ) {
    HRESULT _hr = raw_easy_addImage(xlsImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSheet::easy_addImage_2 ( _bstr_t path ) {
    HRESULT _hr = raw_easy_addImage_2(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSheet::easy_removeImage ( long index ) {
    HRESULT _hr = raw_easy_removeImage(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSheet::easy_removeImage_2 ( _bstr_t path ) {
    HRESULT _hr = raw_easy_removeImage_2(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelImagePtr IExcelSheet::easy_getImageAt ( long index ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_easy_getImageAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline IExcelImagePtr IExcelSheet::easy_getImage ( _bstr_t path ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_easy_getImage(path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline long IExcelSheet::ImageCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ImageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSheet::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelSheetPtr IExcelSheet::Clone ( ) {
    struct IExcelSheet * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSheetPtr(_result, false);
}

//
// interface IUnknownSheet wrapper method implementations
//

inline IExcelSheetPtr IUnknownSheet::Clone ( ) {
    struct IExcelSheet * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSheetPtr(_result, false);
}

//
// interface IFillFormat wrapper method implementations
//

inline VARIANT_BOOL IFillFormat::IsNoFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNoFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setNoFill ( VARIANT_BOOL noFill ) {
    HRESULT _hr = raw_setNoFill(noFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFillFormat::IsSolidFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSolidFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setSolidFill ( long background, long transparency ) {
    HRESULT _hr = raw_setSolidFill(background, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::setSolidFill_2 ( const _variant_t & background, long transparency ) {
    HRESULT _hr = raw_setSolidFill_2(background, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFillFormat::getTransparency ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFillFormat::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setBackground ( long background ) {
    HRESULT _hr = raw_setBackground(background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IThemeColorPtr IFillFormat::getBackgroundThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getBackgroundThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IFillFormat::setBackground_2 ( struct IThemeColor * ThemeColor ) {
    HRESULT _hr = raw_setBackground_2(ThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFillFormat::getPattern ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setPattern ( long pattern ) {
    HRESULT _hr = raw_setPattern(pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFillFormat::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setForeground ( long foreground ) {
    HRESULT _hr = raw_setForeground(foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFillFormat::IsPatternFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPatternFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFillFormat::IsGradientFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGradientFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setGradientFill ( long presetColors ) {
    HRESULT _hr = raw_setGradientFill(presetColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFillFormat::getGradientType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setGradientType ( long type ) {
    HRESULT _hr = raw_setGradientType(type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFillFormat::getGradientAngle ( ) {
    float _result = 0;
    HRESULT _hr = raw_getGradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setGradientAngle ( float angle ) {
    HRESULT _hr = raw_setGradientAngle(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFillFormat::getGradientDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getGradientDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setGradientDirection ( long direction ) {
    HRESULT _hr = raw_setGradientDirection(direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::addGradientStop ( long position, long color, long transparency ) {
    HRESULT _hr = raw_addGradientStop(position, color, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::addGradientStop_2 ( long position, const _variant_t & color, long transparency ) {
    HRESULT _hr = raw_addGradientStop_2(position, color, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::addGradientStop_3 ( struct IGradientStop * stop ) {
    HRESULT _hr = raw_addGradientStop_3(stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IGradientStopPtr IFillFormat::getGradientStopAt ( long stop ) {
    struct IGradientStop * _result = 0;
    HRESULT _hr = raw_getGradientStopAt(stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientStopPtr(_result, false);
}

inline HRESULT IFillFormat::removeGradientStopAt ( long stop ) {
    HRESULT _hr = raw_removeGradientStopAt(stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFillFormat::GradientStopCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GradientStopCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFillFormat::IsRotateWithShape ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRotateWithShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setRotateWithShape ( VARIANT_BOOL IsRotateWithShape ) {
    HRESULT _hr = raw_setRotateWithShape(IsRotateWithShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IFillFormat::IsPictureFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPictureFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setPictureFill ( _bstr_t path, long transparency ) {
    HRESULT _hr = raw_setPictureFill(path, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::setPictureFill_2 ( const _variant_t & xlsImage, long transparency ) {
    HRESULT _hr = raw_setPictureFill_2(xlsImage, transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::setTextureFill ( long presetTexture ) {
    HRESULT _hr = raw_setTextureFill(presetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelImagePtr IFillFormat::getTexturePicture ( ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_getTexturePicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline VARIANT_BOOL IFillFormat::IsTilePictureAsTexture ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTilePictureAsTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setTilingOptions ( float offsetX, float offsetY, float scaleX, float scaleY, _bstr_t alignment, _bstr_t mirrorType ) {
    HRESULT _hr = raw_setTilingOptions(offsetX, offsetY, scaleX, scaleY, alignment, mirrorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFillFormat::setStretchOptions ( float leftOffset, float rightOffset, float topOffset, float bottomOffset ) {
    HRESULT _hr = raw_setStretchOptions(leftOffset, rightOffset, topOffset, bottomOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFillFormat::getTileOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = raw_getTileOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFillFormat::getTileOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = raw_getTileOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFillFormat::getTileScaleX ( ) {
    float _result = 0;
    HRESULT _hr = raw_getTileScaleX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFillFormat::getTileScaleY ( ) {
    float _result = 0;
    HRESULT _hr = raw_getTileScaleY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFillFormat::getTileAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTileAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFillFormat::getTileMirrorType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTileMirrorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline float IFillFormat::getStretchLeftOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_getStretchLeftOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFillFormat::getStretchRightOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_getStretchRightOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFillFormat::getStretchTopOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_getStretchTopOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFillFormat::getStretchBottomOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_getStretchBottomOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFillFormat::isAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isAutomatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFillFormat::setAutomatic ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomatic(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IFillFormat::Clone ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

//
// interface IExcelDataLabels wrapper method implementations
//

inline IAlignmentFormatPtr IExcelDataLabels::getAlignmentFormat ( ) {
    struct IAlignmentFormat * _result = 0;
    HRESULT _hr = raw_getAlignmentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlignmentFormatPtr(_result, false);
}

inline HRESULT IExcelDataLabels::setAlignmentFormat ( struct IAlignmentFormat * AlignmentFormat ) {
    HRESULT _hr = raw_setAlignmentFormat(AlignmentFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFontFormatPtr IExcelDataLabels::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IExcelDataLabels::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IExcelDataLabels::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelDataLabels::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelDataLabels::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelDataLabels::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelDataLabels::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelDataLabels::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelDataLabels::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelDataLabels::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelDataLabels::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelDataLabels::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::ShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowSeriesName ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowSeriesName(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::ShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowCategoryName ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowCategoryName(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::ShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowValue ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowValue(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::ShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowPercentage ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowPercentage(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::ShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowBubbleSize ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowBubbleSize(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::ShowLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowLeaderLines ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowLeaderLines(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataLabels::getLabelPosition ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataLabels::setLabelPosition ( _bstr_t labelPosition ) {
    HRESULT _hr = raw_setLabelPosition(labelPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::getShowLegendKeyNextToLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getShowLegendKeyNextToLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataLabels::setShowLegendKeyNextToLabel ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setShowLegendKeyNextToLabel(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataLabels::getSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataLabels::setSeparator ( _bstr_t separator ) {
    HRESULT _hr = raw_setSeparator(separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataLabels::getNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataLabels::setNumberFormat ( _bstr_t numberFormat ) {
    HRESULT _hr = raw_setNumberFormat(numberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataLabels::setNumberFormatLinked ( VARIANT_BOOL isNumberFormatLinked ) {
    HRESULT _hr = raw_setNumberFormatLinked(isNumberFormatLinked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataLabels::isNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isNumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExcelPlotArea wrapper method implementations
//

inline IFormat3DPtr IExcelPlotArea::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelPlotArea::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelPlotArea::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelPlotArea::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelPlotArea::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelPlotArea::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelPlotArea::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelPlotArea::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelPlotArea::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelPlotArea::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPlotArea::getBorderStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPlotArea::setBorderStyle ( long borderStyle ) {
    HRESULT _hr = raw_setBorderStyle(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPlotArea::getBorderWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPlotArea::setBorderWeight ( long borderWeight ) {
    HRESULT _hr = raw_setBorderWeight(borderWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPlotArea::getBorderColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPlotArea::setBorderColor ( long borderColor ) {
    HRESULT _hr = raw_setBorderColor(borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPlotArea::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPlotArea::setBackground ( long background ) {
    HRESULT _hr = raw_setBackground(background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPlotAreaPtr IExcelPlotArea::Clone ( ) {
    struct IExcelPlotArea * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPlotAreaPtr(_result, false);
}

//
// interface IExcelTitle wrapper method implementations
//

inline IAlignmentFormatPtr IExcelTitle::getAlignmentFormat ( ) {
    struct IAlignmentFormat * _result = 0;
    HRESULT _hr = raw_getAlignmentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlignmentFormatPtr(_result, false);
}

inline HRESULT IExcelTitle::setAlignmentFormat ( struct IAlignmentFormat * AlignmentFormat ) {
    HRESULT _hr = raw_setAlignmentFormat(AlignmentFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFontFormatPtr IExcelTitle::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IExcelTitle::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IExcelTitle::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelTitle::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelTitle::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelTitle::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelTitle::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelTitle::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelTitle::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelTitle::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelTitle::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelTitle::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelTitle::setText ( _bstr_t text ) {
    HRESULT _hr = raw_setText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelTitle::getText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IExcelTitlePtr IExcelTitle::Clone ( ) {
    struct IExcelTitle * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelTitlePtr(_result, false);
}

//
// interface IExcelDataTable wrapper method implementations
//

inline IFontFormatPtr IExcelDataTable::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IExcelDataTable::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IExcelDataTable::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelDataTable::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelDataTable::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelDataTable::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelDataTable::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelDataTable::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelDataTable::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelDataTable::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelDataTable::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelDataTable::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::IsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setVisible ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setVisible(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataTable::getLineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setLineStyle ( long lineStyle ) {
    HRESULT _hr = raw_setLineStyle(lineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataTable::getLineColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setLineColor ( long lineColor ) {
    HRESULT _hr = raw_setLineColor(lineColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataTable::getLineWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setLineWeight ( long lineWeight ) {
    HRESULT _hr = raw_setLineWeight(lineWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::HasLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setLegendKey ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setLegendKey(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::HasHorizontalLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasHorizontalLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setHorizontalLines ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setHorizontalLines(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::HasVerticalLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasVerticalLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setVerticalLines ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setVerticalLines(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::HasOutlineLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasOutlineLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setOutlineLines ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setOutlineLines(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataTable::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelDataTable::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelDataTable::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataTable::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDataTable::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDataTable::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDataTable::setForeground ( long fontColor ) {
    HRESULT _hr = raw_setForeground(fontColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDataTable::setFontSettings ( _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_setFontSettings(fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataTablePtr IExcelDataTable::Clone ( ) {
    struct IExcelDataTable * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataTablePtr(_result, false);
}

//
// interface IExcelChartLegend wrapper method implementations
//

inline IFontFormatPtr IExcelChartLegend::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IExcelChartLegend::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IExcelChartLegend::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelChartLegend::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelChartLegend::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelChartLegend::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelChartLegend::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelChartLegend::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelChartLegend::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelChartLegend::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelChartLegend::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelChartLegend::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::IsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setVisible ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setVisible(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getBorderStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setBorderStyle ( long borderStyle ) {
    HRESULT _hr = raw_setBorderStyle(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getBorderWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setBorderWeight ( long borderWeight ) {
    HRESULT _hr = raw_setBorderWeight(borderWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getBorderColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setBorderColor ( long borderColor ) {
    HRESULT _hr = raw_setBorderColor(borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::IsShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setShadow ( VARIANT_BOOL IsShadow ) {
    HRESULT _hr = raw_setShadow(IsShadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setForeground ( long foreground ) {
    HRESULT _hr = raw_setForeground(foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setBackground ( long background ) {
    HRESULT _hr = raw_setBackground(background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelChartLegend::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelChartLegend::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartLegend::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartLegend::setFontSettings ( _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_setFontSettings(fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getPlacement ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPlacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setPlacement ( long location ) {
    HRESULT _hr = raw_setPlacement(location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartLegend::getKeysArrangementDirection ( ) {
    long _result = 0;
    HRESULT _hr = raw_getKeysArrangementDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartLegend::setKeysArrangementDirection ( long direction ) {
    HRESULT _hr = raw_setKeysArrangementDirection(direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartLegendPtr IExcelChartLegend::Clone ( ) {
    struct IExcelChartLegend * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartLegendPtr(_result, false);
}

//
// interface IExcelSeries wrapper method implementations
//

inline IFormat3DPtr IExcelSeries::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelSeries::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelSeries::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelSeries::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelSeries::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelSeries::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelSeries::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelSeries::setName ( _bstr_t seriesName ) {
    HRESULT _hr = raw_setName(seriesName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelSeries::getValues ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelSeries::setValues ( _bstr_t seriesValues ) {
    HRESULT _hr = raw_setValues(seriesValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSeries::getLineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setLineStyle ( long lineStyle ) {
    HRESULT _hr = raw_setLineStyle(lineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSeries::getLineWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setLineWeight ( long lineWeight ) {
    HRESULT _hr = raw_setLineWeight(lineWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSeries::getLineColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setLineColor ( long lineColor ) {
    HRESULT _hr = raw_setLineColor(lineColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSeries::IsShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setShadow ( VARIANT_BOOL IsShadow ) {
    HRESULT _hr = raw_setShadow(IsShadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSeries::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setBackground ( long background ) {
    HRESULT _hr = raw_setBackground(background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataLabelsPtr IExcelSeries::getDataLabels ( ) {
    struct IExcelDataLabels * _result = 0;
    HRESULT _hr = raw_getDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataLabelsPtr(_result, false);
}

inline HRESULT IExcelSeries::setDataLabels ( long dataLabels ) {
    HRESULT _hr = raw_setDataLabels(dataLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelSeries::setDataLabels_2 ( struct IExcelDataLabels * xlsDataLabels ) {
    HRESULT _hr = raw_setDataLabels_2(xlsDataLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSeries::ShowDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setShowDataLabels ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowDataLabels(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSeries::getShowLegendKeyNextToLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getShowLegendKeyNextToLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setShowLegendKeyNextToLabel ( VARIANT_BOOL value ) {
    HRESULT _hr = raw_setShowLegendKeyNextToLabel(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSeries::getMarkerType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getMarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setMarkerType ( long markerType ) {
    HRESULT _hr = raw_setMarkerType(markerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelSeries::getMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getMarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setMarkerSize ( long markerSize ) {
    HRESULT _hr = raw_setMarkerSize(markerSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelSeries::getMarkerFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getMarkerFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setMarkerFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setMarkerFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelSeries::getMarkerLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getMarkerLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setMarkerLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setMarkerLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelSeries::getMarkerLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getMarkerLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelSeries::setMarkerLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setMarkerLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSeries::IsInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsInvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setInvertIfNegative ( VARIANT_BOOL invertIfNegative ) {
    HRESULT _hr = raw_setInvertIfNegative(invertIfNegative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IExcelSeries::getStackScale ( ) {
    float _result = 0;
    HRESULT _hr = raw_getStackScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setStackScale ( float scale ) {
    HRESULT _hr = raw_setStackScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelSeries::IsSmoothedLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSmoothedLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelSeries::setSmoothedLine ( VARIANT_BOOL IsSmoothedLine ) {
    HRESULT _hr = raw_setSmoothedLine(IsSmoothedLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelSeriesPtr IExcelSeries::Clone ( ) {
    struct IExcelSeries * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSeriesPtr(_result, false);
}

//
// interface IExcelChartArea wrapper method implementations
//

inline IFontFormatPtr IExcelChartArea::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IExcelChartArea::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IExcelChartArea::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelChartArea::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelChartArea::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelChartArea::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelChartArea::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelChartArea::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelChartArea::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelChartArea::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelChartArea::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelChartArea::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getBorderStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setBorderStyle ( long borderStyle ) {
    HRESULT _hr = raw_setBorderStyle(borderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getBorderWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setBorderWeight ( long borderWeight ) {
    HRESULT _hr = raw_setBorderWeight(borderWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getBorderColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setBorderColor ( long borderColor ) {
    HRESULT _hr = raw_setBorderColor(borderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::IsShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setShadow ( VARIANT_BOOL IsShadow ) {
    HRESULT _hr = raw_setShadow(IsShadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setForeground ( long foreground ) {
    HRESULT _hr = raw_setForeground(foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getBackground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setBackground ( long background ) {
    HRESULT _hr = raw_setBackground(background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartArea::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelChartArea::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelChartArea::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartArea::setFontSettings ( _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_setFontSettings(fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartArea::HasRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasRoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartArea::setRoundedCorners ( VARIANT_BOOL roundedCorners ) {
    HRESULT _hr = raw_setRoundedCorners(roundedCorners);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartAreaPtr IExcelChartArea::Clone ( ) {
    struct IExcelChartArea * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartAreaPtr(_result, false);
}

//
// interface IExcelAxis wrapper method implementations
//

inline IAlignmentFormatPtr IExcelAxis::getAlignmentFormat ( ) {
    struct IAlignmentFormat * _result = 0;
    HRESULT _hr = raw_getAlignmentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAlignmentFormatPtr(_result, false);
}

inline HRESULT IExcelAxis::setAlignmentFormat ( struct IAlignmentFormat * AlignmentFormat ) {
    HRESULT _hr = raw_setAlignmentFormat(AlignmentFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFontFormatPtr IExcelAxis::getFontFormat ( ) {
    struct IFontFormat * _result = 0;
    HRESULT _hr = raw_getFontFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontFormatPtr(_result, false);
}

inline HRESULT IExcelAxis::setFontFormat ( struct IFontFormat * FontFormat ) {
    HRESULT _hr = raw_setFontFormat(FontFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFormat3DPtr IExcelAxis::get3DFormat ( ) {
    struct IFormat3D * _result = 0;
    HRESULT _hr = raw_get3DFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormat3DPtr(_result, false);
}

inline HRESULT IExcelAxis::set3DFormat ( struct IFormat3D * Format3D ) {
    HRESULT _hr = raw_set3DFormat(Format3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFillFormatPtr IExcelAxis::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelAxis::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelAxis::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelAxis::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelAxis::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelAxis::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelAxis::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelAxis::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelAxis::setLabel ( _bstr_t label ) {
    HRESULT _hr = raw_setLabel(label);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelAxis::getLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelAxis::setAxisTitle ( struct IExcelTitle * xlsTitle ) {
    HRESULT _hr = raw_setAxisTitle(xlsTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelTitlePtr IExcelAxis::getAxisTitle ( ) {
    struct IExcelTitle * _result = 0;
    HRESULT _hr = raw_getAxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelTitlePtr(_result, false);
}

inline HRESULT IExcelAxis::setVisible ( VARIANT_BOOL IsVisible ) {
    HRESULT _hr = raw_setVisible(IsVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelAxis::getLineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setLineStyle ( long lineStyle ) {
    HRESULT _hr = raw_setLineStyle(lineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getLineWeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setLineWeight ( long axisWeight ) {
    HRESULT _hr = raw_setLineWeight(axisWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getLineColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setLineColor ( long lineColor ) {
    HRESULT _hr = raw_setLineColor(lineColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getMajorTickMarkType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getMajorTickMarkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMajorTickMarkType ( long majorTickMarkType ) {
    HRESULT _hr = raw_setMajorTickMarkType(majorTickMarkType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getMinorTickMarkType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getMinorTickMarkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMinorTickMarkType ( long minorTickMarkType ) {
    HRESULT _hr = raw_setMinorTickMarkType(minorTickMarkType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getTickMarkLabel ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTickMarkLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setTickMarkLabel ( long tickMarkLabel ) {
    HRESULT _hr = raw_setTickMarkLabel(tickMarkLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getForeground ( ) {
    long _result = 0;
    HRESULT _hr = raw_getForeground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setForeground ( long foreground ) {
    HRESULT _hr = raw_setForeground(foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStrikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setStrikethrough ( VARIANT_BOOL IsStrikethrough ) {
    HRESULT _hr = raw_setStrikethrough(IsStrikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsSuperscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuperscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setSuperscript ( VARIANT_BOOL IsSuperscript ) {
    HRESULT _hr = raw_setSuperscript(IsSuperscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsSubscript ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSubscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setSubscript ( VARIANT_BOOL IsSubscript ) {
    HRESULT _hr = raw_setSubscript(IsSubscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getUnderlineStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getUnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setUnderlineStyle ( long UnderlineStyle ) {
    HRESULT _hr = raw_setUnderlineStyle(UnderlineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getFontSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setFontSize ( long fontSize ) {
    HRESULT _hr = raw_setFontSize(fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelAxis::getFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelAxis::setFont ( _bstr_t fontName ) {
    HRESULT _hr = raw_setFont(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::isBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setBold ( VARIANT_BOOL isBold ) {
    HRESULT _hr = raw_setBold(isBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::isItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setItalic ( VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_setItalic(isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelAxis::setFontSettings ( _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_setFontSettings(fontName, fontSize, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelAxis::getNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelAxis::setNumberFormat ( _bstr_t numberFormat ) {
    HRESULT _hr = raw_setNumberFormat(numberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::isNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isNumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setNumberFormatLinked ( VARIANT_BOOL isNumberFormatLinked ) {
    HRESULT _hr = raw_setNumberFormatLinked(isNumberFormatLinked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getRotationDegrees ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRotationDegrees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setRotationDegrees ( long rotationDegrees ) {
    HRESULT _hr = raw_setRotationDegrees(rotationDegrees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelAxis::getMinimumValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_getMinimumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMinimumValue ( double minimumValue ) {
    HRESULT _hr = raw_setMinimumValue(minimumValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsAutomaticMinimumValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticMinimumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setAutomaticMinimumValue ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticMinimumValue(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelAxis::getMaximumValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_getMaximumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMaximumValue ( double maximumValue ) {
    HRESULT _hr = raw_setMaximumValue(maximumValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsAutomaticMaximumValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticMaximumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setAutomaticMaximumValue ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticMaximumValue(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelAxis::getMajorUnit ( ) {
    double _result = 0;
    HRESULT _hr = raw_getMajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMajorUnit ( double majorUnit ) {
    HRESULT _hr = raw_setMajorUnit(majorUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsAutomaticMajorUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticMajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setAutomaticMajorUnit ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticMajorUnit(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelAxis::getMinorUnit ( ) {
    double _result = 0;
    HRESULT _hr = raw_getMinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMinorUnit ( double minorUnit ) {
    HRESULT _hr = raw_setMinorUnit(minorUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsAutomaticMinorUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticMinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setAutomaticMinorUnit ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticMinorUnit(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelAxis::getCrossValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_getCrossValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setCrossValue ( double crossValue ) {
    HRESULT _hr = raw_setCrossValue(crossValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsAutomaticCategoryAxisCrossesValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutomaticCategoryAxisCrossesValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setAutomaticCategoryAxisCrossesValue ( VARIANT_BOOL isAutomatic ) {
    HRESULT _hr = raw_setAutomaticCategoryAxisCrossesValue(isAutomatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsLogarithmicScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLogarithmicScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setLogarithmicScale ( VARIANT_BOOL IsLogarithmicScale ) {
    HRESULT _hr = raw_setLogarithmicScale(IsLogarithmicScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsReverseOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsReverseOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setReverseOrder ( VARIANT_BOOL IsReverseOrder ) {
    HRESULT _hr = raw_setReverseOrder(IsReverseOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsMaximumCross ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMaximumCross(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setMaximumCross ( VARIANT_BOOL IsMaximumCross ) {
    HRESULT _hr = raw_setMaximumCross(IsMaximumCross);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getLabelFrequency ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLabelFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setLabelFrequency ( long labelFrequency ) {
    HRESULT _hr = raw_setLabelFrequency(labelFrequency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelAxis::getTickMarksFrequency ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTickMarksFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setTickMarksFrequency ( long tickMarksFrequency ) {
    HRESULT _hr = raw_setTickMarksFrequency(tickMarksFrequency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelAxis::IsCrossedBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCrossedBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelAxis::setCrossedBetweenCategories ( VARIANT_BOOL between ) {
    HRESULT _hr = raw_setCrossedBetweenCategories(between);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelAxisPtr IExcelAxis::Clone ( ) {
    struct IExcelAxis * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAxisPtr(_result, false);
}

//
// interface IExcelChart wrapper method implementations
//

inline HRESULT IExcelChart::setLeftUpperCorner ( long row, long column ) {
    HRESULT _hr = raw_setLeftUpperCorner(row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::setLeftUpperCorner_2 ( _bstr_t cellReference ) {
    HRESULT _hr = raw_setLeftUpperCorner_2(cellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getLeftUpperCornerRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelChart::getLeftUpperCornerColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFillFormatPtr IExcelChart::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelChart::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelChart::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelChart::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelChart::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelChart::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelChart::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelChart::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::setLeftUpperOffset ( long horizontalOffset, long verticalOffset ) {
    HRESULT _hr = raw_setLeftUpperOffset(horizontalOffset, verticalOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getHorizontalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHorizontalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelChart::getVerticalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getVerticalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setSize ( long chartWidth, long chartHeight ) {
    HRESULT _hr = raw_setSize(chartWidth, chartHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelChart::getWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_setChartType ( long chartType ) {
    HRESULT _hr = raw_easy_setChartType(chartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_getChartType ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_addSeries ( struct IExcelSeries * xlsChartSeries ) {
    HRESULT _hr = raw_easy_addSeries(xlsChartSeries);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::easy_addSeries_2 ( _bstr_t seriesName, _bstr_t seriesValues ) {
    HRESULT _hr = raw_easy_addSeries_2(seriesName, seriesValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::easy_removeSeries ( long index ) {
    HRESULT _hr = raw_easy_removeSeries(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelSeriesPtr IExcelChart::easy_getSeriesAt ( long index ) {
    struct IExcelSeries * _result = 0;
    HRESULT _hr = raw_easy_getSeriesAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSeriesPtr(_result, false);
}

inline long IExcelChart::SeriesCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_SeriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_setCategoryXAxisLabels ( _bstr_t formulaCategoryXAxisLabels ) {
    HRESULT _hr = raw_easy_setCategoryXAxisLabels(formulaCategoryXAxisLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelChart::easy_getCategoryXAxisLabels ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getCategoryXAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelChart::easy_setTitle ( _bstr_t title ) {
    HRESULT _hr = raw_easy_setTitle(title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelChart::easy_getTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IExcelTitlePtr IExcelChart::getChartTitle ( ) {
    struct IExcelTitle * _result = 0;
    HRESULT _hr = raw_getChartTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelTitlePtr(_result, false);
}

inline HRESULT IExcelChart::setChartTitle ( struct IExcelTitle * xlsTitle ) {
    HRESULT _hr = raw_setChartTitle(xlsTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartAreaPtr IExcelChart::easy_getChartArea ( ) {
    struct IExcelChartArea * _result = 0;
    HRESULT _hr = raw_easy_getChartArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartAreaPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setChartArea ( struct IExcelChartArea * xlsChartArea ) {
    HRESULT _hr = raw_easy_setChartArea(xlsChartArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPlotAreaPtr IExcelChart::easy_getPlotArea ( ) {
    struct IExcelPlotArea * _result = 0;
    HRESULT _hr = raw_easy_getPlotArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPlotAreaPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setPlotArea ( struct IExcelPlotArea * xlsPlotArea ) {
    HRESULT _hr = raw_easy_setPlotArea(xlsPlotArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartLegendPtr IExcelChart::easy_getLegend ( ) {
    struct IExcelChartLegend * _result = 0;
    HRESULT _hr = raw_easy_getLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartLegendPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setLegend ( struct IExcelChartLegend * xlsLegend ) {
    HRESULT _hr = raw_easy_setLegend(xlsLegend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelAxisPtr IExcelChart::easy_getCategoryXAxis ( ) {
    struct IExcelAxis * _result = 0;
    HRESULT _hr = raw_easy_getCategoryXAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAxisPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setCategoryXAxis ( struct IExcelAxis * xlsCategoryXAxis ) {
    HRESULT _hr = raw_easy_setCategoryXAxis(xlsCategoryXAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::easy_setValueYAxis ( struct IExcelAxis * xlsValueYAxis ) {
    HRESULT _hr = raw_easy_setValueYAxis(xlsValueYAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelAxisPtr IExcelChart::easy_getValueYAxis ( ) {
    struct IExcelAxis * _result = 0;
    HRESULT _hr = raw_easy_getValueYAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAxisPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setXAxisMajorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setXAxisMajorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelChart::easy_getXAxisMajorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getXAxisMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setYAxisMajorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setYAxisMajorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelChart::easy_getYAxisMajorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getYAxisMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setXAxisMinorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setXAxisMinorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelChart::easy_getXAxisMinorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getXAxisMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setYAxisMinorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setYAxisMinorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelChart::easy_getYAxisMinorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getYAxisMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelChart::easy_setChartDataTable ( struct IExcelDataTable * xlsChartDataTable ) {
    HRESULT _hr = raw_easy_setChartDataTable(xlsChartDataTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataTablePtr IExcelChart::easy_getChartDataTable ( ) {
    struct IExcelDataTable * _result = 0;
    HRESULT _hr = raw_easy_getChartDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataTablePtr(_result, false);
}

inline HRESULT IExcelChart::easy_setSeriesOverlap ( long overlap ) {
    HRESULT _hr = raw_easy_setSeriesOverlap(overlap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_getSeriesOverlap ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getSeriesOverlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_setSeriesGap ( long gap ) {
    HRESULT _hr = raw_easy_setSeriesGap(gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_getSeriesGap ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getSeriesGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_set3DRotation ( long n3DRotation ) {
    HRESULT _hr = raw_easy_set3DRotation(n3DRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_get3DRotation ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_set3DElevation ( long n3DElevation ) {
    HRESULT _hr = raw_easy_set3DElevation(n3DElevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_get3DElevation ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DElevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_set3DHeight ( long n3DHeight ) {
    HRESULT _hr = raw_easy_set3DHeight(n3DHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_get3DHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_set3DPerspective ( long n3DPerspective ) {
    HRESULT _hr = raw_easy_set3DPerspective(n3DPerspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::easy_get3DPerspective ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::easy_setUse3DPerspective ( VARIANT_BOOL use3DPerspective ) {
    HRESULT _hr = raw_easy_setUse3DPerspective(use3DPerspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChart::easy_Use3DPerspective ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_Use3DPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setFirstSliceAngle ( long angle ) {
    HRESULT _hr = raw_setFirstSliceAngle(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getFirstSliceAngle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setVariableColorsBySlice ( VARIANT_BOOL isVariableColor ) {
    HRESULT _hr = raw_setVariableColorsBySlice(isVariableColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChart::HasVariableColorsBySlice ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasVariableColorsBySlice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setPieExplosion ( long distance ) {
    HRESULT _hr = raw_setPieExplosion(distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getPieExplosion ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPieExplosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::splitSeriesByPosition ( long values ) {
    HRESULT _hr = raw_splitSeriesByPosition(values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::splitSeriesByValue ( double value ) {
    HRESULT _hr = raw_splitSeriesByValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::splitSeriesByPercentageValue ( long value ) {
    HRESULT _hr = raw_splitSeriesByPercentageValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelChart::getSplitPosition ( ) {
    double _result = 0;
    HRESULT _hr = raw_getSplitPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelChart::getSplitType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelChart::getSecondPlotSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setSecondPlotSize ( long size ) {
    HRESULT _hr = raw_setSecondPlotSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getDoughnutHoleSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setDoughnutHoleSize ( long size ) {
    HRESULT _hr = raw_setDoughnutHoleSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getBubbleScale ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setBubbleScale ( long percent ) {
    HRESULT _hr = raw_setBubbleScale(percent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChart::getBubbleSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setBubbleSize ( long bubbleSize ) {
    HRESULT _hr = raw_setBubbleSize(bubbleSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChart::setShowNegativeBubbles ( VARIANT_BOOL visible ) {
    HRESULT _hr = raw_setShowNegativeBubbles(visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChart::ShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelChart::getStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChart::setStyle ( long style ) {
    HRESULT _hr = raw_setStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartPtr IExcelChart::Clone ( ) {
    struct IExcelChart * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartPtr(_result, false);
}

inline HRESULT IExcelChart::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelChartSheet wrapper method implementations
//

inline VARIANT_BOOL IExcelChartSheet::IsSheetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSheetSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::setSheetSelected ( VARIANT_BOOL IsSheetSelected ) {
    HRESULT _hr = raw_setSheetSelected(IsSheetSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartSheet::IsSheetProtected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSheetProtected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::setSheetProtected ( VARIANT_BOOL IsSheetProtected ) {
    HRESULT _hr = raw_setSheetProtected(IsSheetProtected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::setProtectionPassword ( _bstr_t sPassword ) {
    HRESULT _hr = raw_setProtectionPassword(sPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartSheet::ProtectObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ProtectObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::setProtectObjects ( VARIANT_BOOL protect ) {
    HRESULT _hr = raw_setProtectObjects(protect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartSheet::ProtectContents ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ProtectContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::setProtectContents ( VARIANT_BOOL protect ) {
    HRESULT _hr = raw_setProtectContents(protect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelChartSheet::IsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::setHidden ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHidden(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelChartSheet::getSheetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSheetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelChartSheet::setSheetName ( _bstr_t sheetName ) {
    HRESULT _hr = raw_setSheetName(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartSheet::getZoom ( ) {
    long _result = 0;
    HRESULT _hr = raw_getZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::setZoom ( long zoom ) {
    HRESULT _hr = raw_setZoom(zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelChartSheet::getTabColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTabColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelChartSheet::getTabThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTabThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelChartSheet::setTabColor ( long colorTab ) {
    HRESULT _hr = raw_setTabColor(colorTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::setTabColor_2 ( struct IThemeColor * colorTab ) {
    HRESULT _hr = raw_setTabColor_2(colorTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::easy_addImage ( struct IExcelImage * xlsImage ) {
    HRESULT _hr = raw_easy_addImage(xlsImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::easy_addImage_2 ( _bstr_t path ) {
    HRESULT _hr = raw_easy_addImage_2(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::easy_addImage_3 ( _bstr_t path, long horizontalOffset, long verticalOffset ) {
    HRESULT _hr = raw_easy_addImage_3(path, horizontalOffset, verticalOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::easy_addImage_4 ( _bstr_t path, long horizontalOffset, long verticalOffset, long width, long height ) {
    HRESULT _hr = raw_easy_addImage_4(path, horizontalOffset, verticalOffset, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::easy_removeImage ( long index ) {
    HRESULT _hr = raw_easy_removeImage(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelChartSheet::easy_removeImage_2 ( _bstr_t path ) {
    HRESULT _hr = raw_easy_removeImage_2(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelImagePtr IExcelChartSheet::easy_getImageAt ( long index ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_easy_getImageAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline IExcelImagePtr IExcelChartSheet::easy_getImage ( _bstr_t path ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_easy_getImage(path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline long IExcelChartSheet::ImageCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ImageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelChartSheet::easy_setExcelChart ( struct IExcelChart * xlsChart ) {
    HRESULT _hr = raw_easy_setExcelChart(xlsChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartPtr IExcelChartSheet::easy_getExcelChart ( ) {
    struct IExcelChart * _result = 0;
    HRESULT _hr = raw_easy_getExcelChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartPtr(_result, false);
}

inline IExcelSheetPtr IExcelChartSheet::Clone ( ) {
    struct IExcelSheet * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSheetPtr(_result, false);
}

inline HRESULT IExcelChartSheet::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFillDrawingObject wrapper method implementations
//

inline IFillFormatPtr IFillDrawingObject::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IFillDrawingObject::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExcelPivotTable wrapper method implementations
//

inline _bstr_t IExcelPivotTable::getName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setName ( _bstr_t name ) {
    HRESULT _hr = raw_setName(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotTable::setLocation ( long firstRow, long firstColumn, long lastRow, long lastColumn ) {
    HRESULT _hr = raw_setLocation(firstRow, firstColumn, lastRow, lastColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotTable::setLocation_2 ( _bstr_t range ) {
    HRESULT _hr = raw_setLocation_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setSourceRange ( _bstr_t formulaRange, const _variant_t & xls ) {
    HRESULT _hr = raw_setSourceRange(formulaRange, xls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getSourceRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSourceRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IExcelFieldPtr IExcelPivotTable::getFieldAt ( long index ) {
    struct IExcelField * _result = 0;
    HRESULT _hr = raw_getFieldAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFieldPtr(_result, false);
}

inline IExcelFieldPtr IExcelPivotTable::getField ( _bstr_t name ) {
    struct IExcelField * _result = 0;
    HRESULT _hr = raw_getField(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFieldPtr(_result, false);
}

inline long IExcelPivotTable::FieldCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_FieldCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::addFieldToRowLabels ( _bstr_t fieldName ) {
    HRESULT _hr = raw_addFieldToRowLabels(fieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::RowLabelsCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_RowLabelsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::removeFieldFromRowLabels ( _bstr_t fieldName ) {
    HRESULT _hr = raw_removeFieldFromRowLabels(fieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFieldPtr IExcelPivotTable::getRowLabelsFieldAt ( long index ) {
    struct IExcelField * _result = 0;
    HRESULT _hr = raw_getRowLabelsFieldAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFieldPtr(_result, false);
}

inline HRESULT IExcelPivotTable::addFieldToColumnLabels ( _bstr_t fieldName ) {
    HRESULT _hr = raw_addFieldToColumnLabels(fieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::ColumnLabelsCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ColumnLabelsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::removeFieldFromColumnLabels ( _bstr_t fieldName ) {
    HRESULT _hr = raw_removeFieldFromColumnLabels(fieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFieldPtr IExcelPivotTable::getColumnLabelsFieldAt ( long index ) {
    struct IExcelField * _result = 0;
    HRESULT _hr = raw_getColumnLabelsFieldAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFieldPtr(_result, false);
}

inline HRESULT IExcelPivotTable::addFieldToReportFilter ( _bstr_t fieldName ) {
    HRESULT _hr = raw_addFieldToReportFilter(fieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::ReportFilterCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ReportFilterCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::removeFieldFromReportFilter ( _bstr_t fieldName ) {
    HRESULT _hr = raw_removeFieldFromReportFilter(fieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFieldPtr IExcelPivotTable::getReportFilterFieldAt ( long index ) {
    struct IExcelField * _result = 0;
    HRESULT _hr = raw_getReportFilterFieldAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFieldPtr(_result, false);
}

inline HRESULT IExcelPivotTable::addFieldToValues ( _bstr_t fieldName, _bstr_t customName, long nSubtotal ) {
    HRESULT _hr = raw_addFieldToValues(fieldName, customName, nSubtotal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::ValuesCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValuesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::removeValueFieldFromValues ( _bstr_t customFieldName ) {
    HRESULT _hr = raw_removeValueFieldFromValues(customFieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelValueFieldPtr IExcelPivotTable::getValueField ( _bstr_t name ) {
    struct IExcelValueField * _result = 0;
    HRESULT _hr = raw_getValueField(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelValueFieldPtr(_result, false);
}

inline IExcelValueFieldPtr IExcelPivotTable::getValueFieldAt ( long index ) {
    struct IExcelValueField * _result = 0;
    HRESULT _hr = raw_getValueFieldAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelValueFieldPtr(_result, false);
}

inline HRESULT IExcelPivotTable::Refresh ( struct IExcelDocument * xls ) {
    HRESULT _hr = raw_Refresh(xls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getRowHeaderTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getRowHeaderTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setRowHeaderTitle ( _bstr_t text ) {
    HRESULT _hr = raw_setRowHeaderTitle(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getColumnHeaderTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getColumnHeaderTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setColumnHeaderTitle ( _bstr_t text ) {
    HRESULT _hr = raw_setColumnHeaderTitle(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getDataHeaderTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDataHeaderTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setDataHeaderTitle ( _bstr_t text ) {
    HRESULT _hr = raw_setDataHeaderTitle(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getGrandTotalTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getGrandTotalTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setGrandTotalTitle ( _bstr_t text ) {
    HRESULT _hr = raw_setGrandTotalTitle(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsMergeAndCenterCellsWithLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMergeAndCenterCellsWithLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setMergeAndCenterCellsWithLabels ( VARIANT_BOOL mergeAndCenterCellsWithLabels ) {
    HRESULT _hr = raw_setMergeAndCenterCellsWithLabels(mergeAndCenterCellsWithLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::getRowLabelsIndent ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRowLabelsIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setRowLabelsIndent ( long chars ) {
    HRESULT _hr = raw_setRowLabelsIndent(chars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsPageOverThenDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPageOverThenDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setPageOverThenDown ( VARIANT_BOOL IsPageOverThenDown ) {
    HRESULT _hr = raw_setPageOverThenDown(IsPageOverThenDown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::getPageWrap ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPageWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setPageWrap ( long fields ) {
    HRESULT _hr = raw_setPageWrap(fields);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelPivotTable::getErrorValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getErrorValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setErrorValue ( VARIANT_BOOL ShowError, _bstr_t value ) {
    HRESULT _hr = raw_setErrorValue(ShowError, value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowEmptyCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowEmptyCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IExcelPivotTable::getEmptyCellValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getEmptyCellValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setEmptyCellValue ( VARIANT_BOOL showEmptyCell, _bstr_t value ) {
    HRESULT _hr = raw_setEmptyCellValue(showEmptyCell, value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsPreserveCellFormattingOnUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPreserveCellFormattingOnUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setPreserveCellFormattingOnUpdate ( VARIANT_BOOL preserve ) {
    HRESULT _hr = raw_setPreserveCellFormattingOnUpdate(preserve);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsAutofitColumnWidthsOnUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAutofitColumnWidthsOnUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setAutofitColumnWidthsOnUpdate ( VARIANT_BOOL autofit ) {
    HRESULT _hr = raw_setAutofitColumnWidthsOnUpdate(autofit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowGrandTotalsForRows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowGrandTotalsForRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowGrandTotalsForRows ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowGrandTotalsForRows(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowGrandTotalsForColumns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowGrandTotalsForColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowGrandTotalsForColumns ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowGrandTotalsForColumns(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowSubtotalFilteredPageItems ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowSubtotalFilteredPageItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setSubtotalFilteredPageItems ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setSubtotalFilteredPageItems(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::AllowMultipleFiltersPerField ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowMultipleFiltersPerField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setAllowMultipleFiltersPerField ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowMultipleFiltersPerField(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsUseCustomListsWhenSorting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsUseCustomListsWhenSorting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setUseCustomListsWhenSorting ( VARIANT_BOOL useCustomListsWhenSorting ) {
    HRESULT _hr = raw_setUseCustomListsWhenSorting(useCustomListsWhenSorting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowDrillButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowDrillButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowDrillButtons ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowDrillButtons(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowContextualTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowContextualTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowContextualTooltips ( VARIANT_BOOL ShowContextualTooltips ) {
    HRESULT _hr = raw_setShowContextualTooltips(ShowContextualTooltips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowHeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowHeaders ( VARIANT_BOOL ShowHeaders ) {
    HRESULT _hr = raw_setShowHeaders(ShowHeaders);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsClassicLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsClassicLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setClassicLayout ( VARIANT_BOOL IsClassicLayout ) {
    HRESULT _hr = raw_setClassicLayout(IsClassicLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotTable::getSortOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setSortOrder ( long sortOrder ) {
    HRESULT _hr = raw_setSortOrder(sortOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotTable::setCompactForm ( ) {
    HRESULT _hr = raw_setCompactForm();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotTable::setOutlineForm ( ) {
    HRESULT _hr = raw_setOutlineForm();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotTable::setTabularForm ( ) {
    HRESULT _hr = raw_setTabularForm();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::PrintDrillButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintDrillButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setPrintDrillButtons ( VARIANT_BOOL PrintDrillButtons ) {
    HRESULT _hr = raw_setPrintDrillButtons(PrintDrillButtons);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::RepeatRowLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RepeatRowLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setRepeatRowLabels ( VARIANT_BOOL RepeatRowLabels ) {
    HRESULT _hr = raw_setRepeatRowLabels(RepeatRowLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::PrintTitles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintTitles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setPrintTitles ( VARIANT_BOOL PrintTitles ) {
    HRESULT _hr = raw_setPrintTitles(PrintTitles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::IsEnabledShowDetails ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEnabledShowDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setEnableShowDetails ( VARIANT_BOOL enable ) {
    HRESULT _hr = raw_setEnableShowDetails(enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotTable::getStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotTable::setStyle ( _bstr_t style ) {
    HRESULT _hr = raw_setStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowRowHeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowRowHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowRowHeaders ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowRowHeaders(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowColumnHeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowColumnHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowColumnHeaders ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowColumnHeaders(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowRowStripes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowRowStripes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowRowStripes ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowRowStripes(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotTable::ShowColumnStripes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowColumnStripes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotTable::setShowColumnStripes ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowColumnStripes(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPivotTablePtr IExcelPivotTable::Clone ( ) {
    struct IExcelPivotTable * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPivotTablePtr(_result, false);
}

//
// interface IExcelPivotChart wrapper method implementations
//

inline HRESULT IExcelPivotChart::setLeftUpperCorner ( long row, long column ) {
    HRESULT _hr = raw_setLeftUpperCorner(row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::setLeftUpperCorner_2 ( _bstr_t cellReference ) {
    HRESULT _hr = raw_setLeftUpperCorner_2(cellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getLeftUpperCornerRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelPivotChart::getLeftUpperCornerColumn ( ) {
    long _result = 0;
    HRESULT _hr = raw_getLeftUpperCornerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFillFormatPtr IExcelPivotChart::getFillFormat ( ) {
    struct IFillFormat * _result = 0;
    HRESULT _hr = raw_getFillFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFillFormatPtr(_result, false);
}

inline HRESULT IExcelPivotChart::setFillFormat ( struct IFillFormat * FillFormat ) {
    HRESULT _hr = raw_setFillFormat(FillFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineColorFormatPtr IExcelPivotChart::getLineColorFormat ( ) {
    struct ILineColorFormat * _result = 0;
    HRESULT _hr = raw_getLineColorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineColorFormatPtr(_result, false);
}

inline HRESULT IExcelPivotChart::setLineColorFormat ( struct ILineColorFormat * LineColorFormat ) {
    HRESULT _hr = raw_setLineColorFormat(LineColorFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ILineStyleFormatPtr IExcelPivotChart::getLineStyleFormat ( ) {
    struct ILineStyleFormat * _result = 0;
    HRESULT _hr = raw_getLineStyleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineStyleFormatPtr(_result, false);
}

inline HRESULT IExcelPivotChart::setLineStyleFormat ( struct ILineStyleFormat * LineStyleFormat ) {
    HRESULT _hr = raw_setLineStyleFormat(LineStyleFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IShadowFormatPtr IExcelPivotChart::getShadowFormat ( ) {
    struct IShadowFormat * _result = 0;
    HRESULT _hr = raw_getShadowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShadowFormatPtr(_result, false);
}

inline HRESULT IExcelPivotChart::setShadowFormat ( struct IShadowFormat * ShadowFormat ) {
    HRESULT _hr = raw_setShadowFormat(ShadowFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::setLeftUpperOffset ( long horizontalOffset, long verticalOffset ) {
    HRESULT _hr = raw_setLeftUpperOffset(horizontalOffset, verticalOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getHorizontalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHorizontalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelPivotChart::getVerticalOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_getVerticalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setSize ( long chartWidth, long chartHeight ) {
    HRESULT _hr = raw_setSize(chartWidth, chartHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_getHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelPivotChart::getWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_getWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_setChartType ( long chartType ) {
    HRESULT _hr = raw_easy_setChartType(chartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_getChartType ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_addSeries ( struct IExcelSeries * xlsChartSeries ) {
    HRESULT _hr = raw_easy_addSeries(xlsChartSeries);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::easy_addSeries_2 ( _bstr_t seriesName, _bstr_t seriesValues ) {
    HRESULT _hr = raw_easy_addSeries_2(seriesName, seriesValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::easy_removeSeries ( long index ) {
    HRESULT _hr = raw_easy_removeSeries(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelSeriesPtr IExcelPivotChart::easy_getSeriesAt ( long index ) {
    struct IExcelSeries * _result = 0;
    HRESULT _hr = raw_easy_getSeriesAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSeriesPtr(_result, false);
}

inline long IExcelPivotChart::SeriesCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_SeriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_setCategoryXAxisLabels ( _bstr_t formulaCategoryXAxisLabels ) {
    HRESULT _hr = raw_easy_setCategoryXAxisLabels(formulaCategoryXAxisLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotChart::easy_getCategoryXAxisLabels ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getCategoryXAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setTitle ( _bstr_t title ) {
    HRESULT _hr = raw_easy_setTitle(title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelPivotChart::easy_getTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IExcelTitlePtr IExcelPivotChart::getChartTitle ( ) {
    struct IExcelTitle * _result = 0;
    HRESULT _hr = raw_getChartTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelTitlePtr(_result, false);
}

inline HRESULT IExcelPivotChart::setChartTitle ( struct IExcelTitle * xlsTitle ) {
    HRESULT _hr = raw_setChartTitle(xlsTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartAreaPtr IExcelPivotChart::easy_getChartArea ( ) {
    struct IExcelChartArea * _result = 0;
    HRESULT _hr = raw_easy_getChartArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartAreaPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setChartArea ( struct IExcelChartArea * xlsChartArea ) {
    HRESULT _hr = raw_easy_setChartArea(xlsChartArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPlotAreaPtr IExcelPivotChart::easy_getPlotArea ( ) {
    struct IExcelPlotArea * _result = 0;
    HRESULT _hr = raw_easy_getPlotArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPlotAreaPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setPlotArea ( struct IExcelPlotArea * xlsPlotArea ) {
    HRESULT _hr = raw_easy_setPlotArea(xlsPlotArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartLegendPtr IExcelPivotChart::easy_getLegend ( ) {
    struct IExcelChartLegend * _result = 0;
    HRESULT _hr = raw_easy_getLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartLegendPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setLegend ( struct IExcelChartLegend * xlsLegend ) {
    HRESULT _hr = raw_easy_setLegend(xlsLegend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelAxisPtr IExcelPivotChart::easy_getCategoryXAxis ( ) {
    struct IExcelAxis * _result = 0;
    HRESULT _hr = raw_easy_getCategoryXAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAxisPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setCategoryXAxis ( struct IExcelAxis * xlsCategoryXAxis ) {
    HRESULT _hr = raw_easy_setCategoryXAxis(xlsCategoryXAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::easy_setValueYAxis ( struct IExcelAxis * xlsValueYAxis ) {
    HRESULT _hr = raw_easy_setValueYAxis(xlsValueYAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelAxisPtr IExcelPivotChart::easy_getValueYAxis ( ) {
    struct IExcelAxis * _result = 0;
    HRESULT _hr = raw_easy_getValueYAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelAxisPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setXAxisMajorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setXAxisMajorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelPivotChart::easy_getXAxisMajorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getXAxisMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setYAxisMajorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setYAxisMajorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelPivotChart::easy_getYAxisMajorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getYAxisMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setXAxisMinorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setXAxisMinorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelPivotChart::easy_getXAxisMinorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getXAxisMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setYAxisMinorGridlines ( struct IExcelChartGridlines * xlsGridlines ) {
    HRESULT _hr = raw_easy_setYAxisMinorGridlines(xlsGridlines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartGridlinesPtr IExcelPivotChart::easy_getYAxisMinorGridlines ( ) {
    struct IExcelChartGridlines * _result = 0;
    HRESULT _hr = raw_easy_getYAxisMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartGridlinesPtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setChartDataTable ( struct IExcelDataTable * xlsChartDataTable ) {
    HRESULT _hr = raw_easy_setChartDataTable(xlsChartDataTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataTablePtr IExcelPivotChart::easy_getChartDataTable ( ) {
    struct IExcelDataTable * _result = 0;
    HRESULT _hr = raw_easy_getChartDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataTablePtr(_result, false);
}

inline HRESULT IExcelPivotChart::easy_setSeriesOverlap ( long overlap ) {
    HRESULT _hr = raw_easy_setSeriesOverlap(overlap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_getSeriesOverlap ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getSeriesOverlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_setSeriesGap ( long gap ) {
    HRESULT _hr = raw_easy_setSeriesGap(gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_getSeriesGap ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getSeriesGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_set3DRotation ( long n3DRotation ) {
    HRESULT _hr = raw_easy_set3DRotation(n3DRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_get3DRotation ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_set3DElevation ( long n3DElevation ) {
    HRESULT _hr = raw_easy_set3DElevation(n3DElevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_get3DElevation ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DElevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_set3DHeight ( long n3DHeight ) {
    HRESULT _hr = raw_easy_set3DHeight(n3DHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_get3DHeight ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_set3DPerspective ( long n3DPerspective ) {
    HRESULT _hr = raw_easy_set3DPerspective(n3DPerspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::easy_get3DPerspective ( ) {
    long _result = 0;
    HRESULT _hr = raw_easy_get3DPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::easy_setUse3DPerspective ( VARIANT_BOOL use3DPerspective ) {
    HRESULT _hr = raw_easy_setUse3DPerspective(use3DPerspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotChart::easy_Use3DPerspective ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_Use3DPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setFirstSliceAngle ( long angle ) {
    HRESULT _hr = raw_setFirstSliceAngle(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getFirstSliceAngle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getFirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setVariableColorsBySlice ( VARIANT_BOOL isVariableColor ) {
    HRESULT _hr = raw_setVariableColorsBySlice(isVariableColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotChart::HasVariableColorsBySlice ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasVariableColorsBySlice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setPieExplosion ( long distance ) {
    HRESULT _hr = raw_setPieExplosion(distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getPieExplosion ( ) {
    long _result = 0;
    HRESULT _hr = raw_getPieExplosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::splitSeriesByPosition ( long values ) {
    HRESULT _hr = raw_splitSeriesByPosition(values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::splitSeriesByValue ( double value ) {
    HRESULT _hr = raw_splitSeriesByValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::splitSeriesByPercentageValue ( long value ) {
    HRESULT _hr = raw_splitSeriesByPercentageValue(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExcelPivotChart::getSplitPosition ( ) {
    double _result = 0;
    HRESULT _hr = raw_getSplitPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelPivotChart::getSplitType ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelPivotChart::getSecondPlotSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setSecondPlotSize ( long size ) {
    HRESULT _hr = raw_setSecondPlotSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getDoughnutHoleSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getDoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setDoughnutHoleSize ( long size ) {
    HRESULT _hr = raw_setDoughnutHoleSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getBubbleScale ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setBubbleScale ( long percent ) {
    HRESULT _hr = raw_setBubbleScale(percent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelPivotChart::getBubbleSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_getBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setBubbleSize ( long bubbleSize ) {
    HRESULT _hr = raw_setBubbleSize(bubbleSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::setShowNegativeBubbles ( VARIANT_BOOL visible ) {
    HRESULT _hr = raw_setShowNegativeBubbles(visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelPivotChart::ShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelPivotChart::getStyle ( ) {
    long _result = 0;
    HRESULT _hr = raw_getStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelPivotChart::setStyle ( long style ) {
    HRESULT _hr = raw_setStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelPivotChart::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPivotTablePtr IExcelPivotChart::getPivotTable ( ) {
    struct IExcelPivotTable * _result = 0;
    HRESULT _hr = raw_getPivotTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPivotTablePtr(_result, false);
}

inline HRESULT IExcelPivotChart::setPivotTable ( struct IExcelPivotTable * xlsPivotTable ) {
    HRESULT _hr = raw_setPivotTable(xlsPivotTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPivotChartPtr IExcelPivotChart::Clone ( ) {
    struct IExcelPivotChart * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPivotChartPtr(_result, false);
}

//
// interface IExcelWorksheet wrapper method implementations
//

inline VARIANT_BOOL IExcelWorksheet::IsSheetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSheetSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setSheetSelected ( VARIANT_BOOL IsSheetSelected ) {
    HRESULT _hr = raw_setSheetSelected(IsSheetSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::IsSheetProtected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSheetProtected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setSheetProtected ( VARIANT_BOOL IsSheetProtected ) {
    HRESULT _hr = raw_setSheetProtected(IsSheetProtected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::setProtectionPassword ( _bstr_t sPassword ) {
    HRESULT _hr = raw_setProtectionPassword(sPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowSelectLockedCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowSelectLockedCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowSelectLockedCells ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowSelectLockedCells(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowSelectUnlockedCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowSelectUnlockedCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowSelectUnlockedCells ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowSelectUnlockedCells(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowFormatCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowFormatCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowFormatCells ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowFormatCells(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowFormatColumns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowFormatColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowFormatColumns ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowFormatColumns(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowFormatRows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowFormatRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowFormatRows ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowFormatRows(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowInsertColumns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowInsertColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowInsertColumns ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowInsertColumns(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowInsertRows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowInsertRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowInsertRows ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowInsertRows(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowInsertHyperlinks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowInsertHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowInsertHyperlinks ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowInsertHyperlinks(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowDeleteColumns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowDeleteColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowDeleteColumns ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowDeleteColumns(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowDeleteRows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowDeleteRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowDeleteRows ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowDeleteRows(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowSort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowSort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowSort ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowSort(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowUseAutofilter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowUseAutofilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowUseAutofilter ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowUseAutofilter(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowUsePivots ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowUsePivots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowUsePivots ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowUsePivots(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowEditObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowEditObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowEditObjects ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowEditObjects(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::AllowEditScenarios ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AllowEditScenarios(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setAllowEditScenarios ( VARIANT_BOOL allow ) {
    HRESULT _hr = raw_setAllowEditScenarios(allow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::IsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setHidden ( VARIANT_BOOL IsHidden ) {
    HRESULT _hr = raw_setHidden(IsHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExcelWorksheet::getSheetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSheetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelWorksheet::setSheetName ( _bstr_t sheetName ) {
    HRESULT _hr = raw_setSheetName(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::getZoom ( ) {
    long _result = 0;
    HRESULT _hr = raw_getZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setZoom ( long zoom ) {
    HRESULT _hr = raw_setZoom(zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::getTabColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_getTabColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IThemeColorPtr IExcelWorksheet::getTabThemeColor ( ) {
    struct IThemeColor * _result = 0;
    HRESULT _hr = raw_getTabThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThemeColorPtr(_result, false);
}

inline HRESULT IExcelWorksheet::setTabColor ( long colorTab ) {
    HRESULT _hr = raw_setTabColor(colorTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::setTabColor_2 ( struct IThemeColor * colorTab ) {
    HRESULT _hr = raw_setTabColor_2(colorTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::FooterCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_FooterCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelFooterPtr IExcelWorksheet::easy_getFooterAt ( long index ) {
    struct IExcelFooter * _result = 0;
    HRESULT _hr = raw_easy_getFooterAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFooterPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeFooter ( long index ) {
    HRESULT _hr = raw_easy_removeFooter(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addFooter ( struct IExcelFooter * xlsFooter ) {
    HRESULT _hr = raw_easy_addFooter(xlsFooter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addFooter_2 ( _bstr_t text, _bstr_t position ) {
    HRESULT _hr = raw_easy_addFooter_2(text, position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addFooter_3 ( _bstr_t text, _bstr_t position, _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_easy_addFooter_3(text, position, fontName, fontSize, isBold, isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeFooter_2 ( _bstr_t position ) {
    HRESULT _hr = raw_easy_removeFooter_2(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFooterPtr IExcelWorksheet::easy_getFooterAt_2 ( _bstr_t position ) {
    struct IExcelFooter * _result = 0;
    HRESULT _hr = raw_easy_getFooterAt_2(position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFooterPtr(_result, false);
}

inline long IExcelWorksheet::HeaderCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_HeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelHeaderPtr IExcelWorksheet::easy_getHeaderAt ( long index ) {
    struct IExcelHeader * _result = 0;
    HRESULT _hr = raw_easy_getHeaderAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHeaderPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeHeader ( long index ) {
    HRESULT _hr = raw_easy_removeHeader(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addHeader ( struct IExcelHeader * xlsHeader ) {
    HRESULT _hr = raw_easy_addHeader(xlsHeader);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addHeader_2 ( _bstr_t text, _bstr_t position ) {
    HRESULT _hr = raw_easy_addHeader_2(text, position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addHeader_3 ( _bstr_t text, _bstr_t position, _bstr_t fontName, long fontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic ) {
    HRESULT _hr = raw_easy_addHeader_3(text, position, fontName, fontSize, isBold, isItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeHeader_2 ( _bstr_t position ) {
    HRESULT _hr = raw_easy_removeHeader_2(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelHeaderPtr IExcelWorksheet::easy_getHeaderAt_2 ( _bstr_t position ) {
    struct IExcelHeader * _result = 0;
    HRESULT _hr = raw_easy_getHeaderAt_2(position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHeaderPtr(_result, false);
}

inline long IExcelWorksheet::HyperlinkCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_HyperlinkCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelHyperlinkPtr IExcelWorksheet::easy_getHyperlinkAt ( long index ) {
    struct IExcelHyperlink * _result = 0;
    HRESULT _hr = raw_easy_getHyperlinkAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHyperlinkPtr(_result, false);
}

inline IExcelHyperlinkPtr IExcelWorksheet::easy_getHyperlinkAt_2 ( long nRow, long nColumn ) {
    struct IExcelHyperlink * _result = 0;
    HRESULT _hr = raw_easy_getHyperlinkAt_2(nRow, nColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHyperlinkPtr(_result, false);
}

inline IExcelHyperlinkPtr IExcelWorksheet::easy_getHyperlinkAt_3 ( _bstr_t position ) {
    struct IExcelHyperlink * _result = 0;
    HRESULT _hr = raw_easy_getHyperlinkAt_3(position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelHyperlinkPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeHyperlink ( long index, VARIANT_BOOL clearCellValue ) {
    HRESULT _hr = raw_easy_removeHyperlink(index, clearCellValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addHyperlink ( struct IExcelHyperlink * xlsHyperlink ) {
    HRESULT _hr = raw_easy_addHyperlink(xlsHyperlink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addHyperlink_2 ( _bstr_t hyperlinkType, _bstr_t url, _bstr_t position ) {
    HRESULT _hr = raw_easy_addHyperlink_2(hyperlinkType, url, position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addHyperlink_3 ( _bstr_t hyperlinkType, _bstr_t url, _bstr_t tooltip, _bstr_t position ) {
    HRESULT _hr = raw_easy_addHyperlink_3(hyperlinkType, url, tooltip, position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeHyperlink_2 ( _bstr_t position, VARIANT_BOOL clearCellValue ) {
    HRESULT _hr = raw_easy_removeHyperlink_2(position, clearCellValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::DataValidatorCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_DataValidatorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelDataValidatorPtr IExcelWorksheet::easy_getDataValidatorAt ( long index ) {
    struct IExcelDataValidator * _result = 0;
    HRESULT _hr = raw_easy_getDataValidatorAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataValidatorPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeDataValidator ( long index ) {
    HRESULT _hr = raw_easy_removeDataValidator(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataValidator ( struct IExcelDataValidator * xlsValidator ) {
    HRESULT _hr = raw_easy_addDataValidator(xlsValidator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataValidator_2 ( long firstRow, long firstColumn, long lastRow, long lastColumn, long validationType, long operatorType, _bstr_t firstFormula, _bstr_t secondFormula ) {
    HRESULT _hr = raw_easy_addDataValidator_2(firstRow, firstColumn, lastRow, lastColumn, validationType, operatorType, firstFormula, secondFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataValidator_3 ( _bstr_t range, long validationType, long operatorType, _bstr_t firstFormula, _bstr_t secondFormula ) {
    HRESULT _hr = raw_easy_addDataValidator_3(range, validationType, operatorType, firstFormula, secondFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeDataValidator_2 ( _bstr_t range ) {
    HRESULT _hr = raw_easy_removeDataValidator_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataValidatorPtr IExcelWorksheet::easy_getDataValidatorAt_2 ( _bstr_t range ) {
    struct IExcelDataValidator * _result = 0;
    HRESULT _hr = raw_easy_getDataValidatorAt_2(range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataValidatorPtr(_result, false);
}

inline IExcelPageSetupPtr IExcelWorksheet::easy_getPageSetup ( ) {
    struct IExcelPageSetup * _result = 0;
    HRESULT _hr = raw_easy_getPageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPageSetupPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_insertDataSet ( IUnknown * ds, VARIANT_BOOL includeColumnNames ) {
    HRESULT _hr = raw_easy_insertDataSet(ds, includeColumnNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertDataSet_2 ( IUnknown * ds, const _variant_t & xlsAutoFormat, VARIANT_BOOL includeColumnNames ) {
    HRESULT _hr = raw_easy_insertDataSet_2(ds, xlsAutoFormat, includeColumnNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertDataSet_3 ( IUnknown * ds, long startRow, long startCol, VARIANT_BOOL includeColumnNames ) {
    HRESULT _hr = raw_easy_insertDataSet_3(ds, startRow, startCol, includeColumnNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertDataSet_4 ( IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, VARIANT_BOOL includeColumnNames ) {
    HRESULT _hr = raw_easy_insertDataSet_4(ds, startRow, startCol, xlsAutoFormat, includeColumnNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertDataSet_5 ( IUnknown * ds, _bstr_t startCellReference, VARIANT_BOOL includeColumnNames ) {
    HRESULT _hr = raw_easy_insertDataSet_5(ds, startCellReference, includeColumnNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertDataSet_6 ( IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, VARIANT_BOOL includeColumnNames ) {
    HRESULT _hr = raw_easy_insertDataSet_6(ds, startCellReference, xlsAutoFormat, includeColumnNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertList ( struct IList * ds ) {
    HRESULT _hr = raw_easy_insertList(ds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertList_2 ( const _variant_t & List, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_insertList_2(List, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertList_3 ( const _variant_t & ds, long startRow, long startCol ) {
    HRESULT _hr = raw_easy_insertList_3(ds, startRow, startCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertList_4 ( const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_insertList_4(List, startRow, startCol, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertList_5 ( const _variant_t & ds, _bstr_t startCellReference ) {
    HRESULT _hr = raw_easy_insertList_5(ds, startCellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertList_6 ( const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_insertList_6(List, startCellReference, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromFile ( _bstr_t path ) {
    HRESULT _hr = raw_easy_insertXMLFromFile(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromFile_2 ( _bstr_t path, long startRow, long startCol ) {
    HRESULT _hr = raw_easy_insertXMLFromFile_2(path, startRow, startCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromFile_3 ( _bstr_t path, _bstr_t startCellReference ) {
    HRESULT _hr = raw_easy_insertXMLFromFile_3(path, startCellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromFile_4 ( struct _Stream * f ) {
    HRESULT _hr = raw_easy_insertXMLFromFile_4(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromFile_5 ( struct _Stream * f, long startRow, long startCol ) {
    HRESULT _hr = raw_easy_insertXMLFromFile_5(f, startRow, startCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromFile_6 ( struct _Stream * f, _bstr_t startCellReference ) {
    HRESULT _hr = raw_easy_insertXMLFromFile_6(f, startCellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromString ( _bstr_t xml ) {
    HRESULT _hr = raw_easy_insertXMLFromString(xml);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromString_2 ( _bstr_t xml, long startRow, long startCol ) {
    HRESULT _hr = raw_easy_insertXMLFromString_2(xml, startRow, startCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_insertXMLFromString_3 ( _bstr_t xml, _bstr_t startCellReference ) {
    HRESULT _hr = raw_easy_insertXMLFromString_3(xml, startCellReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::NameCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_NameCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelNamePtr IExcelWorksheet::easy_getNameAt ( long index ) {
    struct IExcelName * _result = 0;
    HRESULT _hr = raw_easy_getNameAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelNamePtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeName ( long index ) {
    HRESULT _hr = raw_easy_removeName(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addName ( struct IExcelName * xlsName ) {
    HRESULT _hr = raw_easy_addName(xlsName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addName_2 ( _bstr_t sNameText, _bstr_t sRefersTo ) {
    HRESULT _hr = raw_easy_addName_2(sNameText, sRefersTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeName_2 ( _bstr_t sNameText ) {
    HRESULT _hr = raw_easy_removeName_2(sNameText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelNamePtr IExcelWorksheet::easy_getName ( _bstr_t sNameText ) {
    struct IExcelName * _result = 0;
    HRESULT _hr = raw_easy_getName(sNameText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelNamePtr(_result, false);
}

inline long IExcelWorksheet::ImageCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ImageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelImagePtr IExcelWorksheet::easy_getImageAt ( long index ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_easy_getImageAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeImage ( long index ) {
    HRESULT _hr = raw_easy_removeImage(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addImage ( struct IExcelImage * xlsImage ) {
    HRESULT _hr = raw_easy_addImage(xlsImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addImage_2 ( _bstr_t path ) {
    HRESULT _hr = raw_easy_addImage_2(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addImage_3 ( _bstr_t path, long row, long column ) {
    HRESULT _hr = raw_easy_addImage_3(path, row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addImage_4 ( _bstr_t path, long row, long column, long width, long height ) {
    HRESULT _hr = raw_easy_addImage_4(path, row, column, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addImage_5 ( _bstr_t path, _bstr_t position ) {
    HRESULT _hr = raw_easy_addImage_5(path, position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addImage_6 ( _bstr_t path, _bstr_t position, long width, long height ) {
    HRESULT _hr = raw_easy_addImage_6(path, position, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeImage_2 ( _bstr_t path ) {
    HRESULT _hr = raw_easy_removeImage_2(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelImagePtr IExcelWorksheet::easy_getImage ( _bstr_t path ) {
    struct IExcelImage * _result = 0;
    HRESULT _hr = raw_easy_getImage(path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelImagePtr(_result, false);
}

inline HRESULT IExcelWorksheet::setPageBreakPreview ( VARIANT_BOOL isPageBreakPreview ) {
    HRESULT _hr = raw_setPageBreakPreview(isPageBreakPreview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::isPageBreakPreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isPageBreakPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelWorksheet::ShowGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setShowGridlines ( VARIANT_BOOL show ) {
    HRESULT _hr = raw_setShowGridlines(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelTablePtr IExcelWorksheet::easy_getExcelTable ( ) {
    struct IExcelTable * _result = 0;
    HRESULT _hr = raw_easy_getExcelTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelTablePtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_setExcelTable ( struct IExcelTable * xlsTable ) {
    HRESULT _hr = raw_easy_setExcelTable(xlsTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelConditionalFormattingPtr IExcelWorksheet::easy_getConditionalFormattingAt ( long index ) {
    struct IExcelConditionalFormatting * _result = 0;
    HRESULT _hr = raw_easy_getConditionalFormattingAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelConditionalFormattingPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_removeConditionalFormatting ( long index ) {
    HRESULT _hr = raw_easy_removeConditionalFormatting(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::ConditionalFormattingCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ConditionalFormattingCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting ( struct IExcelConditionalFormatting * ExcelConditionalFormatting ) {
    HRESULT _hr = raw_easy_addConditionalFormatting(ExcelConditionalFormatting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_2 ( long firstRow, long firstColumn, long lastRow, long lastColumn, const _variant_t & lstConditions ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_2(firstRow, firstColumn, lastRow, lastColumn, lstConditions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_3 ( _bstr_t range, const _variant_t & lstConditions ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_3(range, lstConditions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_4 ( _bstr_t range, long nOperator, _bstr_t firstFormula, _bstr_t secondFormula ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_4(range, nOperator, firstFormula, secondFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_5 ( _bstr_t range, long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_5(range, nOperator, firstFormula, secondFormula, isBold, isItalic, foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_6 ( _bstr_t range, long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, const _variant_t & foreground, const _variant_t & background ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_6(range, nOperator, firstFormula, secondFormula, isBold, isItalic, foreground, background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_7 ( _bstr_t range, long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, long foreground, long background ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_7(range, nOperator, firstFormula, secondFormula, isBold, isItalic, foreground, background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_8 ( _bstr_t range, long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, const _variant_t & background ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_8(range, nOperator, firstFormula, secondFormula, background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addConditionalFormatting_9 ( _bstr_t range, long nOperator, _bstr_t firstFormula, _bstr_t secondFormula, long background ) {
    HRESULT _hr = raw_easy_addConditionalFormatting_9(range, nOperator, firstFormula, secondFormula, background);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeConditionalFormatting_2 ( _bstr_t range ) {
    HRESULT _hr = raw_easy_removeConditionalFormatting_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelConditionalFormattingPtr IExcelWorksheet::easy_getConditionalFormattingAt_2 ( _bstr_t range ) {
    struct IExcelConditionalFormatting * _result = 0;
    HRESULT _hr = raw_easy_getConditionalFormattingAt_2(range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelConditionalFormattingPtr(_result, false);
}

inline _bstr_t IExcelWorksheet::easy_computeFormulas ( const _variant_t & excel, VARIANT_BOOL bRecalculate ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_computeFormulas(excel, bRecalculate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IExcelWorksheet::easy_addArrayFormula ( _bstr_t s2DRangeReference, _bstr_t sFormula ) {
    HRESULT _hr = raw_easy_addArrayFormula(s2DRangeReference, sFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addArrayFormula_2 ( long startRow, long startColumn, long endRow, long endColumn, _bstr_t sFormula ) {
    HRESULT _hr = raw_easy_addArrayFormula_2(startRow, startColumn, endRow, endColumn, sFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::ArrayFormulasCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ArrayFormulasCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::easy_removeArrayFormula ( long index ) {
    HRESULT _hr = raw_easy_removeArrayFormula(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeArrayFormula_2 ( _bstr_t s2DRangeReference ) {
    HRESULT _hr = raw_easy_removeArrayFormula_2(s2DRangeReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeArrayFormula_3 ( long startRow, long startColumn, long endRow, long endColumn ) {
    HRESULT _hr = raw_easy_removeArrayFormula_3(startRow, startColumn, endRow, endColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelArrayFormulaPtr IExcelWorksheet::easy_getArrayFormulaAt ( long nRow, long nColumn ) {
    struct IExcelArrayFormula * _result = 0;
    HRESULT _hr = raw_easy_getArrayFormulaAt(nRow, nColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelArrayFormulaPtr(_result, false);
}

inline IExcelArrayFormulaPtr IExcelWorksheet::easy_getArrayFormulaAt_2 ( _bstr_t range ) {
    struct IExcelArrayFormula * _result = 0;
    HRESULT _hr = raw_easy_getArrayFormulaAt_2(range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelArrayFormulaPtr(_result, false);
}

inline IExcelArrayFormulaPtr IExcelWorksheet::easy_getArrayFormulaAt_3 ( long index ) {
    struct IExcelArrayFormula * _result = 0;
    HRESULT _hr = raw_easy_getArrayFormulaAt_3(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelArrayFormulaPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_addChart ( struct IExcelChart * xlsChart ) {
    HRESULT _hr = raw_easy_addChart(xlsChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addChart_2 ( const _variant_t & xlsChart, long row, long column ) {
    HRESULT _hr = raw_easy_addChart_2(xlsChart, row, column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addChart_3 ( const _variant_t & xlsChart, long row, long column, long width, long height ) {
    HRESULT _hr = raw_easy_addChart_3(xlsChart, row, column, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addChart_4 ( const _variant_t & xlsChart, _bstr_t position ) {
    HRESULT _hr = raw_easy_addChart_4(xlsChart, position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addChart_5 ( const _variant_t & xlsChart, _bstr_t position, long width, long height ) {
    HRESULT _hr = raw_easy_addChart_5(xlsChart, position, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeChart ( long index ) {
    HRESULT _hr = raw_easy_removeChart(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelChartPtr IExcelWorksheet::easy_getChartAt ( long index ) {
    struct IExcelChart * _result = 0;
    HRESULT _hr = raw_easy_getChartAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelChartPtr(_result, false);
}

inline long IExcelWorksheet::ChartCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ChartCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelWorksheet::IsDataGroupAutomaticStyles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataGroupAutomaticStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setDataGroupAutomaticStyles ( VARIANT_BOOL IsDataGroupAutomaticStyles ) {
    HRESULT _hr = raw_setDataGroupAutomaticStyles(IsDataGroupAutomaticStyles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::IsDataGroupSummaryRowsBelow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataGroupSummaryRowsBelow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setDataGroupSummaryRowsBelow ( VARIANT_BOOL IsDataGroupSummaryRowsBelow ) {
    HRESULT _hr = raw_setDataGroupSummaryRowsBelow(IsDataGroupSummaryRowsBelow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelWorksheet::IsDataGroupSummaryColumnsRight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataGroupSummaryColumnsRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setDataGroupSummaryColumnsRight ( VARIANT_BOOL IsDataGroupSummaryColumnsRight ) {
    HRESULT _hr = raw_setDataGroupSummaryColumnsRight(IsDataGroupSummaryColumnsRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataGroup ( struct IExcelDataGroup * xlsGroup ) {
    HRESULT _hr = raw_easy_addDataGroup(xlsGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataGroup_2 ( long firstRow, long firstColumn, long lastRow, long lastColumn, long groupRowsColumns, VARIANT_BOOL isCollapsed ) {
    HRESULT _hr = raw_easy_addDataGroup_2(firstRow, firstColumn, lastRow, lastColumn, groupRowsColumns, isCollapsed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataGroup_3 ( long firstRow, long firstColumn, long lastRow, long lastColumn, long groupRowsColumns, VARIANT_BOOL isCollapsed, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_addDataGroup_3(firstRow, firstColumn, lastRow, lastColumn, groupRowsColumns, isCollapsed, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataGroup_4 ( _bstr_t range, long groupRowsColumns, VARIANT_BOOL isCollapsed ) {
    HRESULT _hr = raw_easy_addDataGroup_4(range, groupRowsColumns, isCollapsed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addDataGroup_5 ( _bstr_t range, long groupRowsColumns, VARIANT_BOOL isCollapsed, const _variant_t & xlsAutoFormat ) {
    HRESULT _hr = raw_easy_addDataGroup_5(range, groupRowsColumns, isCollapsed, xlsAutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeDataGroup ( long index ) {
    HRESULT _hr = raw_easy_removeDataGroup(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removeDataGroup_2 ( _bstr_t range ) {
    HRESULT _hr = raw_easy_removeDataGroup_2(range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDataGroupPtr IExcelWorksheet::easy_getDataGroupAt ( long index ) {
    struct IExcelDataGroup * _result = 0;
    HRESULT _hr = raw_easy_getDataGroupAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataGroupPtr(_result, false);
}

inline IExcelDataGroupPtr IExcelWorksheet::easy_getDataGroupAt_2 ( _bstr_t range ) {
    struct IExcelDataGroup * _result = 0;
    HRESULT _hr = raw_easy_getDataGroupAt_2(range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDataGroupPtr(_result, false);
}

inline long IExcelWorksheet::DataGroupCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_DataGroupCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExcelWorksheet::getColumnMaxOutlineLevel ( ) {
    long _result = 0;
    HRESULT _hr = raw_getColumnMaxOutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setColumnMaxOutlineLevel ( long nOutlineLevel ) {
    HRESULT _hr = raw_setColumnMaxOutlineLevel(nOutlineLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelWorksheet::getRowMaxOutlineLevel ( ) {
    long _result = 0;
    HRESULT _hr = raw_getRowMaxOutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::setRowMaxOutlineLevel ( long nOutlineLevel ) {
    HRESULT _hr = raw_setRowMaxOutlineLevel(nOutlineLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelFilterPtr IExcelWorksheet::easy_getFilter ( ) {
    struct IExcelFilter * _result = 0;
    HRESULT _hr = raw_easy_getFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelFilterPtr(_result, false);
}

inline HRESULT IExcelWorksheet::easy_addPivotTable ( struct IExcelPivotTable * xlsPivotTable ) {
    HRESULT _hr = raw_easy_addPivotTable(xlsPivotTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_addPivotTable_2 ( _bstr_t name, _bstr_t location, _bstr_t sourceFormulaRange, const _variant_t & xls ) {
    HRESULT _hr = raw_easy_addPivotTable_2(name, location, sourceFormulaRange, xls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelWorksheet::easy_removePivotTable ( long index ) {
    HRESULT _hr = raw_easy_removePivotTable(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelPivotTablePtr IExcelWorksheet::easy_getPivotTableAt ( long index ) {
    struct IExcelPivotTable * _result = 0;
    HRESULT _hr = raw_easy_getPivotTableAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPivotTablePtr(_result, false);
}

inline IExcelPivotTablePtr IExcelWorksheet::easy_getPivotTable ( _bstr_t name ) {
    struct IExcelPivotTable * _result = 0;
    HRESULT _hr = raw_easy_getPivotTable(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelPivotTablePtr(_result, false);
}

inline long IExcelWorksheet::PivotTableCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_PivotTableCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelWorksheet::easy_addPivotChart ( struct IExcelPivotChart * xlsPivotChart ) {
    HRESULT _hr = raw_easy_addPivotChart(xlsPivotChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelSheetPtr IExcelWorksheet::Clone ( ) {
    struct IExcelSheet * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSheetPtr(_result, false);
}

//
// interface IExcelDocument wrapper method implementations
//

inline _bstr_t IExcelDocument::easy_getError ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IExcelDocument::easy_getWarnings ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_easy_getWarnings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IExcelDocument::SheetCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_SheetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_IsExcel ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_IsExcel(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_IsExcel_2 ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_IsExcel_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IListPtr IExcelDocument::easy_ReadXLSSheet_AsList ( _bstr_t path, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsList(path, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSSheet_AsList_2 ( struct _Stream * f, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsList_2(f, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSSheet_AsList_3 ( _bstr_t sPath, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsList_3(sPath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSSheet_AsList_4 ( struct _Stream * f, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsList_4(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSSheet_AsList_5 ( _bstr_t path, _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsList_5(path, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSSheet_AsList_6 ( struct _Stream * f, _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsList_6(f, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSSheet_AsDataSet ( _bstr_t path, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsDataSet(path, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSSheet_AsDataSet_2 ( struct _Stream * f, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsDataSet_2(f, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSSheet_AsDataSet_3 ( _bstr_t path, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsDataSet_3(path, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSSheet_AsDataSet_4 ( struct _Stream * f, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsDataSet_4(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSSheet_AsDataSet_5 ( _bstr_t path, _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsDataSet_5(path, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSSheet_AsDataSet_6 ( struct _Stream * f, _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsDataSet_6(f, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadExcelWorksheet_AsList ( const _variant_t & xlsWorksheet, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsList(xlsWorksheet, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadExcelWorksheet_AsList_2 ( const _variant_t & xlsWorksheet ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsList_2(xlsWorksheet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadExcelWorksheet_AsList_3 ( const _variant_t & xlsWorksheet, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsList_3(xlsWorksheet, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadExcelWorksheet_AsList_4 ( _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsList_4(sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadExcelWorksheet_AsList_5 ( _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsList_5(sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadExcelWorksheet_AsList_6 ( _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsList_6(sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadExcelWorksheet_AsDataSet ( const _variant_t & xlsWorksheet, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsDataSet(xlsWorksheet, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadExcelWorksheet_AsDataSet_2 ( const _variant_t & xlsWorksheet ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsDataSet_2(xlsWorksheet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadExcelWorksheet_AsDataSet_3 ( const _variant_t & xlsWorksheet, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsDataSet_3(xlsWorksheet, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadExcelWorksheet_AsDataSet_4 ( _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsDataSet_4(sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadExcelWorksheet_AsDataSet_5 ( _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsDataSet_5(sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadExcelWorksheet_AsDataSet_6 ( _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsDataSet_6(sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSSheet_AsXML ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsXML(XMLFilePath, XLSFilePath, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSSheet_AsXML_2 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsXML_2(XMLFilePath, XLSFilePath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSSheet_AsXML_3 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsXML_3(XMLFilePath, XLSFilePath, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSSheet_AsXML_4 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsXML_4(fXML, fXLS, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSSheet_AsXML_5 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsXML_5(fXML, fXLS, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSSheet_AsXML_6 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSSheet_AsXML_6(fXML, fXLS, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IListPtr IExcelDocument::easy_ReadXLSActiveSheet_AsList ( _bstr_t sPath ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsList(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSActiveSheet_AsList_2 ( struct _Stream * f ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsList_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSActiveSheet_AsList_3 ( _bstr_t path, _bstr_t rangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsList_3(path, rangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSActiveSheet_AsList_4 ( struct _Stream * f, _bstr_t rangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsList_4(f, rangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSActiveSheet_AsList_5 ( _bstr_t path, long startRow, long startColumn, long endRow, long endColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsList_5(path, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSActiveSheet_AsList_6 ( struct _Stream * f, long startRow, long startColumn, long endRow, long endColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsList_6(f, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSActiveSheet_AsDataSet ( _bstr_t sPath ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsDataSet(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSActiveSheet_AsDataSet_2 ( struct _Stream * f ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsDataSet_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSActiveSheet_AsDataSet_3 ( _bstr_t path, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsDataSet_3(path, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSActiveSheet_AsDataSet_4 ( struct _Stream * f, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsDataSet_4(f, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSActiveSheet_AsDataSet_5 ( _bstr_t path, long startRow, long startColumn, long endRow, long endColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsDataSet_5(path, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSActiveSheet_AsDataSet_6 ( struct _Stream * f, long startRow, long startColumn, long endRow, long endColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsDataSet_6(f, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSActiveSheet_AsXML ( _bstr_t XMLFilePath, _bstr_t XLSXFilePath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsXML(XMLFilePath, XLSXFilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSActiveSheet_AsXML_2 ( struct _Stream * fXML, struct _Stream * fXLSX ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsXML_2(fXML, fXLSX, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSActiveSheet_AsXML_3 ( _bstr_t XMLFilePath, _bstr_t XLSXFilePath, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsXML_3(XMLFilePath, XLSXFilePath, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSActiveSheet_AsXML_4 ( struct _Stream * fXML, struct _Stream * fXLSX, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsXML_4(fXML, fXLSX, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSActiveSheet_AsXML_5 ( _bstr_t XMLFilePath, _bstr_t XLSXFilePath, long startRow, long startColumn, long endRow, long endColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsXML_5(XMLFilePath, XLSXFilePath, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSActiveSheet_AsXML_6 ( struct _Stream * fXML, struct _Stream * fXLSX, long startRow, long startColumn, long endRow, long endColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSActiveSheet_AsXML_6(fXML, fXLSX, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IListPtr IExcelDocument::easy_ReadCSVFile_AsList ( _bstr_t sPath ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadCSVFile_AsList(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadCSVFile_AsList_2 ( struct _Stream * f ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadCSVFile_AsList_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadCSVFile_AsList_3 ( struct _StreamReader * f ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadCSVFile_AsList_3(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadCSVFile_AsDataSet ( _bstr_t sPath ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadCSVFile_AsDataSet(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadCSVFile_AsDataSet_2 ( struct _Stream * f ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadCSVFile_AsDataSet_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadCSVFile_AsDataSet_3 ( struct _StreamReader * f ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadCSVFile_AsDataSet_3(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXMLSpreadsheet_AsDataSet ( struct _Stream * f, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXMLSpreadsheet_AsDataSet(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXMLSpreadsheet_AsDataSet_2 ( _bstr_t sPath, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXMLSpreadsheet_AsDataSet_2(sPath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXMLSpreadsheet_AsList ( struct _Stream * f, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXMLSpreadsheet_AsList(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXMLSpreadsheet_AsList_2 ( _bstr_t sPath, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXMLSpreadsheet_AsList_2(sPath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadTXTFile_AsList ( _bstr_t sPath, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadTXTFile_AsList(sPath, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadTXTFile_AsList_2 ( struct _Stream * f, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadTXTFile_AsList_2(f, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadTXTFile_AsList_3 ( struct _StreamReader * f, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadTXTFile_AsList_3(f, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadTXTFile_AsDataSet ( _bstr_t sPath, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadTXTFile_AsDataSet(sPath, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadTXTFile_AsDataSet_2 ( struct _Stream * f, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadTXTFile_AsDataSet_2(f, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadTXTFile_AsDataSet_3 ( struct _StreamReader * f, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadTXTFile_AsDataSet_3(f, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML ( _bstr_t XMLFilePath, const _variant_t & xlsWorksheet, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML(XMLFilePath, xlsWorksheet, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_2 ( _bstr_t XMLFilePath, const _variant_t & xlsWorksheet ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_2(XMLFilePath, xlsWorksheet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_3 ( _bstr_t XMLFilePath, const _variant_t & xlsWorksheet, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_3(XMLFilePath, xlsWorksheet, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_4 ( _bstr_t XMLFilePath, _bstr_t sheetName, long startRow, long nStartColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_4(XMLFilePath, sheetName, startRow, nStartColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_5 ( _bstr_t XMLFilePath, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_5(XMLFilePath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_6 ( _bstr_t XMLFilePath, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_6(XMLFilePath, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_7 ( struct _Stream * fXML, const _variant_t & xlsWorksheet, long nStartRow, long nStartColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_7(fXML, xlsWorksheet, nStartRow, nStartColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_8 ( struct _Stream * fXML, const _variant_t & xlsWorksheet ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_8(fXML, xlsWorksheet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_9 ( struct _Stream * fXML, const _variant_t & xlsWorksheet, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_9(fXML, xlsWorksheet, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_10 ( struct _Stream * fXML, _bstr_t sheetName, long nStartRow, long nStartColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_10(fXML, sheetName, nStartRow, nStartColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_11 ( struct _Stream * fXML, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_11(fXML, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadExcelWorksheet_AsXML_12 ( struct _Stream * fXML, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadExcelWorksheet_AsXML_12(fXML, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXSheet_AsDataSet ( _bstr_t path, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsDataSet(path, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXSheet_AsDataSet_2 ( struct _Stream * f, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsDataSet_2(f, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXSheet_AsDataSet_3 ( _bstr_t path, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsDataSet_3(path, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXSheet_AsDataSet_4 ( struct _Stream * f, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsDataSet_4(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXSheet_AsDataSet_5 ( _bstr_t path, _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsDataSet_5(path, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXSheet_AsDataSet_6 ( struct _Stream * f, _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsDataSet_6(f, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXSheet_AsList ( _bstr_t path, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsList(path, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXSheet_AsList_2 ( struct _Stream * f, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsList_2(f, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXSheet_AsList_3 ( _bstr_t sPath, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsList_3(sPath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXSheet_AsList_4 ( struct _Stream * f, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsList_4(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXSheet_AsList_5 ( _bstr_t path, _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsList_5(path, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXSheet_AsList_6 ( struct _Stream * f, _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsList_6(f, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsDataSet ( _bstr_t sPath ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsDataSet(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsDataSet_2 ( struct _Stream * f ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsDataSet_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsDataSet_3 ( _bstr_t path, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsDataSet_3(path, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsDataSet_4 ( struct _Stream * f, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsDataSet_4(f, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsDataSet_5 ( _bstr_t path, long startRow, long startColumn, long endRow, long endColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsDataSet_5(path, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsDataSet_6 ( struct _Stream * f, long startRow, long startColumn, long endRow, long endColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsDataSet_6(f, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsList ( _bstr_t sPath ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsList(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsList_2 ( struct _Stream * f ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsList_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsList_3 ( _bstr_t sPath, _bstr_t rangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsList_3(sPath, rangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsList_4 ( struct _Stream * f, _bstr_t rangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsList_4(f, rangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsList_5 ( _bstr_t sPath, long startRow, long startColumn, long endRow, long endColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsList_5(sPath, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSXActiveSheet_AsList_6 ( struct _Stream * f, long startRow, long startColumn, long endRow, long endColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsList_6(f, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXSheet_AsXML ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsXML(XMLFilePath, XLSFilePath, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXSheet_AsXML_2 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsXML_2(XMLFilePath, XLSFilePath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXSheet_AsXML_3 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsXML_3(XMLFilePath, XLSFilePath, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXSheet_AsXML_4 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsXML_4(fXML, fXLS, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXSheet_AsXML_5 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsXML_5(fXML, fXLS, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXSheet_AsXML_6 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXSheet_AsXML_6(fXML, fXLS, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXActiveSheet_AsXML ( _bstr_t XMLFilePath, _bstr_t XLSFilePath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsXML(XMLFilePath, XLSFilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXActiveSheet_AsXML_2 ( struct _Stream * fXML, struct _Stream * fXLS ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsXML_2(fXML, fXLS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXActiveSheet_AsXML_3 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsXML_3(XMLFilePath, XLSFilePath, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXActiveSheet_AsXML_4 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsXML_4(fXML, fXLS, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXActiveSheet_AsXML_5 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsXML_5(XMLFilePath, XLSFilePath, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSXActiveSheet_AsXML_6 ( struct _Stream * fXML, struct _Stream * fXLS, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSXActiveSheet_AsXML_6(fXML, fXLS, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBSheet_AsDataSet ( _bstr_t path, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsDataSet(path, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBSheet_AsDataSet_2 ( struct _Stream * f, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsDataSet_2(f, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBSheet_AsDataSet_3 ( _bstr_t path, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsDataSet_3(path, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBSheet_AsDataSet_4 ( struct _Stream * f, _bstr_t sheetName ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsDataSet_4(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBSheet_AsDataSet_5 ( _bstr_t path, _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsDataSet_5(path, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBSheet_AsDataSet_6 ( struct _Stream * f, _bstr_t sheetName, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsDataSet_6(f, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBSheet_AsList ( _bstr_t path, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsList(path, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBSheet_AsList_2 ( struct _Stream * f, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsList_2(f, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBSheet_AsList_3 ( _bstr_t sPath, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsList_3(sPath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBSheet_AsList_4 ( struct _Stream * f, _bstr_t sheetName ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsList_4(f, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBSheet_AsList_5 ( _bstr_t path, _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsList_5(path, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBSheet_AsList_6 ( struct _Stream * f, _bstr_t sheetName, _bstr_t sRangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsList_6(f, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsDataSet ( _bstr_t sPath ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsDataSet(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsDataSet_2 ( struct _Stream * f ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsDataSet_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsDataSet_3 ( _bstr_t path, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsDataSet_3(path, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsDataSet_4 ( struct _Stream * f, _bstr_t sRangeReference ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsDataSet_4(f, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsDataSet_5 ( _bstr_t path, long startRow, long startColumn, long endRow, long endColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsDataSet_5(path, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsDataSet_6 ( struct _Stream * f, long startRow, long startColumn, long endRow, long endColumn ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsDataSet_6(f, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsList ( _bstr_t sPath ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsList(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsList_2 ( struct _Stream * f ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsList_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsList_3 ( _bstr_t sPath, _bstr_t rangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsList_3(sPath, rangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsList_4 ( struct _Stream * f, _bstr_t rangeReference ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsList_4(f, rangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsList_5 ( _bstr_t sPath, long startRow, long startColumn, long endRow, long endColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsList_5(sPath, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline IListPtr IExcelDocument::easy_ReadXLSBActiveSheet_AsList_6 ( struct _Stream * f, long startRow, long startColumn, long endRow, long endColumn ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsList_6(f, startRow, startColumn, endRow, endColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBSheet_AsXML ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsXML(XMLFilePath, XLSFilePath, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBSheet_AsXML_2 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsXML_2(XMLFilePath, XLSFilePath, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBSheet_AsXML_3 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsXML_3(XMLFilePath, XLSFilePath, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBSheet_AsXML_4 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsXML_4(fXML, fXLS, sheetName, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBSheet_AsXML_5 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsXML_5(fXML, fXLS, sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBSheet_AsXML_6 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sheetName, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBSheet_AsXML_6(fXML, fXLS, sheetName, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBActiveSheet_AsXML ( _bstr_t XMLFilePath, _bstr_t XLSFilePath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsXML(XMLFilePath, XLSFilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBActiveSheet_AsXML_2 ( struct _Stream * fXML, struct _Stream * fXLS ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsXML_2(fXML, fXLS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBActiveSheet_AsXML_3 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsXML_3(XMLFilePath, XLSFilePath, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBActiveSheet_AsXML_4 ( struct _Stream * fXML, struct _Stream * fXLS, _bstr_t sRangeReference ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsXML_4(fXML, fXLS, sRangeReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBActiveSheet_AsXML_5 ( _bstr_t XMLFilePath, _bstr_t XLSFilePath, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsXML_5(XMLFilePath, XLSFilePath, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_ReadXLSBActiveSheet_AsXML_6 ( struct _Stream * fXML, struct _Stream * fXLS, long startRow, long startColumn, long nEndRow, long nEndColumn ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_ReadXLSBActiveSheet_AsXML_6(fXML, fXLS, startRow, startColumn, nEndRow, nEndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadTXTFile ( _bstr_t sPath, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadTXTFile(sPath, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadTXTFile_2 ( struct _Stream * f, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadTXTFile_2(f, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadTXTFile_3 ( struct _StreamReader * f, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadTXTFile_3(f, sRowDelimiter, sColumnDelimiter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadCSVFile ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadCSVFile(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadCSVFile_2 ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadCSVFile_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadCSVFile_3 ( struct _StreamReader * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadCSVFile_3(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXMLSpreadsheetFile ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXMLSpreadsheetFile(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXMLSpreadsheetFile_2 ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXMLSpreadsheetFile_2(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadHTMLFile ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadHTMLFile(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadHTMLFile_2 ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadHTMLFile_2(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadHTMLFile_3 ( struct _StreamReader * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadHTMLFile_3(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXLSFile ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXLSFile(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXLSFile_2 ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXLSFile_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXLSXFile ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXLSXFile(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXLSXFile_2 ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXLSXFile_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXLSBFile ( _bstr_t sPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXLSBFile(sPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::easy_LoadXLSBFile_2 ( struct _Stream * f ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_easy_LoadXLSBFile_2(f, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDocument::easy_WriteTXTFile ( _bstr_t sPath, _bstr_t sSheetName, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    HRESULT _hr = raw_easy_WriteTXTFile(sPath, sSheetName, sRowDelimiter, sColumnDelimiter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteTXTFile_2 ( struct _StreamWriter * f, _bstr_t sSheetName, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    HRESULT _hr = raw_easy_WriteTXTFile_2(f, sSheetName, sRowDelimiter, sColumnDelimiter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteTXTFile_3 ( struct _Stream * f, _bstr_t sSheetName, _bstr_t sRowDelimiter, _bstr_t sColumnDelimiter ) {
    HRESULT _hr = raw_easy_WriteTXTFile_3(f, sSheetName, sRowDelimiter, sColumnDelimiter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXMLFile ( struct _Stream * f ) {
    HRESULT _hr = raw_easy_WriteXMLFile(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXMLFile_2 ( _bstr_t sPath ) {
    HRESULT _hr = raw_easy_WriteXMLFile_2(sPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteHTMLFile ( struct _Stream * f, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteHTMLFile(f, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteHTMLFile_2 ( struct _StreamWriter * f, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteHTMLFile_2(f, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteHTMLFile_3 ( _bstr_t sPath, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteHTMLFile_3(sPath, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteCSVFile ( _bstr_t sPath, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteCSVFile(sPath, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteCSVFile_2 ( struct _StreamWriter * f, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteCSVFile_2(f, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteCSVFile_3 ( struct _Stream * f, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteCSVFile_3(f, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile ( _bstr_t sPath ) {
    HRESULT _hr = raw_easy_WriteXLSFile(sPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_2 ( struct _Stream * f ) {
    HRESULT _hr = raw_easy_WriteXLSFile_2(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromDataSet ( _bstr_t sPath, IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromDataSet(sPath, ds, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromDataSet_2 ( _bstr_t sPath, IUnknown * ds, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromDataSet_2(sPath, ds, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromDataSet_3 ( _bstr_t sPath, IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromDataSet_3(sPath, ds, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromDataSet_4 ( struct _Stream * f, IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromDataSet_4(f, ds, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromDataSet_5 ( struct _Stream * f, IUnknown * ds, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromDataSet_5(f, ds, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromDataSet_6 ( struct _Stream * f, IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromDataSet_6(f, ds, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromList ( _bstr_t sPath, const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromList(sPath, List, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromList_2 ( _bstr_t sPath, const _variant_t & List, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromList_2(sPath, List, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromList_3 ( _bstr_t sPath, const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromList_3(sPath, List, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromList_4 ( struct _Stream * f, const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromList_4(f, List, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromList_5 ( struct _Stream * f, const _variant_t & List, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromList_5(f, List, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSFile_FromList_6 ( struct _Stream * f, const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSFile_FromList_6(f, List, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile ( _bstr_t sPath ) {
    HRESULT _hr = raw_easy_WriteXLSXFile(sPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_2 ( struct _Stream * f ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_2(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromDataSet ( _bstr_t sPath, IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromDataSet(sPath, ds, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromDataSet_2 ( _bstr_t sPath, IUnknown * ds, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromDataSet_2(sPath, ds, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromDataSet_3 ( _bstr_t sPath, IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromDataSet_3(sPath, ds, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromDataSet_4 ( struct _Stream * f, IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromDataSet_4(f, ds, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromDataSet_5 ( struct _Stream * f, IUnknown * ds, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromDataSet_5(f, ds, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromDataSet_6 ( struct _Stream * f, IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromDataSet_6(f, ds, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromList ( _bstr_t sPath, const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromList(sPath, List, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromList_2 ( _bstr_t sPath, const _variant_t & List, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromList_2(sPath, List, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromList_3 ( _bstr_t sPath, const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromList_3(sPath, List, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromList_4 ( struct _Stream * f, const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromList_4(f, List, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromList_5 ( struct _Stream * f, const _variant_t & List, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromList_5(f, List, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSXFile_FromList_6 ( struct _Stream * f, const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSXFile_FromList_6(f, List, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile ( _bstr_t sPath ) {
    HRESULT _hr = raw_easy_WriteXLSBFile(sPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_2 ( struct _Stream * f ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_2(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromDataSet ( _bstr_t sPath, IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromDataSet(sPath, ds, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromDataSet_2 ( _bstr_t sPath, IUnknown * ds, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromDataSet_2(sPath, ds, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromDataSet_3 ( _bstr_t sPath, IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromDataSet_3(sPath, ds, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromDataSet_4 ( struct _Stream * f, IUnknown * ds, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromDataSet_4(f, ds, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromDataSet_5 ( struct _Stream * f, IUnknown * ds, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromDataSet_5(f, ds, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromDataSet_6 ( struct _Stream * f, IUnknown * ds, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromDataSet_6(f, ds, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromList ( _bstr_t sPath, const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromList(sPath, List, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromList_2 ( _bstr_t sPath, const _variant_t & List, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromList_2(sPath, List, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromList_3 ( _bstr_t sPath, const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromList_3(sPath, List, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromList_4 ( struct _Stream * f, const _variant_t & List, long startRow, long startCol, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromList_4(f, List, startRow, startCol, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromList_5 ( struct _Stream * f, const _variant_t & List, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromList_5(f, List, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_WriteXLSBFile_FromList_6 ( struct _Stream * f, const _variant_t & List, _bstr_t startCellReference, const _variant_t & xlsAutoFormat, _bstr_t sSheetName ) {
    HRESULT _hr = raw_easy_WriteXLSBFile_FromList_6(f, List, startCellReference, xlsAutoFormat, sSheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addWorksheet ( struct IExcelWorksheet * xlsWorksheet ) {
    HRESULT _hr = raw_easy_addWorksheet(xlsWorksheet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addWorksheet_2 ( _bstr_t sheetName ) {
    HRESULT _hr = raw_easy_addWorksheet_2(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addWorksheet_3 ( _bstr_t sheetName, VARIANT_BOOL isSelected ) {
    HRESULT _hr = raw_easy_addWorksheet_3(sheetName, isSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertWorksheet ( long index, const _variant_t & xlsWorksheet ) {
    HRESULT _hr = raw_easy_insertWorksheet(index, xlsWorksheet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertWorksheet_2 ( long index, _bstr_t sheetName ) {
    HRESULT _hr = raw_easy_insertWorksheet_2(index, sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertWorksheet_3 ( long index, _bstr_t sheetName, VARIANT_BOOL isSelected ) {
    HRESULT _hr = raw_easy_insertWorksheet_3(index, sheetName, isSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_removeSheet ( long index ) {
    HRESULT _hr = raw_easy_removeSheet(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_removeSheet_2 ( _bstr_t sheetName ) {
    HRESULT _hr = raw_easy_removeSheet_2(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelSheetPtr IExcelDocument::easy_getSheetAt ( long index ) {
    struct IExcelSheet * _result = 0;
    HRESULT _hr = raw_easy_getSheetAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSheetPtr(_result, false);
}

inline IExcelSheetPtr IExcelDocument::easy_getSheet ( _bstr_t sheetName ) {
    struct IExcelSheet * _result = 0;
    HRESULT _hr = raw_easy_getSheet(sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelSheetPtr(_result, false);
}

inline long IExcelDocument::easy_getSheetPosition ( _bstr_t sheetName ) {
    long _result = 0;
    HRESULT _hr = raw_easy_getSheetPosition(sheetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDocument::easy_addChart ( struct IExcelChartSheet * xlsChart ) {
    HRESULT _hr = raw_easy_addChart(xlsChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addChart_2 ( _bstr_t sheetName ) {
    HRESULT _hr = raw_easy_addChart_2(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addChart_3 ( _bstr_t sheetName, VARIANT_BOOL isSelected ) {
    HRESULT _hr = raw_easy_addChart_3(sheetName, isSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addChart_4 ( _bstr_t sheetName, VARIANT_BOOL isSelected, _bstr_t formulaDataRange, long seriesType ) {
    HRESULT _hr = raw_easy_addChart_4(sheetName, isSelected, formulaDataRange, seriesType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_addChart_5 ( _bstr_t sheetName, _bstr_t formulaDataRange, long seriesType ) {
    HRESULT _hr = raw_easy_addChart_5(sheetName, formulaDataRange, seriesType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertChart ( long index, const _variant_t & xlsChart ) {
    HRESULT _hr = raw_easy_insertChart(index, xlsChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertChart_2 ( long index, _bstr_t sheetName ) {
    HRESULT _hr = raw_easy_insertChart_2(index, sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertChart_3 ( long index, _bstr_t sheetName, VARIANT_BOOL isSelected ) {
    HRESULT _hr = raw_easy_insertChart_3(index, sheetName, isSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertChart_4 ( long index, _bstr_t sheetName, VARIANT_BOOL isSelected, _bstr_t formulaDataRange, long seriesType ) {
    HRESULT _hr = raw_easy_insertChart_4(index, sheetName, isSelected, formulaDataRange, seriesType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::easy_insertChart_5 ( long index, _bstr_t sheetName, _bstr_t formulaDataRange, long seriesType ) {
    HRESULT _hr = raw_easy_insertChart_5(index, sheetName, formulaDataRange, seriesType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IExcelDocument::getCurrentSheet ( ) {
    long _result = 0;
    HRESULT _hr = raw_getCurrentSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDocument::setCurrentSheet ( long tabIndex ) {
    HRESULT _hr = raw_setCurrentSheet(tabIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::setWorkbookProtection ( VARIANT_BOOL protectStructure, VARIANT_BOOL protectWindows, _bstr_t password ) {
    HRESULT _hr = raw_setWorkbookProtection(protectStructure, protectWindows, password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IExcelDocument::IsStructureProtected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStructureProtected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IExcelDocument::IsWindowsProtected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsWindowsProtected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExcelDocument::setWorkbookPassword ( _bstr_t password ) {
    HRESULT _hr = raw_setWorkbookPassword(password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::Dispose ( ) {
    HRESULT _hr = raw_Dispose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelOptionsPtr IExcelDocument::easy_getOptions ( ) {
    struct IExcelOptions * _result = 0;
    HRESULT _hr = raw_easy_getOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelOptionsPtr(_result, false);
}

inline HRESULT IExcelDocument::easy_setOptions ( struct IExcelOptions * xlsOptions ) {
    HRESULT _hr = raw_easy_setOptions(xlsOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IListPtr IExcelDocument::getCircularReferences ( ) {
    struct IList * _result = 0;
    HRESULT _hr = raw_getCircularReferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IListPtr(_result, false);
}

inline HRESULT IExcelDocument::easy_removeVBMacros ( ) {
    HRESULT _hr = raw_easy_removeVBMacros();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::setDocumentSummaryInformation ( struct IDocumentSummaryInformation * DocumentSummaryInformation ) {
    HRESULT _hr = raw_setDocumentSummaryInformation(DocumentSummaryInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDocumentSummaryInformationPtr IExcelDocument::getDocumentSummaryInformation ( ) {
    struct IDocumentSummaryInformation * _result = 0;
    HRESULT _hr = raw_getDocumentSummaryInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDocumentSummaryInformationPtr(_result, false);
}

inline HRESULT IExcelDocument::setSummaryInformation ( struct ISummaryInformation * SummaryInformation ) {
    HRESULT _hr = raw_setSummaryInformation(SummaryInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISummaryInformationPtr IExcelDocument::getSummaryInformation ( ) {
    struct ISummaryInformation * _result = 0;
    HRESULT _hr = raw_getSummaryInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISummaryInformationPtr(_result, false);
}

inline IExternalLinksPtr IExcelDocument::getExternalLinks ( ) {
    struct IExternalLinks * _result = 0;
    HRESULT _hr = raw_getExternalLinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExternalLinksPtr(_result, false);
}

inline IExcelThemePtr IExcelDocument::getTheme ( ) {
    struct IExcelTheme * _result = 0;
    HRESULT _hr = raw_getTheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelThemePtr(_result, false);
}

inline HRESULT IExcelDocument::setTheme ( struct IExcelTheme * xlsTheme ) {
    HRESULT _hr = raw_setTheme(xlsTheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExcelDocument::setTheme_2 ( _bstr_t builtInTheme ) {
    HRESULT _hr = raw_setTheme_2(builtInTheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IExcelDocumentPtr IExcelDocument::Clone ( ) {
    struct IExcelDocument * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDocumentPtr(_result, false);
}

//
// interface IExternalLinks wrapper method implementations
//

inline HRESULT IExternalLinks::addLink ( _bstr_t link ) {
    HRESULT _hr = raw_addLink(link);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IExternalLinks::getLinkAt ( long index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLinkAt(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IExternalLinks::getIndexOf ( _bstr_t link ) {
    long _result = 0;
    HRESULT _hr = raw_getIndexOf(link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IExcelDocumentPtr IExternalLinks::getExcelDocument ( _bstr_t link ) {
    struct IExcelDocument * _result = 0;
    HRESULT _hr = raw_getExcelDocument(link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExcelDocumentPtr(_result, false);
}

inline long IExternalLinks::count ( ) {
    long _result = 0;
    HRESULT _hr = raw_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}


} // namespace EasyXLS

#pragma pack(pop)
